{"version":3,"file":"auto-translate-summary-report.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/autotranslate/auto-translate-summary-report.ts"],"names":[],"mappings":";;AACA,+BAA4B;AAG5B;;;GAGG;AAEH,MAAa,0BAA0B;IAUrC,YAAY,IAAY,EAAE,EAAU;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAa,EAAE,KAAa;QAC1C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,EAAc,EAAE,MAA2B;QAChE,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;YACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;aAAM;YACL,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;IACH,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,cAA0C;QACrD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;SACrC;QACD,IAAI,CAAC,MAAM,IAAI,cAAc,CAAC,KAAK,EAAE,CAAC;QACtC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;QAC1C,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;QAC1C,IAAI,CAAC,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,MAAM,CAAC;QACX,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,GAAG,aAAM,CAAC,mEAAmE,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACvI;aAAM;YACL,MAAM,GAAG,aAAM,CAAC,6GAA6G,EACzH,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACpF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAhGD,gEAgGC","sourcesContent":["import {AutoTranslateResult} from './auto-translate-result';\nimport {format} from 'util';\nimport {ITransUnit} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\n\n/**\n * A report about a run of Google Translate over all untranslated unit.\n * * Created by martin on 29.06.2017.\n */\n\nexport class AutoTranslateSummaryReport {\n\n  private _error: string;\n  private _from: string;\n  private _to: string;\n  private _total: number;\n  private _ignored: number;\n  private _success: number;\n  private _failed: number;\n\n  constructor(from: string, to: string) {\n    this._from = from;\n    this._to = to;\n    this._total = 0;\n    this._ignored = 0;\n    this._success = 0;\n    this._failed = 0;\n  }\n\n  /**\n   * Set error if total call failed (e.g. \"invalid api key\" or \"no connection\" ...)\n   * @param error error\n   * @param total total\n   */\n  public setError(error: string, total: number) {\n    this._error = error;\n    this._total = total;\n    this._failed = total;\n  }\n\n  public error(): string {\n    return this._error;\n  }\n\n  public setIgnored(ignored: number) {\n    this._total += ignored;\n    this._ignored = ignored;\n  }\n\n  /**\n   * Add a single result to the summary.\n   * @param tu tu\n   * @param result result\n   */\n  public addSingleResult(tu: ITransUnit, result: AutoTranslateResult) {\n    this._total++;\n    if (result.success()) {\n      this._success++;\n    } else {\n      this._failed++;\n    }\n  }\n\n  /**\n   * Merge another summary into this one.\n   * @param anotherSummary anotherSummary\n   */\n  public merge(anotherSummary: AutoTranslateSummaryReport) {\n    if (!this._error) {\n      this._error = anotherSummary._error;\n    }\n    this._total += anotherSummary.total();\n    this._ignored += anotherSummary.ignored();\n    this._success += anotherSummary.success();\n    this._failed += anotherSummary.failed();\n  }\n\n  public total(): number {\n    return this._total;\n  }\n\n  public ignored(): number {\n    return this._ignored;\n  }\n\n  public success(): number {\n    return this._success;\n  }\n\n  public failed(): number {\n    return this._failed;\n  }\n\n  /**\n   * Human readable version of report\n   */\n  public content(): string {\n    let result;\n    if (this._error) {\n      result = format('Auto translation from \"%s\" to \"%s\" failed: \"%s\", failed units: %s', this._from, this._to, this._error, this._failed);\n    } else {\n      result = format('Auto translation from \"%s\" to \"%s\", total auto translated units: %s, ignored: %s, succesful: %s, failed: %s',\n          this._from, this._to, this._total, this._ignored, this._success, this._failed);\n    }\n    return result;\n  }\n}\n"]}