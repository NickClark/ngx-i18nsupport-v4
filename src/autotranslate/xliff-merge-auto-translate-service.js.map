{"version":3,"file":"xliff-merge-auto-translate-service.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/autotranslate/xliff-merge-auto-translate-service.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNullOrUndefined} from '../common/util';\nimport {Observable, forkJoin, of} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport * as entityDecoderLib from 'he';\nimport {\n    IICUMessage, IICUMessageTranslation, INormalizedMessage, ITranslationMessagesFile, ITransUnit,\n    STATE_NEW\n} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {AutoTranslateService} from './auto-translate-service';\nimport {AutoTranslateResult} from './auto-translate-result';\nimport {AutoTranslateSummaryReport} from './auto-translate-summary-report';\n/**\n * Created by martin on 07.07.2017.\n * Service to autotranslate Transunits via Google Translate.\n */\n\nexport class XliffMergeAutoTranslateService {\n\n    private autoTranslateService: AutoTranslateService;\n\n    constructor(apikey: string) {\n        this.autoTranslateService = new AutoTranslateService(apikey);\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    public autoTranslate(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        return forkJoin([\n            this.doAutoTranslateNonICUMessages(from, to, languageSpecificMessagesFile),\n            ...this.doAutoTranslateICUMessages(from, to, languageSpecificMessagesFile)])\n            .pipe(\n                map((summaries: AutoTranslateSummaryReport[]) => {\n                    const summary = summaries[0];\n                    for (let i = 1; i < summaries.length; i++) {\n                        summary.merge(summaries[i]);\n                    }\n                    return summary;\n        }));\n    }\n\n    /**\n     * Collect all units that are untranslated.\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return all untranslated units\n     */\n    private allUntranslatedTUs(languageSpecificMessagesFile: ITranslationMessagesFile): ITransUnit[] {\n        // collect all units, that should be auto translated\n        const allUntranslated: ITransUnit[] = [];\n        languageSpecificMessagesFile.forEachTransUnit((tu) => {\n            if (tu.targetState() === STATE_NEW) {\n                allUntranslated.push(tu);\n            }\n        });\n        return allUntranslated;\n    }\n\n    private doAutoTranslateNonICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatable = allUntranslated.filter((tu) => isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        const allMessages: string[] = allTranslatable.map((tu) => {\n            return tu.sourceContentNormalized().asDisplayString();\n        });\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                const summary = new AutoTranslateSummaryReport(from, to);\n                summary.setIgnored(allUntranslated.length - allTranslatable.length);\n                for (let i = 0; i < translations.length; i++) {\n                    const tu = allTranslatable[i];\n                    const translationText = translations[i];\n                    const result = this.autoTranslateNonICUUnit(tu, translationText);\n                    summary.addSingleResult(tu, result);\n                }\n                return summary;\n                }),\n                catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private doAutoTranslateICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport>[] {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatableICU = allUntranslated.filter((tu) => !isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        return allTranslatableICU.map((tu) => {\n            return this.doAutoTranslateICUMessage(from, to, tu);\n        });\n    }\n\n    /**\n     * Translate single ICU Messages.\n     * @param from from\n     * @param to to\n     * @param tu transunit to translate (must contain ICU Message)\n     * @return summary report\n     */\n    private doAutoTranslateICUMessage(from: string, to: string, tu: ITransUnit): Observable<AutoTranslateSummaryReport> {\n        const icuMessage: IICUMessage = tu.sourceContentNormalized().getICUMessage();\n        const categories = icuMessage.getCategories();\n        // check for nested ICUs, we do not support that\n        if (categories.find((category) => !isNullOrUndefined(category.getMessageNormalized().getICUMessage()))) {\n            const summary = new AutoTranslateSummaryReport(from, to);\n            summary.setIgnored(1);\n            return of(summary);\n        }\n        const allMessages: string[] = categories.map((category) => category.getMessageNormalized().asDisplayString());\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                    const summary = new AutoTranslateSummaryReport(from, to);\n                    const icuTranslation: IICUMessageTranslation = {};\n                    for (let i = 0; i < translations.length; i++) {\n                        icuTranslation[categories[i].getCategory()] = translations[i];\n                    }\n                    const result = this.autoTranslateICUUnit(tu, icuTranslation);\n                    summary.addSingleResult(tu, result);\n                    return summary;\n                }), catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private autoTranslateNonICUUnit(tu: ITransUnit, translatedMessage: string): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translate(translatedMessage));\n    }\n\n    private autoTranslateICUUnit(tu: ITransUnit, translation: IICUMessageTranslation): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translateICUMessage(translation));\n    }\n\n    private autoTranslateUnit(tu: ITransUnit, translatedMessage: INormalizedMessage): AutoTranslateResult {\n        const errors = translatedMessage.validate();\n        const warnings = translatedMessage.validateWarnings();\n        if (!isNullOrUndefined(errors)) {\n            return new AutoTranslateResult(false, 'errors detected, not translated');\n        } else if (!isNullOrUndefined(warnings)) {\n            return new AutoTranslateResult(false, 'warnings detected, not translated');\n        } else {\n            tu.translate(translatedMessage);\n            return new AutoTranslateResult(true, null); // success\n        }\n    }\n}\n"]}