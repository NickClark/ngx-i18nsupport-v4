{"version":3,"file":"auto-translate-service.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/autotranslate/auto-translate-service.ts"],"names":[],"mappings":"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","sourcesContent":["import {format} from 'util';\nimport * as request from 'request';\nimport {Observable} from 'rxjs';\nimport {of, forkJoin, throwError} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * Created by roobm on 03.07.2017.\n * Low Level Service to call Google Translate.\n */\n\n/**\n * Types form google translate api.\n */\n\ninterface GetSupportedLanguagesRequest {\n    target: string; // The language to use to return localized, human readable names of supported\\nlanguages.\n}\n\ninterface LanguagesResource {\n    language: string; // code of the language\n    name: string; // human readable name (in target language)\n}\n\ninterface LanguagesListResponse {\n    languages: LanguagesResource[];\n}\n\ninterface TranslateTextRequest {\n    q: string[];  // The input texts to translate\n    target: string; // The language to use for translation of the input text\n    source: string; // The language of the source text\n    format?: string; // \"html\" (default) or \"text\"\n    model?: string; // see public documentation\n}\n\ninterface TranslationsResource {\n    detectedSourceLanguage?: string;\n    model?: string;\n    translatedText: string;\n}\n\ninterface TranslationsListResponse {\n    translations: TranslationsResource[];\n}\n\ninterface InternalRequestResponse {\n    response: request.RequestResponse;\n    body: any;\n}\n\nconst MAX_SEGMENTS = 128;\n\nexport class AutoTranslateService {\n\n    private _request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;\n    _rootUrl: string;\n    _apiKey: string;\n\n    /**\n     * Strip region code and convert to lower\n     * @param lang lang\n     * @return lang without region code and in lower case.\n     */\n    public static stripRegioncode(lang: string): string {\n        const langLower = lang.toLowerCase();\n        for (let i = 0; i < langLower.length; i++) {\n            const c = langLower.charAt(i);\n            if (c < 'a' || c > 'z') {\n                return langLower.substring(0, i);\n            }\n        }\n        return langLower;\n    }\n\n    constructor(apiKey: string) {\n        this._request = request;\n        this._apiKey = apiKey;\n        this._rootUrl = 'https://translation.googleapis.com/';\n    }\n\n    /**\n     * Change API key (just for tests).\n     * @param apikey apikey\n     */\n    public setApiKey(apikey: string) {\n        this._apiKey = apikey;\n    }\n\n    /**\n     * Translate an array of messages at once.\n     * @param messages the messages to be translated\n     * @param from source language code\n     * @param to target language code\n     * @return Observable with translated messages or error\n     */\n    public translateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        // empty array needs no translation and always works ... (#78)\n        if (messages.length === 0) {\n            return of([]);\n        }\n        if (!this._apiKey) {\n            return throwError('cannot autotranslate: no api key');\n        }\n        if (!from || !to) {\n            return throwError('cannot autotranslate: source and target language must be set');\n        }\n        from = AutoTranslateService.stripRegioncode(from);\n        to = AutoTranslateService.stripRegioncode(to);\n        const allRequests: Observable<string[]>[] = this.splitMessagesToGoogleLimit(messages).map((partialMessages: string[]) => {\n            return this.limitedTranslateMultipleStrings(partialMessages, from, to);\n        });\n        return forkJoin(allRequests).pipe(\n            map((allTranslations: string[][]) => {\n                let all = [];\n                for (let i = 0; i < allTranslations.length; i++) {\n                    all = all.concat(allTranslations[i]);\n                }\n                return all;\n        }));\n    }\n\n    private splitMessagesToGoogleLimit(messages: string[]): string[][] {\n        if (messages.length <= MAX_SEGMENTS) {\n            return [messages];\n        }\n        const result = [];\n        let currentPackage = [];\n        let packageSize = 0;\n        for (let i = 0; i < messages.length; i++) {\n            currentPackage.push(messages[i]);\n            packageSize++;\n            if (packageSize >= MAX_SEGMENTS) {\n                result.push(currentPackage);\n                currentPackage = [];\n                packageSize = 0;\n            }\n        }\n        if (currentPackage.length > 0) {\n            result.push(currentPackage);\n        }\n        return result;\n    }\n\n    /**\n     * Return translation request, but messages must be limited to google limits.\n     * Not more that 128 single messages.\n     * @param messages messages\n     * @param from from\n     * @param to to\n     * @return the translated strings\n     */\n    private limitedTranslateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        const realUrl = this._rootUrl + 'language/translate/v2' + '?key=' + this._apiKey;\n        const translateRequest: TranslateTextRequest = {\n            q: messages,\n            target: to,\n            source: from,\n        };\n        const options = {\n            url: realUrl,\n            body: translateRequest,\n            json: true,\n//            proxy: 'http://127.0.0.1:8888' To set a proxy use env var HTTPS_PROXY\n        };\n        return this.post(realUrl, options).pipe(\n            map((data) => {\n            const body: any = data.body;\n            if (!body) {\n                throw new Error('no result received');\n            }\n            if (body.error) {\n                if (body.error.code === 400) {\n                    if (body.error.message === 'Invalid Value') {\n                        throw new Error(format('Translation from \"%s\" to \"%s\" not supported', from, to));\n                    }\n                    throw new Error(format('Invalid request: %s', body.error.message));\n                } else {\n                    throw new Error(format('Error %s: %s', body.error.code, body.error.message));\n                }\n            }\n            const result = body.data;\n            return result.translations.map((translation: TranslationsResource) => {\n                return translation.translatedText;\n            });\n        }));\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     */\n    post(uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> this._call.apply(this, [].concat('post', <string> uri,\n            <request.CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method method\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     *\n     */\n    private _call(method: string, uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> Observable.create((observer) => {\n            // build params array\n            const params = [].concat(<string> uri, <request.CoreOptions> Object.assign({}, options || {}),\n                <RequestCallback>(error: any, response: request.RequestResponse, body: any) => {\n                    if (error) {\n                        return observer.error(error);\n                    }\n\n                    observer.next(<InternalRequestResponse> Object.assign({}, {\n                        response: <request.RequestResponse> response,\n                        body: <any> body\n                    }));\n                    observer.complete();\n                });\n\n            // _call request method\n            try {\n                this._request[<string> method].apply(\n                    <request.RequestAPI<request.Request,\n                    request.CoreOptions,\n                    request.RequiredUriUrl>> this._request,\n                    params);\n            } catch (error) {\n                observer.error(error);\n            }\n        });\n    }\n}\n"]}