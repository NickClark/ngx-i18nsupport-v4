{"version":3,"file":"xlf12-merge.spec.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/xlf12-merge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport {XliffMerge} from './xliff-merge';\nimport {IConfigFile} from './i-xliff-merge-options';\nimport {CommandOutput} from '../common/command-output';\nimport {WriterToString} from '../common/writer-to-string';\nimport {FileUtil} from '../common/file-util';\nimport {ITranslationMessagesFile, ITransUnit, STATE_FINAL, STATE_NEW, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\nimport {format} from 'util';\nimport {getApiKey} from '../autotranslate/auto-translate-service.spec';\nimport {XmlReader} from './xml-reader';\n\n/**\n * Created by martin on 18.02.2017.\n * Testcases for XliffMerge Format XLIFF 1.2.\n */\n\ndescribe('XliffMerge XLIFF 1.2 format tests', () => {\n\n    /**\n     * Workdir, not in git.\n     * Cleaned up for every test.\n     * Tests, that work on files, copy everything they need into this directory.\n     */\n    const WORKDIR = 'test/work/';\n    const SRCDIR = 'test/testdata/i18n/';\n\n    const ENCODING = 'UTF-8';\n\n    /**\n     * Helper function to read Xliff from File\n     */\n    function readXliff(path: string): ITranslationMessagesFile {\n        if (!path) {\n            throw new Error('oops, no file');\n        }\n        try {\n            return TranslationMessagesFileReader.fromFile('xlf', path, ENCODING);\n        } catch (err) {\n            console.log(format('error reading %s: \"%s\"', path, err.message));\n            return null;\n        }\n    }\n\n    describe('Merge process checks for format xlf', () => {\n        const MASTER1FILE = 'ngExtractedMaster1.xlf';\n        const MASTER2FILE = 'ngExtractedMaster2.xlf';\n        const MASTER1SRC = SRCDIR + MASTER1FILE;\n        const MASTER2SRC = SRCDIR + MASTER2FILE;\n        const MASTERFILE = 'messages.xlf';\n        const MASTER = WORKDIR + MASTERFILE;\n\n        const ID_TRANSLATED_SCHLIESSEN = '1ead0ad1063d0c9e005fe56c9529aef4c1ef9d21'; // an ID from ngExtractedMaster1.xlf\n        const ID_REMOVED_STARTSEITE = 'c536247d71822c272f8e9155f831e0efb5aa0d31'; // an ID that will be removed in master2\n        const ID_REMOVED_SUCHEN = 'd17aee1ddf9fe1c0afe8440e02ef5ab906a69699'; // another removed ID\n        const ID_WITH_PLACEHOLDER = 'af0819ea4a5db68737ebcabde2f5e432b66352e8';\n        const ID_MISSING_SOURCEREF = '57e605bfa130afb4de4ee40e496e854a9e8a28a7';\n        const ID_DESCRIPTION_CHANGE = 'DescriptionAndMeaning1';\n        const ID_DESCRIPTION_ADD = 'AddDescriptionAndMeaning';\n        const ID_DESCRIPTION_REMOVE = 'RemoveDescriptionAndMeaning';\n\n        beforeEach(() => {\n            if (!fs.existsSync(WORKDIR)) {\n                fs.mkdirSync(WORKDIR);\n            }\n            // cleanup workdir\n            FileUtil.deleteFolderContentRecursive(WORKDIR);\n        });\n\n        it('should fix source language, if the masters lang is not the default', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const master: ITranslationMessagesFile = readXliff(MASTER);\n            expect(master.sourceLanguage()).toBe('en'); // master is german, but ng-18n extracts it as en\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('master says to have source-language=\"en\"');\n            expect(ws.writtenData()).toContain('changed master source-language=\"en\" to \"de\"');\n            const newmaster: ITranslationMessagesFile = readXliff(MASTER);\n            expect(newmaster.sourceLanguage()).toBe('de'); // master is german\n            done();\n        });\n\n        it('should generate translated file for default language de from master', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    useSourceAsTarget: false\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFile: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            expect(langFile.sourceLanguage()).toBe('de');\n            expect(langFile.targetLanguage()).toBe('de');\n            langFile.forEachTransUnit((tu: ITransUnit) => {\n               expect(tu.targetContent()).toBe(tu.sourceContent());\n               expect(tu.targetState()).toBe('final');\n            });\n            done();\n        });\n\n        it('should generate translated file for all languages', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFileGerman: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            expect(langFileGerman.sourceLanguage()).toBe('de');\n            expect(langFileGerman.targetLanguage()).toBe('de');\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\n                expect(tu.targetContent()).toBe(tu.sourceContent());\n                expect(tu.targetState()).toBe('final');\n            });\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\n            expect(langFileEnglish.targetLanguage()).toBe('en');\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\n                expect(tu.targetContent()).toBe(tu.sourceContent());\n                expect(tu.targetState()).toBe('new');\n            });\n            done();\n        });\n\n        it('should generate translated file for all languages with empty targets for non default languages', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    useSourceAsTarget: false\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFileGerman: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            expect(langFileGerman.sourceLanguage()).toBe('de');\n            expect(langFileGerman.targetLanguage()).toBe('de');\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\n                expect(tu.targetContent()).toBe(tu.sourceContent());\n                expect(tu.targetState()).toBe('final');\n            });\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\n            expect(langFileEnglish.targetLanguage()).toBe('en');\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\n                expect(tu.targetContent()).toBe('');\n                expect(tu.targetState()).toBe('new');\n            });\n            done();\n        });\n\n        it('should generate translated file for all languages with set praefix and suffix (#70)', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    targetPraefix: '%%',\n                    targetSuffix: '!!',\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFileGerman: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            expect(langFileGerman.sourceLanguage()).toBe('de');\n            expect(langFileGerman.targetLanguage()).toBe('de');\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\n                if (!tu.targetContent().startsWith('{VAR')) {\n                    expect(tu.targetContent()).toBe('%%' + tu.sourceContent() + '!!');\n                } else {\n                    expect(tu.targetContent()).toBe(tu.sourceContent());\n                }\n                expect(tu.targetState()).toBe('final');\n            });\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\n            expect(langFileEnglish.targetLanguage()).toBe('en');\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\n                if (!tu.targetContent().startsWith('{VAR')) {\n                    expect(tu.targetContent()).toBe('%%' + tu.sourceContent() + '!!');\n                } else {\n                    expect(tu.targetContent()).toBe(tu.sourceContent());\n                }\n                expect(tu.targetState()).toBe('new');\n            });\n            done();\n        });\n\n        it('should merge translated file for all languages', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            let ws: WriterToString = new WriterToString();\n            let commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // now translate some texts in the English version\n            let langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_TRANSLATED_SCHLIESSEN);\n            expect(tu).toBeTruthy();\n            tu.translate('Close');\n            TranslationMessagesFileReader.save(langFileEnglish);\n\n            // next step, use another master\n            FileUtil.copy(MASTER2SRC, MASTER);\n            ws = new WriterToString();\n            commandOut = new CommandOutput(ws);\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('merged 12 trans-units from master to \"en\"');\n            expect(ws.writtenData()).toContain('removed 5 unused trans-units in \"en\"');\n\n            // look, that the new file contains the old translation\n            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.transUnitWithId(ID_TRANSLATED_SCHLIESSEN).targetContent()).toBe('Close');\n\n            // look, that the removed IDs are really removed.\n\n            expect(langFileEnglish.transUnitWithId(ID_REMOVED_STARTSEITE)).toBeFalsy();\n            expect(langFileEnglish.transUnitWithId(ID_REMOVED_SUCHEN)).toBeFalsy();\n            done();\n        });\n\n        it('should merge changed source content with explicit ID to default language file (#81)', (done) => {\n            const ID_SOURCE_CHANGE = 'sourcechanged';\n            const ID_SOURCE_CHANGE_STATE_FINAL = 'sourcechanged_state_final';\n            const TRANSLATED_FILE = 'WithSourceContentChange.de.xlf';\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithSourceContentChange.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.de.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: transferred 2 changed source content from master to \"de\"');\n\n            // check that source is changed\n            const langFileGerman: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            const tu: ITransUnit = langFileGerman.transUnitWithId(ID_SOURCE_CHANGE);\n            expect(tu).toBeTruthy();\n            expect(tu.sourceContent()).toBe('Test Änderung Source (geändert!)');\n            expect(tu.targetContent()).toBe('Test Änderung Source (geändert!)');\n            expect(tu.targetState()).toBe(STATE_FINAL);\n            done();\n        });\n\n        it('should merge changed source content to already translated files', (done) => {\n            const ID_SOURCE_CHANGE = 'sourcechanged';\n            const ID_SOURCE_CHANGE_STATE_FINAL = 'sourcechanged_state_final';\n            const TRANSLATED_FILE = 'WithSourceContentChange.en.xlf';\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithSourceContentChange.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: transferred 2 changed source content from master to \"en\"');\n\n            // check that source is changed\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE);\n            expect(tu).toBeTruthy();\n            expect(tu.sourceContent()).toBe('Test Änderung Source (geändert!)');\n            expect(tu.targetState()).toBe(STATE_NEW);\n            const tuFinal: ITransUnit = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE_STATE_FINAL);\n            expect(tuFinal).toBeTruthy();\n            expect(tuFinal.sourceContent()).toBe('Test Änderung Source (state final, geändert!)');\n            expect(tuFinal.targetState()).toBe(STATE_TRANSLATED);\n            done();\n        });\n\n        it('should merge missing source refs to already translated files', (done) => {\n            const MISSING_SOURCEREF_FILE = 'missingSourcerefs.en.xlf';\n            FileUtil.copy(MASTER1SRC, MASTER);\n            FileUtil.copy(SRCDIR + MISSING_SOURCEREF_FILE, WORKDIR + 'messages.en.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: transferred 2 source references');\n\n            // check that there is a translated english version with missing sourcerefs\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_MISSING_SOURCEREF);\n            expect(tu).toBeTruthy();\n            expect(tu.targetContent()).toBe('News');\n            expect(tu.sourceReferences().length).toBe(2);\n            done();\n        });\n\n        it('should merge changed descriptions and meanings to already translated files', (done) => {\n            const TRANSLATED_FILE = 'WithDescriptions.en.xlf';\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithDescriptions.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: transferred 3 changed descriptions/meanings from master to \"en\"');\n\n            // check that description and meaning are changed\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_CHANGE);\n            expect(tu).toBeTruthy();\n            expect(tu.description()).toBe('changed description');\n            expect(tu.meaning()).toBe('changed meaning');\n            // added description\n            const tuAdded: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_ADD);\n            expect(tuAdded).toBeTruthy();\n            expect(tuAdded.description()).toBe('added description');\n            expect(tuAdded.meaning()).toBe('added meaning');\n            // removed description\n            const tuRemoved: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_REMOVE);\n            expect(tuRemoved).toBeTruthy();\n            expect(tuRemoved.description()).toBeNull();\n            expect(tuRemoved.meaning()).toBeNull();\n            done();\n        });\n\n        it('should preserve order when merging new units (#96)', (done) => {\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster1.xlf', MASTER);\n            let ws: WriterToString = new WriterToString();\n            let commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'en',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // next step, use new master that has added 3 units\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster2.xlf', MASTER);\n            ws = new WriterToString();\n            commandOut = new CommandOutput(ws);\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('merged 3 trans-units from master to \"de\"');\n\n            // look, that the new file contains the new units at the correct position\n            const langFileGerman = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            const addedTu = langFileGerman.transUnitWithId('addedunit1');\n            expect(addedTu).toBeTruthy();\n            expect(addedTu.sourceContent()).toBe('added unit 1');\n            // check position\n            expect(langFileGerman.editedContent().replace(/(\\r\\n|\\n|\\r)/gm, ''))\n                .toMatch(/addedunit1.*firstunit.*addedunit2.*lastunit.*addedunit3/);\n            done();\n        });\n\n        it('should not preserve order when merging new units when disabled via config (#108)', (done) => {\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster1.xlf', MASTER);\n            let ws: WriterToString = new WriterToString();\n            let commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'en',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    preserveOrder: false\n                }\n            };\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // next step, use new master that has added 3 units\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster2.xlf', MASTER);\n            ws = new WriterToString();\n            commandOut = new CommandOutput(ws);\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('merged 3 trans-units from master to \"de\"');\n\n            // look, that the new file contains the new units at the correct position\n            const langFileGerman = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            const addedTu = langFileGerman.transUnitWithId('addedunit1');\n            expect(addedTu).toBeTruthy();\n            expect(addedTu.sourceContent()).toBe('added unit 1');\n            // check position, new units should be at end!\n            expect(langFileGerman.editedContent().replace(/(\\r\\n|\\n|\\r)/gm, ''))\n                .toMatch(/firstunit.*lastunit.*addedunit1.*addedunit2.*addedunit3/);\n            done();\n        });\n\n        it('should not remove trailing line break when merging', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const masterContent = FileUtil.read(MASTER, XmlReader.DEFAULT_ENCODING);\n            expect(masterContent.endsWith('\\n')).toBeTruthy('master file should end with EOL');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const newContent = FileUtil.read(xliffMergeCmd.generatedI18nFile('de'), XmlReader.DEFAULT_ENCODING);\n            expect(newContent.endsWith('\\n')).toBeTruthy('file should end with EOL');\n            done();\n        });\n\n        it('should translate messages with placeholder', (done) => {\n            FileUtil.copy(MASTER2SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // now translate some texts in the English version\n            let langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER);\n            expect(tu).toBeTruthy();\n            tu.translate('Item <x id=\"INTERPOLATION\"/> of <x id=\"INTERPOLATION_1\"/> added.');\n            TranslationMessagesFileReader.save(langFileEnglish);\n\n            // look, that the new file contains the translation\n            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContent())\n                .toBe('Item <x id=\"INTERPOLATION\"/> of <x id=\"INTERPOLATION_1\"/> added.');\n            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContentNormalized().asDisplayString())\n                .toBe('Item {{0}} of {{1}} added.');\n\n            done();\n        });\n\n        it('should translate messages with 2 custom tags with different ids (#84)', (done) => {\n            const ID_2_CUSTOM_TAGS = '8856d298b6fa89a339475c5d5cd20f2d2afcfbf7';\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // now translate some texts in the English version\n            let langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_2_CUSTOM_TAGS);\n            expect(tu).toBeTruthy();\n            expect(tu.sourceContentNormalized().asDisplayString())\n                .toBe('Neues <bs-activity-stream-element></bs-activity-stream-element> wurde gemeldet durch <bs-activity-stream-element id=\"1\"></bs-activity-stream-element>');\n            const translation = tu.sourceContentNormalized()\n                .translate('New <bs-activity-stream-element></bs-activity-stream-element> was reported by <bs-activity-stream-element id=\"1\"></bs-activity-stream-element>');\n            tu.translate(translation);\n            TranslationMessagesFileReader.save(langFileEnglish);\n\n            // look, that the new file contains the translation\n            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.transUnitWithId(ID_2_CUSTOM_TAGS).targetContent())\n                .toBe('New <x id=\"START_TAG_BS-ACTIVITY-STREAM-ELEMENT\" ctype=\"x-bs-activity-stream-element\" equiv-text=\"&lt;bs-activity-stream-element>\"/><x id=\"CLOSE_TAG_BS-ACTIVITY-STREAM-ELEMENT\" ctype=\"x-bs-activity-stream-element\"/> was reported by <x id=\"START_TAG_BS-ACTIVITY-STREAM-ELEMENT_1\" ctype=\"x-bs-activity-stream-element\" equiv-text=\"&lt;bs-activity-stream-element>\"/><x id=\"CLOSE_TAG_BS-ACTIVITY-STREAM-ELEMENT\" ctype=\"x-bs-activity-stream-element\"/>');\n            expect(langFileEnglish.transUnitWithId(ID_2_CUSTOM_TAGS).targetContentNormalized().asDisplayString())\n                .toBe('New <bs-activity-stream-element></bs-activity-stream-element> was reported by <bs-activity-stream-element id=\"1\"></bs-activity-stream-element>');\n\n            done();\n        });\n\n        it('should translate ICU message with placeholder (#83)', (done) => {\n            const ID_ICU_WITH_PLACEHOLDER = '8856d298b6fa89a339475c5d5cd20f2d2afcfbf8';\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            // now translate some texts in the English version\n            let langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_ICU_WITH_PLACEHOLDER);\n            expect(tu).toBeTruthy();\n            expect(tu.sourceContentNormalized().asDisplayString()).toBe('<ICU-Message/>');\n            const translation = tu.sourceContentNormalized()\n                .translateICUMessage({'=1': 'Crash <x id=\"INTERPOLATION\" equiv-text=\"{{ a }}\"/> was'});\n            tu.translate(translation);\n            TranslationMessagesFileReader.save(langFileEnglish);\n\n            // look, that the new file contains the translation\n            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            expect(langFileEnglish.transUnitWithId(ID_ICU_WITH_PLACEHOLDER).targetContentNormalized().asDisplayString())\n                .toBe('<ICU-Message/>');\n            expect(langFileEnglish.transUnitWithId(ID_ICU_WITH_PLACEHOLDER).targetContentNormalized().getICUMessage().asNativeString())\n                .toContain('Crash');\n\n            done();\n        });\n\n        it('allowIdChange feature should merge only white space changed content with changed ID' +\n            ' to already translated files (#65)', (done) => {\n            const ID_ORIGINAL = 'originalId';\n            const ID_CHANGED = 'changedId';\n            const TRANSLATED_FILE = 'WithIdChange.en.xlf';\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithIdChange.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    allowIdChange: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: found 2 changed id\\'s in \"en\"');\n\n            // check that changed id is merged\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tuChanged: ITransUnit = langFileEnglish.transUnitWithId(ID_CHANGED);\n            expect(tuChanged).toBeTruthy();\n            expect(tuChanged.sourceContent().trim()).toBe('Test kleine Änderung, nur white spaces!');\n            expect(tuChanged.targetState()).toBe(STATE_TRANSLATED);\n            expect(tuChanged.targetContent()).toBe('Test for a small white space change');\n            const tuOriginal: ITransUnit = langFileEnglish.transUnitWithId(ID_ORIGINAL);\n            expect(tuOriginal).toBeFalsy();\n            done();\n        });\n\n        it('allowIdChange feature, should merge untranslated only white space changed content with changed ID, ' +\n            'but should set preserve state \"new\" (#68)', (done) => {\n            const ID_ORIGINAL = 'originalIdUntranslated';\n            const ID_CHANGED = 'changedIdUntranslated';\n            const TRANSLATED_FILE = 'WithIdChange.en.xlf';\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithIdChange.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    allowIdChange: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: found 2 changed id\\'s in \"en\"');\n\n            // check that changed id is merged\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tuChanged: ITransUnit = langFileEnglish.transUnitWithId(ID_CHANGED);\n            expect(tuChanged).toBeTruthy();\n            expect(tuChanged.sourceContent().trim()).toBe('Unübersetzt');\n            expect(tuChanged.targetState()).toBe(STATE_NEW);\n            expect(tuChanged.targetContent()).toBe(''); // not translated\n            const tuOriginal: ITransUnit = langFileEnglish.transUnitWithId(ID_ORIGINAL);\n            expect(tuOriginal).toBeFalsy();\n            done();\n        });\n\n        it('allowIdChange feature with added ICU message (#138)', (done) => {\n            const ID_OLD_ICU = 'oldicu';\n            const ID_OLD_ICUREF = 'oldicuref';\n            const ID_CHANGED_ICU = 'changedicu';\n            const ID_CHANGED_ICUREF = 'changedicuref';\n            const ID_ADDDED_ICU = 'newicu';\n            const ID_ADDDED_ICUREF = 'newicuref';\n            const TRANSLATED_FILE = 'issue138IdChangeICU.de.xlf';\n            FileUtil.copy(SRCDIR + 'issue138IdChangeICUMaster.xlf', MASTER);\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.de.xlf');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'en',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    allowIdChange: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            expect(ws.writtenData()).toContain('WARNING: merged 2 trans-units from master to \"de\"');\n            expect(ws.writtenData()).toContain('WARNING: found 2 changed id\\'s in \"de\"');\n            expect(ws.writtenData()).toContain('WARNING: removed 2 unused trans-units in \"de\"');\n\n            // check that added ids are merged\n            const langFileGerman: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            FileUtil.copy(xliffMergeCmd.generatedI18nFile('de'), 'test/' + 'issue138.de.xlf'); // TODO delete this line\n            expect(langFileGerman.numberOfTransUnits()).toBe(6);\n\n            const tuOldIcuRef: ITransUnit = langFileGerman.transUnitWithId(ID_OLD_ICUREF);\n            expect(tuOldIcuRef).toBeTruthy();\n            const tuOldIcu: ITransUnit = langFileGerman.transUnitWithId(ID_OLD_ICU);\n            expect(tuOldIcu).toBeTruthy();\n\n            expect(tuOldIcuRef.targetContent()).toContain('<x id=\"ICU\" equiv-text=\"{ fruit, select, Windstorm {...}');\n            expect(tuOldIcuRef.targetState()).toBe(STATE_TRANSLATED);\n\n            expect(tuOldIcu.sourceContent()).toContain('Windstorm {Windstorm}');\n            expect(tuOldIcu.targetContent()).toContain('Windstorm {Stürmer}');\n            expect(tuOldIcu.targetState()).toBe(STATE_TRANSLATED);\n\n            const tuChangedIcuRef: ITransUnit = langFileGerman.transUnitWithId(ID_CHANGED_ICUREF);\n            expect(tuChangedIcuRef).toBeTruthy();\n            const tuChangedIcu: ITransUnit = langFileGerman.transUnitWithId(ID_CHANGED_ICU);\n            expect(tuChangedIcu).toBeTruthy();\n\n            expect(tuChangedIcuRef.targetContent()).toContain('<x id=\"ICU\" equiv-text=\"{ choice, select, A {...}');\n            expect(tuChangedIcuRef.targetState()).toBe(STATE_TRANSLATED);\n\n            expect(tuChangedIcu.sourceContent()).toContain('A {A}');\n            expect(tuChangedIcu.targetContent()).toContain('A {A1}');\n            expect(tuChangedIcu.targetState()).toBe(STATE_TRANSLATED);\n\n            const tuAddedIcuRef: ITransUnit = langFileGerman.transUnitWithId(ID_ADDDED_ICUREF);\n            expect(tuAddedIcuRef).toBeTruthy();\n            const tuAddedIcu: ITransUnit = langFileGerman.transUnitWithId(ID_ADDDED_ICU);\n            expect(tuAddedIcu).toBeTruthy();\n\n            expect(tuAddedIcuRef.targetContent()).toContain('<x id=\"ICU\" equiv-text=\"{ fruit, select, Apple {...}');\n            expect(tuAddedIcuRef.targetState()).toBe(STATE_NEW);\n\n            expect(tuAddedIcu.sourceContent()).toContain('Apple {Apple}');\n            expect(tuAddedIcu.targetContent()).toBe(tuAddedIcu.sourceContent());\n            expect(tuAddedIcu.targetState()).toBe(STATE_NEW);\n            done();\n        });\n\n        it('should report an error with filename when there is something wrong', (done) => {\n            FileUtil.copy(SRCDIR + 'schrott.xlf', MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            // we activate ngxtranslate support, so that the wrong close tag in schrott produces an error\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            try {\n                xliffMergeCmd.run();\n            } catch (e) {}\n            expect(ws.writtenData()).toContain('ERROR');\n            expect(ws.writtenData()).toContain('messages.de.xlf');\n            done();\n        });\n\n        it('should use beautify when requested (#64, #88)', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            let ws: WriterToString = new WriterToString();\n            let commandOut = new CommandOutput(ws);\n            let profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            const unformattedContent = XmlReader.readXmlFileContent(xliffMergeCmd.generatedI18nFile('en'));\n            expect(unformattedContent.content).toContain('<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">');\n// to debug formatting:                        FileUtil.copy(xliffMergeCmd.generatedI18nFile('en'), SRCDIR + 'nobeautify');\n\n            // next step, same with beautify\n            FileUtil.deleteFile(xliffMergeCmd.generatedI18nFile('en'));\n            ws = new WriterToString();\n            commandOut = new CommandOutput(ws);\n            profileContent = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    beautifyOutput: true\n                }\n            };\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const formattedContent = XmlReader.readXmlFileContent(xliffMergeCmd.generatedI18nFile('en'));\n            expect(formattedContent.content).toContain('\\n        <source>Nachrichten</source>');\n// to debug formatting:            FileUtil.copy(xliffMergeCmd.generatedI18nFile('en'), SRCDIR + 'beautify');\n            done();\n        });\n\n        it('should not add empty lines when using beautify whith complex content (#97)', (done) => {\n            FileUtil.copy(SRCDIR + 'issue97emptylines.xlf', MASTER);\n            let ws: WriterToString = new WriterToString();\n            let commandOut = new CommandOutput(ws);\n            let profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'en',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    beautifyOutput: true\n                }\n            };\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'ru']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n\n            const formattedContent1 = XmlReader.readXmlFileContent(xliffMergeCmd.generatedI18nFile('ru'));\n// to debug formatting: FileUtil.copy(xliffMergeCmd.generatedI18nFile('ru'), SRCDIR + 'beautify1');\n\n            // next step, once again with beautify\n            ws = new WriterToString();\n            commandOut = new CommandOutput(ws);\n            profileContent = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'en',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    beautifyOutput: true\n                }\n            };\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'ru']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const formattedContent2 = XmlReader.readXmlFileContent(xliffMergeCmd.generatedI18nFile('ru'));\n            expect(formattedContent2.content).toMatch(/I accept the\\r?\\n[ \\t]*<x/);\n            expect(formattedContent2.content).not.toMatch(/I accept the\\r?\\n[ \\t]*\\r?\\n[ \\t]*<x/);\n// to debug formatting: FileUtil.copy(xliffMergeCmd.generatedI18nFile('ru'), SRCDIR + 'beautify2');\n            done();\n        });\n\n        it('should not change translation state when source is unchanged but has different line ending (#128)', (done) => {\n            FileUtil.copy(SRCDIR + 'issue128master.xlf', MASTER);\n            const langfileName = WORKDIR + 'messages.en.xlf';\n            FileUtil.copy(SRCDIR + 'issue128translated.xlf', langfileName);\n            const originalContent = FileUtil.read(langfileName, 'UTF-8');\n            const contentWithoutCRLF = originalContent.replace(/[\\n\\r]/g, '');\n            expect(originalContent).not.toBe(contentWithoutCRLF);\n            FileUtil.replaceContent(langfileName, contentWithoutCRLF, 'UTF-8');\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    beautifyOutput: false\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n            const tu: ITransUnit = langFileEnglish.transUnitWithId('issue128');\n            expect(tu.targetState()).toBe(STATE_FINAL);\n            done();\n        });\n\n        describe('autotranslate via google translate', () => {\n\n            let apikey: string;\n\n            const ID_NACHRICHTEN = '57e605bfa130afb4de4ee40e496e854a9e8a28a7';\n            const ID_BESCHREIBUNG_WITH_PLACEHOLDER = 'a52ba049c16778bdb2e5a19a41acaadf87b104dc';\n            const ID_ICUMESSAGE = 'efec69fdcf74bd6d640b2a771558b7b09e271c28';\n\n            beforeEach(() => {\n                apikey = getApiKey();\n            });\n\n            it('should detect invalid key', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(MASTER1SRC, MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'de',\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: 'lmaa'\n                    }\n                };\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n                xliffMergeCmd.run((retcode) => {\n                    expect(ws.writtenData()).toContain('API key not valid');\n                    done();\n                });\n            });\n\n            it('should auto translate file', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(MASTER1SRC, MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'de',\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: apikey\n                    }\n                };\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n                xliffMergeCmd.run(() => {\n                    expect(ws.writtenData()).not.toContain('ERROR');\n                    const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n                    expect(langFileEnglish.targetLanguage()).toBe('en');\n                    const tu = langFileEnglish.transUnitWithId(ID_NACHRICHTEN);\n                    expect(tu.sourceContent()).toBe('Nachrichten');\n                    expect(tu.targetContent()).toBe('news');\n                    expect(tu.targetState()).toBe('translated');\n                    const tuICU = langFileEnglish.transUnitWithId(ID_ICUMESSAGE);\n                    expect(tuICU.sourceContent()).toContain('VAR_PLURAL');\n                    expect(tuICU.targetContent()).toBe('{VAR_PLURAL, plural, =0 {no sheep} =1 {1 sheep} other {x sheep}}');\n                    expect(tuICU.targetState()).toBe('translated');\n                    done();\n                });\n            });\n\n            it('should auto translate file with region code (which will be ignored)', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(MASTER1SRC, MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'de-de',\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: apikey\n                    }\n                };\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de-de', 'en-us']}, profileContent);\n                xliffMergeCmd.run((retcode) => {\n                    expect(ws.writtenData()).not.toContain('ERROR');\n                    const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en-us'));\n                    expect(langFileEnglish).toBeTruthy();\n                    if (langFileEnglish) {\n                        expect(langFileEnglish.targetLanguage()).toBe('en-us');\n                        const tu = langFileEnglish.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);\n                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');\n                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Description of {{0}} ({{1}})');\n                        expect(tu.targetState()).toBe('translated');\n                    }\n                    done();\n                });\n            });\n\n            it('should detect unsupported language when using auto translate', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(MASTER1SRC, MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'de',\n                        languages: ['de', 'xy', 'en'],\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: apikey\n                    }\n                };\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\n                xliffMergeCmd.run((retcode) => {\n                    expect(ws.writtenData()).toContain('ERROR');\n                    expect(ws.writtenData()).toContain('\"xy\" not supported');\n                    const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n                    expect(langFileEnglish).toBeTruthy();\n                    if (langFileEnglish) {\n                        expect(langFileEnglish.targetLanguage()).toBe('en');\n                        const tu = langFileEnglish.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);\n                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');\n                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Description of {{0}} ({{1}})');\n                        expect(tu.targetState()).toBe('translated');\n                    }\n                    const langFileXy: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('xy'));\n                    expect(langFileXy).toBeTruthy();\n                    if (langFileXy) {\n                        expect(langFileXy.targetLanguage()).toBe('xy');\n                        const tu = langFileXy.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);\n                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');\n                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');\n                        expect(tu.targetState()).toBe('new');\n                    }\n                    done();\n                });\n            });\n\n            it('should auto translate text containing linefeeds (originated by #78)', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(SRCDIR + 'autotranslateMaster1.xlf', MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'de',\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: apikey\n                    }\n                };\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\n                xliffMergeCmd.run(() => {\n                    expect(ws.writtenData()).not.toContain('ERROR');\n                    const langFileEnglish: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('en'));\n                    const tu1 = langFileEnglish.transUnitWithId('totallyEmptyline1');\n                    expect(tu1.sourceContent().trim()).toBe('');\n                    expect(tu1.targetContent()).toBe('');\n                    expect(tu1.targetState()).toBe('translated');\n                    const tu2 = langFileEnglish.transUnitWithId('nearlytotallyEmptyline');\n                    expect(tu2.sourceContent()).toContain('START_BOLD_TEXT');\n                    // translation is nearly equal to source, because there is no translatable text\n                    expect(tu2.targetContent().trim()).toEqual(tu2.sourceContent().trim());\n                    expect(tu2.targetState()).toBe('translated');\n                    const tu3 = langFileEnglish.transUnitWithId('emptylineText');\n                    expect(tu3.sourceContent()).toContain('Text mit Zeilenumbruch');\n                    expect(tu3.targetContent()).toBe('Text with line break');\n                    expect(tu3.targetState()).toBe('translated');\n                    done();\n                });\n            });\n\n            it('should auto translate english text to french containing apostrophes (originated by #94)', (done) => {\n                if (!apikey) {\n                    // skip test\n                    done();\n                    return;\n                }\n                FileUtil.copy(SRCDIR + 'englishToFrench.xlf', MASTER);\n                const ws: WriterToString = new WriterToString();\n                const commandOut = new CommandOutput(ws);\n                const profileContent: IConfigFile = {\n                    xliffmergeOptions: {\n                        defaultLanguage: 'en',\n                        srcDir: WORKDIR,\n                        genDir: WORKDIR,\n                        i18nFile: MASTERFILE,\n                        autotranslate: true,\n                        apikey: apikey\n                    }\n                };\n                const ID_OPERATOR_LOG = '50614ab096d22b3796a4891f21ab7e38b527b72b';\n                const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'fr']}, profileContent);\n                    xliffMergeCmd.run((retcode) => {\n                        expect(ws.writtenData()).not.toContain('ERROR');\n                        const langFileFrench: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('fr'));\n                        const tu1 = langFileFrench.transUnitWithId(ID_OPERATOR_LOG);\n                        expect(tu1).toBeTruthy();\n                        expect(tu1.sourceContent().trim()).toBe('Operator Logs');\n                        expect(tu1.targetContent()).toBe('Journaux d\\'opérateur');\n                        expect(tu1.targetState()).toBe('translated');\n                        done();\n                    });\n            });\n\n        });\n    });\n\n    describe('ngx-translate processing for format xlf', () => {\n\n        const MASTER1FILE = 'ngxtranslate.xlf';\n        const MASTER1SRC = SRCDIR + MASTER1FILE;\n        const MASTER_WITHOUT_NGX_TRANSLATE_STUFF = SRCDIR + 'ngExtractedMaster1.xlf';\n        const MASTERFILE = 'messages.xlf';\n        const MASTER = WORKDIR + MASTERFILE;\n\n        const ID_NODESC_NOMEANING = 'a8f10794864e49b16224b22faaf4a86229b6c53d'; // an ID without set meaning and description\n        const ID_MONDAY = '84e8cd8ba480129d90f512cc3462bb43efcf389f'; // an ID from ngxtranslate.xlf with meaning \"x.y\"\n                                                                        // and description \"ngx-translate\"\n\n        beforeEach(() => {\n            if (!fs.existsSync(WORKDIR)) {\n                fs.mkdirSync(WORKDIR);\n            }\n            // cleanup workdir\n            FileUtil.deleteFolderContentRecursive(WORKDIR);\n        });\n\n        it('should return null for unset description and meaning in master  xlf file', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const master: ITranslationMessagesFile = readXliff(MASTER);\n            expect(master.transUnitWithId(ID_NODESC_NOMEANING).description()).toBeFalsy();\n            expect(master.transUnitWithId(ID_NODESC_NOMEANING).meaning()).toBeFalsy();\n            done();\n        });\n\n        it('should find description and meaning in master  xlf file', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const master: ITranslationMessagesFile = readXliff(MASTER);\n            expect(master.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');\n            expect(master.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');\n            done();\n        });\n\n        it('should find description and meaning in translated xlf file', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const langFile: ITranslationMessagesFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));\n            expect(langFile.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');\n            expect(langFile.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');\n            done();\n        });\n\n        it('should write translation json file for ngx-translate', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\n            const translation: any = JSON.parse(fileContent);\n            expect(translation).toBeTruthy();\n            expect(translation.myapp).toBeTruthy();\n            expect(translation.dateservice.monday).toBe('Montag');\n            expect(translation.dateservice.friday).toBe('Freitag');\n            expect(translation.explicitlysetids.test1).toBe('Explizit gesetzte ID');\n            done();\n        });\n\n        it('should handle placeholders in json file for ngx-translate', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\n            const translation: any = JSON.parse(fileContent);\n            expect(translation).toBeTruthy();\n            expect(translation.placeholders).toBeTruthy();\n            expect(translation.placeholders.test1placeholder).toBe('{{0}}: Eine Nachricht mit einem Platzhalter');\n            expect(translation.placeholders.test2placeholder).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{1}}');\n            expect(translation.placeholders.test2placeholderRepeated).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{0}} {{1}}');\n            done();\n        });\n\n        it('should handle embedded html markup in json file for ngx-translate', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\n            const translation: any = JSON.parse(fileContent);\n            expect(translation).toBeTruthy();\n            expect(translation.embeddedhtml).toBeTruthy();\n            expect(translation.embeddedhtml.bold).toBe('Diese Nachricht ist <b>WICHTIG</b>');\n            expect(translation.embeddedhtml.boldstrong).toBe('Diese Nachricht ist <b><strong>SEHR WICHTIG</strong></b>');\n            expect(translation.embeddedhtml.strange).toBe('Diese Nachricht ist <strange>{{0}}</strange>');\n            done();\n        });\n\n        it('should not write empty translation json file for ngx-translate, if there are no translation (issue #18)', (done) => {\n            FileUtil.copy(MASTER_WITHOUT_NGX_TRANSLATE_STUFF, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeFalsy();\n            done();\n        });\n\n        it('should not export @@ids to translation json file, when this is supressed in pattern (issue #62)', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true,\n                    ngxTranslateExtractionPattern: 'ngx-translate'\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\n            const translation: any = JSON.parse(fileContent);\n            expect(translation).toBeTruthy();\n            expect(translation.dateservice.monday).toBe('Montag');\n            expect(translation.explicitlysetids).toBeFalsy();\n            expect(translation['alt-ngx-translate']).toBeFalsy();\n            done();\n        });\n\n        it('should export other then ngx-translate description marked entries to translation json file,' +\n            'when this is specified in pattern (issue #62)', (done) => {\n            FileUtil.copy(MASTER1SRC, MASTER);\n            const ws: WriterToString = new WriterToString();\n            const commandOut = new CommandOutput(ws);\n            const profileContent: IConfigFile = {\n                xliffmergeOptions: {\n                    defaultLanguage: 'de',\n                    srcDir: WORKDIR,\n                    genDir: WORKDIR,\n                    i18nFile: MASTERFILE,\n                    supportNgxTranslate: true,\n                    ngxTranslateExtractionPattern: 'ngx-translate|alt-ngx-translate'\n                }\n            };\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\n            xliffMergeCmd.run();\n            expect(ws.writtenData()).not.toContain('ERROR');\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\n            const translation: any = JSON.parse(fileContent);\n            expect(translation).toBeTruthy();\n            expect(translation.dateservice.monday).toBe('Montag');\n            expect(translation.explicitlysetids).toBeFalsy();\n            expect(translation['alt-ngx-translate'].example1).toBe('Alternate description for ngx-translate export');\n            done();\n        });\n\n    });\n\n});\n"]}