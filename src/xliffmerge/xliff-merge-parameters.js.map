{"version":3,"file":"xliff-merge-parameters.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/xliff-merge-parameters.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by martin on 17.02.2017.\n * Collection of all parameters used by the tool.\n * The parameters are read form the profile or defaults are used.\n */\n\nimport * as fs from 'fs';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {Stats} from 'fs';\nimport {CommandOutput} from '../common/command-output';\nimport {format} from 'util';\nimport {isArray, isNullOrUndefined} from '../common/util';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {FileUtil} from '../common/file-util';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {dirname, isAbsolute, join, normalize} from 'path';\n\nconst PROFILE_CANDIDATES = ['package.json', '.angular-cli.json'];\n\nexport class XliffMergeParameters {\n\n    private usedProfilePath: string;\n    private _quiet: boolean;\n    private _verbose: boolean;\n    private _allowIdChange: boolean;\n    private _defaultLanguage: string;\n    private _srcDir: string;\n    private _i18nBaseFile: string;\n    private _i18nFile: string;\n    private _i18nFormat: string;\n    private _encoding: string;\n    private _genDir: string;\n    private _languages: string[];\n    private _removeUnusedIds: boolean;\n    private _supportNgxTranslate: boolean;\n    private _ngxTranslateExtractionPattern: string;\n    private _useSourceAsTarget: boolean;\n    private _targetPraefix: string;\n    private _targetSuffix: string;\n    private _beautifyOutput: boolean;\n    private _preserveOrder: boolean;\n    private _autotranslate: boolean|string[];\n    private _apikey: string;\n    private _apikeyfile: string;\n\n    public errorsFound: XliffMergeError[];\n    public warningsFound: string[];\n\n    /**\n     * Create Parameters.\n     * @param options command options\n     * @param profileContent given profile (if not, it is read from the profile path from options).\n     */\n    public static createFromOptions(options: ProgramOptions, profileContent?: IConfigFile) {\n        const parameters = new XliffMergeParameters();\n        parameters.configure(options, profileContent);\n        return parameters;\n    }\n\n    private constructor() {\n        this.errorsFound = [];\n        this.warningsFound = [];\n    }\n\n    /**\n     * Read potential profile.\n     * To be a candidate, file must exist and contain property \"xliffmergeOptions\".\n     * @param profilePath path of profile\n     * @return parsed content of file or null, if file does not exist or is not a profile candidate.\n     */\n    private static readProfileCandidate(profilePath: string): IConfigFile {\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            return null;\n        }\n        const parsedContent: IConfigFile = JSON.parse(content);\n        if (parsedContent && parsedContent.xliffmergeOptions) {\n            return parsedContent;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Initialize me from the profile content.\n     * (public only for test usage).\n     * @param options options given at runtime via command line\n     * @param profileContent if null, read it from profile.\n     */\n    private configure(options: ProgramOptions, profileContent?: IConfigFile) {\n        this.errorsFound = [];\n        this.warningsFound = [];\n        if (!profileContent) {\n            profileContent = this.readProfile(options);\n        }\n        const validProfile: boolean = (!!profileContent);\n        if (options.quiet) {\n            this._quiet = options.quiet;\n        }\n        if (options.verbose) {\n            this._verbose = options.verbose;\n        }\n        if (validProfile) {\n            this.initializeFromConfig(profileContent);\n            // if languages are given as parameters, they ovveride everything said in profile\n            if (!!options.languages && options.languages.length > 0) {\n                this._languages = options.languages;\n                if (!this._defaultLanguage) {\n                    this._defaultLanguage = this._languages[0];\n                }\n            }\n            this.checkParameters();\n        }\n    }\n\n    /**\n     * Read profile.\n     * @param options program options\n     * @return the read profile (empty, if none, null if errors)\n     */\n    private readProfile(options: ProgramOptions): IConfigFile {\n        const profilePath: string = options.profilePath;\n        if (!profilePath) {\n            for (const configfilename of PROFILE_CANDIDATES) {\n                const profile = XliffMergeParameters.readProfileCandidate(configfilename);\n                if (profile) {\n                    this.usedProfilePath = configfilename;\n                    return profile;\n                }\n            }\n            return {};\n        }\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('could not read profile \"' + profilePath + '\"'));\n            return null;\n        }\n        this.usedProfilePath = profilePath;\n        const profileContent: IConfigFile = JSON.parse(content);\n        // replace all pathes in options by absolute paths\n        const xliffmergeOptions = profileContent.xliffmergeOptions;\n        xliffmergeOptions.srcDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.srcDir);\n        xliffmergeOptions.genDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.genDir);\n        xliffmergeOptions.apikeyfile = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.apikeyfile);\n        return profileContent;\n    }\n\n    private adjustPathToProfilePath(profilePath: string, pathToAdjust: string | undefined): string | undefined {\n        if (!pathToAdjust || isAbsolute(pathToAdjust)) {\n            return pathToAdjust;\n        }\n        return join(dirname(profilePath), pathToAdjust).replace(/\\\\/g, '/');\n    }\n\n    private initializeFromConfig(profileContent: IConfigFile) {\n        if (!profileContent) {\n            return;\n        }\n        const profile = profileContent.xliffmergeOptions;\n        if (profile) {\n            if (!isNullOrUndefined(profile.quiet)) {\n                this._quiet = profile.quiet;\n            }\n            if (!isNullOrUndefined(profile.verbose)) {\n                this._verbose = profile.verbose;\n            }\n            if (!isNullOrUndefined(profile.allowIdChange)) {\n                this._allowIdChange = profile.allowIdChange;\n            }\n            if (profile.defaultLanguage) {\n                this._defaultLanguage = profile.defaultLanguage;\n            }\n            if (profile.languages) {\n                this._languages = profile.languages;\n            }\n            if (profile.srcDir) {\n                this._srcDir = profile.srcDir;\n            }\n            if (profile.angularCompilerOptions) {\n                if (profile.angularCompilerOptions.genDir) {\n                    this._genDir = profile.angularCompilerOptions.genDir;\n                }\n            }\n            if (profile.genDir) {\n                // this must be after angularCompilerOptions to be preferred\n                this._genDir = profile.genDir;\n            }\n            if (profile.i18nBaseFile) {\n                this._i18nBaseFile = profile.i18nBaseFile;\n            }\n            if (profile.i18nFile) {\n                this._i18nFile = profile.i18nFile;\n            }\n            if (profile.i18nFormat) {\n                this._i18nFormat = profile.i18nFormat;\n            }\n            if (profile.encoding) {\n                this._encoding = profile.encoding;\n            }\n            if (!isNullOrUndefined(profile.removeUnusedIds)) {\n                this._removeUnusedIds = profile.removeUnusedIds;\n            }\n            if (!isNullOrUndefined(profile.supportNgxTranslate)) {\n                this._supportNgxTranslate = profile.supportNgxTranslate;\n            }\n            if (!isNullOrUndefined(profile.ngxTranslateExtractionPattern)) {\n                this._ngxTranslateExtractionPattern = profile.ngxTranslateExtractionPattern;\n            }\n            if (!isNullOrUndefined(profile.useSourceAsTarget)) {\n                this._useSourceAsTarget = profile.useSourceAsTarget;\n            }\n            if (!isNullOrUndefined(profile.targetPraefix)) {\n                this._targetPraefix = profile.targetPraefix;\n            }\n            if (!isNullOrUndefined(profile.targetSuffix)) {\n                this._targetSuffix = profile.targetSuffix;\n            }\n            if (!isNullOrUndefined(profile.autotranslate)) {\n                this._autotranslate = profile.autotranslate;\n            }\n            if (!isNullOrUndefined(profile.beautifyOutput)) {\n                this._beautifyOutput = profile.beautifyOutput;\n            }\n            if (!isNullOrUndefined(profile.preserveOrder)) {\n                this._preserveOrder = profile.preserveOrder;\n            }\n            if (!isNullOrUndefined(profile.apikey)) {\n                this._apikey = profile.apikey;\n            }\n            if (!isNullOrUndefined(profile.apikeyfile)) {\n                this._apikeyfile = profile.apikeyfile;\n            }\n        } else {\n            this.warningsFound.push('did not find \"xliffmergeOptions\" in profile, using defaults');\n        }\n    }\n\n    /**\n     * Check all Parameters, wether they are complete and consistent.\n     * if something is wrong with the parameters, it is collected in errorsFound.\n     */\n    private checkParameters(): void {\n        this.checkLanguageSyntax(this.defaultLanguage());\n        if (this.languages().length === 0) {\n            this.errorsFound.push(new XliffMergeError('no languages specified'));\n        }\n        this.languages().forEach((lang) => {\n            this.checkLanguageSyntax(lang);\n        });\n        let stats: Stats;\n        let err: any;\n        // srcDir should exists\n        try {\n            stats = fs.statSync(this.srcDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('srcDir \"' + this.srcDir() + '\" is not a directory'));\n        }\n        // genDir should exists\n        try {\n            stats = fs.statSync(this.genDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('genDir \"' + this.genDir() + '\" is not a directory'));\n        }\n        // master file MUST exist\n        try {\n            fs.accessSync(this.i18nFile(), fs.constants.R_OK);\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('i18nFile \"' + this.i18nFile() + '\" is not readable'));\n        }\n        // i18nFormat must be xlf xlf2 or xmb\n        if (!(this.i18nFormat() === 'xlf' || this.i18nFormat() === 'xlf2' || this.i18nFormat() === 'xmb')) {\n            this.errorsFound.push(new XliffMergeError('i18nFormat \"' + this.i18nFormat() + '\" invalid, must be \"xlf\" or \"xlf2\" or \"xmb\"'));\n        }\n        // autotranslate requires api key\n        if (this.autotranslate() && !this.apikey()) {\n            this.errorsFound.push(new XliffMergeError('autotranslate requires an API key, please set one'));\n        }\n        // autotranslated languages must be in list of all languages\n        this.autotranslatedLanguages().forEach((lang) => {\n            if (this.languages().indexOf(lang) < 0) {\n                this.errorsFound.push(new XliffMergeError('autotranslate language \"' + lang + '\" is not in list of languages'));\n            }\n            if (lang === this.defaultLanguage()) {\n                this.errorsFound.push(\n                    new XliffMergeError('autotranslate language \"' + lang + '\" cannot be translated, because it is the source language'));\n            }\n        });\n        // ngx translate pattern check\n        if (this.supportNgxTranslate()) {\n            const checkResult = NgxTranslateExtractor.checkPattern(this.ngxTranslateExtractionPattern());\n            if (!isNullOrUndefined(checkResult)) {\n                this.errorsFound.push(\n                    new XliffMergeError('ngxTranslateExtractionPattern \"' + this.ngxTranslateExtractionPattern() + '\": ' + checkResult));\n            }\n        }\n        // targetPraefix and targetSuffix check\n        if (!this.useSourceAsTarget()) {\n            if (this.targetPraefix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetPraefix \"' + this.targetPraefix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n            if (this.targetSuffix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetSuffix \"' + this.targetSuffix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n        }\n     }\n\n    /**\n     * Check syntax of language.\n     * Must be compatible with XML Schema type xsd:language.\n     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\n     * @param lang language to check\n     */\n    private checkLanguageSyntax(lang: string) {\n        const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\n        if (!pattern.test(lang)) {\n            this.errorsFound.push(new XliffMergeError('language \"' + lang + '\" is not valid'));\n        }\n    }\n\n    public allowIdChange(): boolean {\n        return (isNullOrUndefined(this._allowIdChange)) ? false : this._allowIdChange;\n    }\n\n    public verbose(): boolean {\n        return (isNullOrUndefined(this._verbose)) ? false : this._verbose;\n    }\n\n    public quiet(): boolean {\n        return (isNullOrUndefined(this._quiet)) ? false : this._quiet;\n    }\n\n    /**\n     * Debug output all parameters to commandOutput.\n     */\n    public showAllParameters(commandOutput: CommandOutput): void {\n        commandOutput.debug('xliffmerge Used Parameters:');\n        commandOutput.debug('usedProfilePath:\\t\"%s\"', this.usedProfilePath);\n        commandOutput.debug('defaultLanguage:\\t\"%s\"', this.defaultLanguage());\n        commandOutput.debug('srcDir:\\t\"%s\"', this.srcDir());\n        commandOutput.debug('genDir:\\t\"%s\"', this.genDir());\n        commandOutput.debug('i18nBaseFile:\\t\"%s\"', this.i18nBaseFile());\n        commandOutput.debug('i18nFile:\\t\"%s\"', this.i18nFile());\n        commandOutput.debug('languages:\\t%s', this.languages());\n        for (const language of this.languages()) {\n            commandOutput.debug('outputFile[%s]:\\t%s', language, this.generatedI18nFile(language));\n        }\n        commandOutput.debug('removeUnusedIds:\\t%s', this.removeUnusedIds());\n        commandOutput.debug('supportNgxTranslate:\\t%s', this.supportNgxTranslate());\n        if (this.supportNgxTranslate()) {\n            commandOutput.debug('ngxTranslateExtractionPattern:\\t%s', this.ngxTranslateExtractionPattern());\n        }\n        commandOutput.debug('useSourceAsTarget:\\t%s', this.useSourceAsTarget());\n        if (this.useSourceAsTarget()) {\n            commandOutput.debug('targetPraefix:\\t\"%s\"', this.targetPraefix());\n            commandOutput.debug('targetSuffix:\\t\"%s\"', this.targetSuffix());\n        }\n        commandOutput.debug('allowIdChange:\\t%s', this.allowIdChange());\n        commandOutput.debug('beautifyOutput:\\t%s', this.beautifyOutput());\n        commandOutput.debug('preserveOrder:\\t%s', this.preserveOrder());\n        commandOutput.debug('autotranslate:\\t%s', this.autotranslate());\n        if (this.autotranslate()) {\n            commandOutput.debug('autotranslated languages:\\t%s', this.autotranslatedLanguages());\n            commandOutput.debug('apikey:\\t%s', this.apikey() ? '****' : 'NOT SET');\n            commandOutput.debug('apikeyfile:\\t%s', this.apikeyfile());\n        }\n    }\n\n    /**\n     * Default-Language, default en.\n     * @return default language\n     */\n    public defaultLanguage(): string {\n        return this._defaultLanguage ? this._defaultLanguage : 'en';\n    }\n\n    /**\n     * Liste der zu bearbeitenden Sprachen.\n     * @return languages\n     */\n    public languages(): string[] {\n        return this._languages ? this._languages : [];\n    }\n\n    /**\n     * src directory, where the master xlif is located.\n     * @return srcDir\n     */\n    public srcDir(): string {\n        return this._srcDir ? this._srcDir : '.';\n    }\n\n    /**\n     * The base file name of the xlif file for input and output.\n     * Default is messages\n     * @return base file\n     */\n    public i18nBaseFile(): string {\n        return this._i18nBaseFile ? this._i18nBaseFile : 'messages';\n    }\n\n    /**\n     * The master xlif file (the one generated by ng-xi18n).\n     * Default is <srcDir>/<i18nBaseFile>.xlf.\n     * @return master file\n     */\n    public i18nFile(): string {\n        return join(this.srcDir(),\n            (this._i18nFile ? this._i18nFile : this.i18nBaseFile() + '.' + this.suffixForGeneratedI18nFile())\n        ).replace(/\\\\/g, '/');\n    }\n\n    /**\n     * Format of the master xlif file.\n     * Default is \"xlf\", possible are \"xlf\" or \"xlf2\" or \"xmb\".\n     * @return format\n     */\n    public i18nFormat(): string {\n        return (this._i18nFormat ? this._i18nFormat : 'xlf');\n    }\n\n    /**\n     * potentially to be generated I18n-File with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedI18nFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + this.suffixForGeneratedI18nFile()).replace(/\\\\/g, '/');\n    }\n\n    private suffixForGeneratedI18nFile(): string {\n        switch (this.i18nFormat()) {\n            case 'xlf':\n                return 'xlf';\n            case 'xlf2':\n                return 'xlf';\n            case 'xmb':\n                return 'xtb';\n        }\n    }\n\n    /**\n     * potentially to be generated translate-File for ngx-translate with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + 'json').replace(/\\\\/g, '/');\n    }\n\n    /**\n     * The encoding used to write new XLIFF-files.\n     * @return encoding\n     */\n    public encoding(): string {\n        return this._encoding ? this._encoding : 'UTF-8';\n    }\n\n     /**\n      * Output-Directory, where the output is written to.\n      * Default is <srcDir>.\n     */\n    public genDir(): string {\n        return this._genDir ? this._genDir : this.srcDir();\n    }\n\n    public removeUnusedIds(): boolean {\n        return (isNullOrUndefined(this._removeUnusedIds)) ? true : this._removeUnusedIds;\n    }\n\n    public supportNgxTranslate(): boolean {\n        return (isNullOrUndefined(this._supportNgxTranslate)) ? false : this._supportNgxTranslate;\n    }\n\n    public ngxTranslateExtractionPattern(): string {\n        return (isNullOrUndefined(this._ngxTranslateExtractionPattern)) ?\n            NgxTranslateExtractor.DefaultExtractionPattern : this._ngxTranslateExtractionPattern;\n    }\n\n    /**\n     * Whether source must be used as target for new trans-units\n     * Default is true\n     */\n    public useSourceAsTarget(): boolean {\n        return (isNullOrUndefined(this._useSourceAsTarget)) ? true : this._useSourceAsTarget;\n    }\n\n    /**\n     * Praefix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetPraefix(): string {\n        return (isNullOrUndefined(this._targetPraefix)) ? '' : this._targetPraefix;\n    }\n\n    /**\n     * Suffix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetSuffix(): string {\n        return (isNullOrUndefined(this._targetSuffix)) ? '' : this._targetSuffix;\n    }\n\n    /**\n     * If set, run xml result through beautifier (pretty-data).\n     */\n    public beautifyOutput(): boolean {\n        return (isNullOrUndefined(this._beautifyOutput)) ? false : this._beautifyOutput;\n    }\n\n    /**\n     * If set, order of new trans units will be as in master.\n     * Otherwise they are added at the end.\n     */\n    public preserveOrder(): boolean {\n        return (isNullOrUndefined(this._preserveOrder)) ? true : this._preserveOrder;\n    }\n\n    /**\n     * Whether to use autotranslate for new trans-units\n     * Default is false\n     */\n    public autotranslate(): boolean {\n        if (isNullOrUndefined(this._autotranslate)) {\n            return false;\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate).length > 0;\n        }\n        return <boolean> this._autotranslate;\n    }\n\n    /**\n     * Whether to use autotranslate for a given language.\n     * @param lang language code.\n     */\n    public autotranslateLanguage(lang: string): boolean {\n        return this.autotranslatedLanguages().indexOf(lang) >= 0;\n    }\n\n    /**\n     * Return a list of languages to be autotranslated.\n     */\n    public autotranslatedLanguages(): string[] {\n        if (isNullOrUndefined(this._autotranslate) || this._autotranslate === false) {\n            return [];\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate);\n        }\n        return this.languages().slice(1); // first is source language\n    }\n\n    /**\n     * API key to be used for Google Translate\n     * @return api key\n     */\n    public apikey(): string {\n        if (!isNullOrUndefined(this._apikey)) {\n            return this._apikey;\n        } else {\n            const apikeyPath = this.apikeyfile();\n            if (this.apikeyfile()) {\n                if (fs.existsSync(apikeyPath)) {\n                    return FileUtil.read(apikeyPath, 'utf-8');\n                } else {\n                    throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));\n                }\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /**\n     * file name for API key to be used for Google Translate.\n     * Explicitly set or read from env var API_KEY_FILE.\n     * @return file of api key\n     */\n    public apikeyfile(): string {\n        if (this._apikeyfile) {\n            return this._apikeyfile;\n        } else if (process.env.API_KEY_FILE) {\n            return process.env.API_KEY_FILE;\n        } else {\n            return null;\n        }\n    }\n}\n"]}