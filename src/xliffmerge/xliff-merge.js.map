{"version":3,"file":"xliff-merge.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/xliff-merge.ts"],"names":[],"mappings":"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","sourcesContent":["import {CommandOutput} from '../common/command-output';\nimport {XliffMergeParameters} from './xliff-merge-parameters';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {FileUtil} from '../common/file-util';\nimport {VERSION} from './version';\nimport {format} from 'util';\nimport {isNullOrUndefined} from '../common/util';\nimport {ITranslationMessagesFile, ITransUnit,\n    FORMAT_XMB, FORMAT_XTB,\n    NORMALIZATION_FORMAT_DEFAULT, STATE_FINAL, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\nimport {Observable, of, forkJoin} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport {XliffMergeAutoTranslateService} from '../autotranslate/xliff-merge-auto-translate-service';\nimport {AutoTranslateSummaryReport} from '../autotranslate/auto-translate-summary-report';\n\n/**\n * Created by martin on 17.02.2017.\n * XliffMerge - read xliff or xmb file and put untranslated parts in language specific xliff or xmb files.\n *\n */\n\nexport class XliffMerge {\n\n    private readonly commandOutput: CommandOutput;\n\n    private readonly options: ProgramOptions;\n\n    private parameters: XliffMergeParameters;\n\n    /**\n     * The read master xlf file.\n     */\n    private master: ITranslationMessagesFile; // XliffFile or Xliff2File or XmbFile\n\n    private autoTranslateService: XliffMergeAutoTranslateService;\n\n    static main(argv: string[]) {\n        const options = XliffMerge.parseArgs(argv);\n        if (options) {\n            new XliffMerge(new CommandOutput(process.stdout), options).run((result) => {\n                process.exit(result);\n            });\n        }\n    }\n\n    static parseArgs(argv: string[]): ProgramOptions {\n        const options: ProgramOptions = {\n            languages: []\n        };\n        for (let i = 2; i < argv.length; i++) {\n            const arg = argv[i];\n            if (arg === '--version' || arg === '-version') {\n                console.log('xliffmerge ' + VERSION);\n            } else if (arg === '--verbose' || arg === '-v') {\n                options.verbose = true;\n            } else if (arg === '--profile' || arg === '-p') {\n                i++;\n                if (i >= argv.length) {\n                    console.log('missing config file');\n                    XliffMerge.showUsage();\n                    return null;\n                } else {\n                    options.profilePath = argv[i];\n                }\n            } else if (arg === '--quiet' || arg === '-q') {\n                options.quiet = true;\n            } else if (arg === '--help' || arg === '-help' || arg === '-h') {\n                XliffMerge.showUsage();\n            } else if (arg.length > 0 && arg.charAt(0) === '-') {\n                console.log('unknown option');\n                return null;\n            } else {\n                options.languages.push(arg);\n            }\n        }\n        return options;\n    }\n\n    static showUsage() {\n        console.log('usage: xliffmerge <option>* <language>*');\n        console.log('Options');\n        console.log('\\t-p|--profile a json configuration file containing all relevant parameters.');\n        console.log('\\t\\tfor details please consult the home page https://github.com/martinroob/ngx-i18nsupport');\n        console.log('\\t-v|--verbose show some output for debugging purposes');\n        console.log('\\t-q|--quiet only show errors, nothing else');\n        console.log('\\t-version|--version show version string');\n        console.log('');\n        console.log('\\t<language> has to be a valid language short string, e,g. \"en\", \"de\", \"de-ch\"');\n    }\n\n    /**\n     * For Tests, create instance with given profile\n     * @param commandOutput commandOutput\n     * @param options options\n     * @param profileContent profileContent\n     */\n    public static createFromOptions(commandOutput: CommandOutput, options: ProgramOptions, profileContent?: IConfigFile) {\n        const instance = new XliffMerge(commandOutput, options);\n        instance.parameters = XliffMergeParameters.createFromOptions(options, profileContent);\n        return instance;\n    }\n\n    constructor(commandOutput: CommandOutput, options: ProgramOptions) {\n        this.commandOutput = commandOutput;\n        this.options = options;\n        this.parameters = null;\n    }\n\n    /**\n     * Run the command.\n     * This runs async.\n     * @param callbackFunction when command is executed, called with the return code (0 for ok), if given.\n     * @param errorFunction callbackFunction for error handling\n     */\n    public run(callbackFunction?: ((retcode: number) => any), errorFunction?: ((error: any) => any)) {\n        this.runAsync()\n            .subscribe((retcode: number) => {\n                if (!isNullOrUndefined(callbackFunction)) {\n                    callbackFunction(retcode);\n                }\n            }, (error) => {\n                if (!isNullOrUndefined(errorFunction)) {\n                    errorFunction(error);\n                }\n            });\n    }\n\n    /**\n     * Execute merge-Process.\n     * @return Async operation, on completion returns retcode 0=ok, other = error.\n     */\n    public runAsync(): Observable<number> {\n        if (this.options && this.options.quiet) {\n            this.commandOutput.setQuiet();\n        }\n        if (this.options && this.options.verbose) {\n            this.commandOutput.setVerbose();\n        }\n        if (!this.parameters) {\n            this.parameters = XliffMergeParameters.createFromOptions(this.options);\n        }\n        this.commandOutput.info('xliffmerge version %s', VERSION);\n        if (this.parameters.verbose()) {\n            this.parameters.showAllParameters(this.commandOutput);\n        }\n        if (this.parameters.errorsFound.length > 0) {\n            for (const err of this.parameters.errorsFound) {\n                this.commandOutput.error(err.message);\n            }\n            return of(-1);\n        }\n        if (this.parameters.warningsFound.length > 0) {\n            for (const warn of this.parameters.warningsFound) {\n                this.commandOutput.warn(warn);\n            }\n        }\n        this.readMaster();\n        if (this.parameters.autotranslate()) {\n            this.autoTranslateService = new XliffMergeAutoTranslateService(this.parameters.apikey());\n        }\n        const executionForAllLanguages: Observable<number>[] = [];\n        this.parameters.languages().forEach((lang: string) => {\n            executionForAllLanguages.push(this.processLanguage(lang));\n        });\n        return forkJoin(executionForAllLanguages).pipe(\n            map((retcodes: number[]) => this.totalRetcode(retcodes)));\n    }\n\n    /**\n     * Give an array of retcodes for the different languages, return the total retcode.\n     * If all are 0, it is 0, otherwise the first non zero.\n     * @param retcodes retcodes\n     * @return number\n     */\n    private totalRetcode(retcodes: number[]): number {\n        for (let i = 0; i < retcodes.length; i++) {\n            if (retcodes[i] !== 0) {\n                return retcodes[i];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Return the name of the generated file for given lang.\n     * @param lang language\n     * @return name of generated file\n     */\n    public generatedI18nFile(lang: string): string {\n        return this.parameters.generatedI18nFile(lang);\n    }\n\n    /**\n     * Return the name of the generated ngx-translation file for given lang.\n     * @param lang language\n     * @return name of translate file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return this.parameters.generatedNgxTranslateFile(lang);\n    }\n\n    /**\n     * Warnings found during the run.\n     * @return warnings\n     */\n    public warnings(): string[] {\n        return this.parameters.warningsFound;\n    }\n\n    private readMaster() {\n        try {\n            this.master = TranslationMessagesFileReader.fromFile(\n                this.parameters.i18nFormat(),\n                this.parameters.i18nFile(),\n                this.parameters.encoding());\n            this.master.warnings().forEach((warning: string) => {\n                this.commandOutput.warn(warning);\n            });\n            const count = this.master.numberOfTransUnits();\n            const missingIdCount = this.master.numberOfTransUnitsWithMissingId();\n            this.commandOutput.info('master contains %s trans-units', count);\n            if (missingIdCount > 0) {\n                this.commandOutput.warn('master contains %s trans-units, but there are %s without id', count, missingIdCount);\n            }\n            const sourceLang: string = this.master.sourceLanguage();\n            if (sourceLang && sourceLang !== this.parameters.defaultLanguage()) {\n                this.commandOutput.warn(\n                    'master says to have source-language=\"%s\", should be \"%s\" (your defaultLanguage)',\n                    sourceLang,\n                    this.parameters.defaultLanguage());\n                this.master.setSourceLanguage(this.parameters.defaultLanguage());\n                TranslationMessagesFileReader.save(this.master, this.parameters.beautifyOutput());\n                this.commandOutput.warn('changed master source-language=\"%s\" to \"%s\"', sourceLang, this.parameters.defaultLanguage());\n            }\n        } catch (err) {\n            if (err instanceof XliffMergeError) {\n                this.commandOutput.error(err.message);\n                return of(-1);\n            } else {\n                // unhandled\n                const currentFilename = this.parameters.i18nFile();\n                const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                this.commandOutput.error(filenameString + 'oops ' + err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * Process the given language.\n     * Async operation.\n     * @param lang language\n     * @return on completion 0 for ok, other for error\n     */\n    private processLanguage(lang: string): Observable<number> {\n        this.commandOutput.debug('processing language %s', lang);\n        const languageXliffFile = this.parameters.generatedI18nFile(lang);\n        const currentFilename = languageXliffFile;\n        let result: Observable<void>;\n        if (!FileUtil.exists(languageXliffFile)) {\n            result = this.createUntranslatedXliff(lang, languageXliffFile);\n        } else {\n            result = this.mergeMasterTo(lang, languageXliffFile);\n        }\n        return result\n            .pipe(map(() => {\n                if (this.parameters.supportNgxTranslate()) {\n                    const languageSpecificMessagesFile: ITranslationMessagesFile =\n                        TranslationMessagesFileReader.fromFile(\n                            this.translationFormat(this.parameters.i18nFormat()),\n                            languageXliffFile,\n                            this.parameters.encoding(),\n                            this.master.filename());\n                    NgxTranslateExtractor.extract(\n                        languageSpecificMessagesFile,\n                        this.parameters.ngxTranslateExtractionPattern(),\n                        this.parameters.generatedNgxTranslateFile(lang));\n                }\n                return 0;\n            }), catchError((err) => {\n                if (err instanceof XliffMergeError) {\n                    this.commandOutput.error(err.message);\n                    return of(-1);\n                } else {\n                    // unhandled\n                    const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                    this.commandOutput.error(filenameString + 'oops ' + err);\n                    throw err;\n                }\n            }));\n    }\n\n    /**\n     * create a new file for the language, which contains no translations, but all keys.\n     * in principle, this is just a copy of the master with target-language set.\n     * @param lang language\n     * @param languageXliffFilePath name of file\n     */\n    private createUntranslatedXliff(lang: string, languageXliffFilePath: string): Observable<void> {\n        // copy master ...\n        // and set target-language\n        // and copy source to target if necessary\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        this.master.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        this.master.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            this.master.createTranslationFileForLang(lang, languageXliffFilePath, isDefaultLang, this.parameters.useSourceAsTarget());\n        return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile).pipe(\n            map((/* summary */) => {\n            // write it to file\n            TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n            this.commandOutput.info('created new file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n            if (!isDefaultLang) {\n                this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n            }\n            return null;\n        }));\n    }\n\n    /**\n     * Map the input format to the format of the translation.\n     * Normally they are the same but for xmb the translation format is xtb.\n     * @param i18nFormat format\n     */\n    private translationFormat(i18nFormat: string): string {\n        if (i18nFormat === FORMAT_XMB) {\n            return FORMAT_XTB;\n        } else {\n            return i18nFormat;\n        }\n    }\n\n    /**\n     * Merge all\n     * @param lang language\n     * @param languageXliffFilePath filename\n     */\n    private mergeMasterTo(lang: string, languageXliffFilePath: string): Observable<void> {\n        // read lang specific file\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            TranslationMessagesFileReader.fromFile(\n                this.translationFormat(this.parameters.i18nFormat()),\n                languageXliffFilePath,\n                this.parameters.encoding());\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        let newCount = 0;\n        let correctSourceContentCount = 0;\n        let correctSourceRefCount = 0;\n        let correctDescriptionOrMeaningCount = 0;\n        let idChangedCount = 0;\n        languageSpecificMessagesFile.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        languageSpecificMessagesFile.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        let lastProcessedUnit: ITransUnit = null;\n        this.master.forEachTransUnit((masterTransUnit) => {\n            const transUnit: ITransUnit = languageSpecificMessagesFile.transUnitWithId(masterTransUnit.id);\n\n            if (!transUnit) {\n                // oops, no translation, must be a new key, so add it\n                let newUnit;\n                if (this.parameters.allowIdChange()\n                    && (newUnit = this.processChangedIdUnit(masterTransUnit, languageSpecificMessagesFile, lastProcessedUnit))) {\n                    lastProcessedUnit = newUnit;\n                    idChangedCount++;\n                } else {\n                    lastProcessedUnit = languageSpecificMessagesFile.importNewTransUnit(\n                        masterTransUnit,\n                        isDefaultLang,\n                        this.parameters.useSourceAsTarget(),\n                        (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n                    newCount++;\n                }\n            } else {\n                // check for changed source content and change it if needed\n                // (can only happen if ID is explicitely set, otherwise ID would change if source content is changed.\n                if (transUnit.supportsSetSourceContent() && !this.areSourcesNearlyEqual(masterTransUnit, transUnit)) {\n                    transUnit.setSourceContent(masterTransUnit.sourceContent());\n                    if (isDefaultLang) {\n                        // #81 changed source must be copied to target for default lang\n                        transUnit.translate(masterTransUnit.sourceContent());\n                        transUnit.setTargetState(STATE_FINAL);\n                    } else {\n                        if (transUnit.targetState() === STATE_FINAL) {\n                            // source is changed, so translation has to be checked again\n                            transUnit.setTargetState(STATE_TRANSLATED);\n                        }\n                    }\n                    correctSourceContentCount++;\n                }\n                // check for missing or changed source ref and add it if needed\n                if (transUnit.supportsSetSourceReferences()\n                    && !this.areSourceReferencesEqual(masterTransUnit.sourceReferences(), transUnit.sourceReferences())) {\n                    transUnit.setSourceReferences(masterTransUnit.sourceReferences());\n                    correctSourceRefCount++;\n                }\n                // check for changed description or meaning\n                if (transUnit.supportsSetDescriptionAndMeaning()) {\n                    let changed = false;\n                    if (transUnit.description() !== masterTransUnit.description()) {\n                        transUnit.setDescription(masterTransUnit.description());\n                        changed = true;\n                    }\n                    if (transUnit.meaning() !== masterTransUnit.meaning()) {\n                        transUnit.setMeaning(masterTransUnit.meaning());\n                        changed = true;\n                    }\n                    if (changed) {\n                        correctDescriptionOrMeaningCount++;\n                    }\n                }\n                lastProcessedUnit = transUnit;\n            }\n        });\n        if (newCount > 0) {\n            this.commandOutput.warn('merged %s trans-units from master to \"%s\"', newCount, lang);\n        }\n        if (correctSourceContentCount > 0) {\n            this.commandOutput.warn('transferred %s changed source content from master to \"%s\"', correctSourceContentCount, lang);\n        }\n        if (correctSourceRefCount > 0) {\n            this.commandOutput.warn('transferred %s source references from master to \"%s\"', correctSourceRefCount, lang);\n        }\n        if (idChangedCount > 0) {\n            this.commandOutput.warn('found %s changed id\\'s in \"%s\"', idChangedCount, lang);\n        }\n        if (correctDescriptionOrMeaningCount > 0) {\n            this.commandOutput.warn(\n                'transferred %s changed descriptions/meanings from master to \"%s\"', correctDescriptionOrMeaningCount, lang);\n        }\n\n        // remove all elements that are no longer used\n        let removeCount = 0;\n        languageSpecificMessagesFile.forEachTransUnit((transUnit: ITransUnit) => {\n            const existsInMaster = !isNullOrUndefined(this.master.transUnitWithId(transUnit.id));\n            if (!existsInMaster) {\n                if (this.parameters.removeUnusedIds()) {\n                    languageSpecificMessagesFile.removeTransUnitWithId(transUnit.id);\n                }\n                removeCount++;\n            }\n        });\n        if (removeCount > 0) {\n            if (this.parameters.removeUnusedIds()) {\n                this.commandOutput.warn('removed %s unused trans-units in \"%s\"', removeCount, lang);\n            } else {\n                this.commandOutput.warn('keeping %s unused trans-units in \"%s\", because removeUnused is disabled', removeCount, lang);\n            }\n        }\n\n        if (newCount === 0 && removeCount === 0 && correctSourceContentCount === 0\n            && correctSourceRefCount === 0 && correctDescriptionOrMeaningCount === 0) {\n            this.commandOutput.info('file for \"%s\" was up to date', lang);\n            return of(null);\n        } else {\n            return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile)\n                .pipe(map(() => {\n                    // write it to file\n                    TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n                    this.commandOutput.info('updated file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n                    if (newCount > 0 && !isDefaultLang) {\n                        this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n                    }\n                    return null;\n                }));\n        }\n    }\n\n    /**\n     * Handle the case of changed id due to small white space changes.\n     * @param masterTransUnit unit in master file\n     * @param languageSpecificMessagesFile translation file\n     * @param lastProcessedUnit Unit before the one processed here. New unit will be inserted after this one.\n     * @return processed unit, if done, null if no changed unit found\n     */\n    private processChangedIdUnit(\n        masterTransUnit: ITransUnit,\n        languageSpecificMessagesFile: ITranslationMessagesFile,\n        lastProcessedUnit: ITransUnit): ITransUnit {\n\n        let changedTransUnit: ITransUnit = null;\n        languageSpecificMessagesFile.forEachTransUnit((languageTransUnit) => {\n             if (this.areSourcesNearlyEqual(languageTransUnit, masterTransUnit)) {\n                 changedTransUnit = languageTransUnit;\n             }\n        });\n        if (!changedTransUnit) {\n            return null;\n        }\n        const mergedTransUnit = languageSpecificMessagesFile.importNewTransUnit(\n            masterTransUnit,\n            false,\n            false,\n            (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n        const translatedContent = changedTransUnit.targetContent();\n        if (translatedContent) { // issue #68 set translated only, if it is really translated\n            mergedTransUnit.translate(translatedContent);\n            mergedTransUnit.setTargetState(STATE_TRANSLATED);\n        }\n        return mergedTransUnit;\n    }\n\n    /**\n     * test wether the sources of 2 trans units are equal ignoring white spaces.\n     * @param tu1 tu1\n     * @param tu2 tu2\n     */\n    private areSourcesNearlyEqual(tu1: ITransUnit, tu2: ITransUnit): boolean {\n        if ((tu1 && !tu2) || (tu2 && !tu1)) {\n            return false;\n        }\n        const tu1Normalized = tu1.sourceContentNormalized();\n        const tu2Normalized = tu2.sourceContentNormalized();\n        if (tu1Normalized.isICUMessage()) {\n            if (tu2Normalized.isICUMessage()) {\n                const icu1Normalized = tu1Normalized.getICUMessage().asNativeString().trim();\n                const icu2Normalized = tu2Normalized.getICUMessage().asNativeString().trim();\n                return icu1Normalized === icu2Normalized;\n            } else {\n                return false;\n            }\n        }\n        if (tu1Normalized.containsICUMessageRef()) {\n            const icuref1Normalized = tu1Normalized.asNativeString().trim();\n            const icuref2Normalized = tu2Normalized.asNativeString().trim();\n            return icuref1Normalized === icuref2Normalized;\n        }\n        const s1Normalized = tu1Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        const s2Normalized = tu2Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        return s1Normalized === s2Normalized;\n    }\n\n    private areSourceReferencesEqual(\n        ref1: {sourcefile: string; linenumber: number; }[],\n        ref2: {sourcefile: string; linenumber: number; }[]): boolean {\n\n        if ((isNullOrUndefined(ref1) && !isNullOrUndefined(ref2)) || (isNullOrUndefined(ref2) && !isNullOrUndefined(ref1))) {\n            return false;\n        }\n        if (isNullOrUndefined(ref1) && isNullOrUndefined(ref2)) {\n            return true;\n        }\n        // bot refs are set now, convert to set to compare them\n        const set1: Set<string> = new Set<string>();\n        ref1.forEach((ref) => {set1.add(ref.sourcefile + ':' + ref.linenumber); });\n        const set2: Set<string> = new Set<string>();\n        ref2.forEach((ref) => {set2.add(ref.sourcefile + ':' + ref.linenumber); });\n        if (set1.size !== set2.size) {\n            return false;\n        }\n        let match = true;\n        set2.forEach((ref) => {\n            if (!set1.has(ref)) {\n                match = false;\n            }\n        });\n        return match;\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    private autoTranslate(\n        from: string,\n        to: string,\n        languageSpecificMessagesFile: ITranslationMessagesFile): Observable<AutoTranslateSummaryReport> {\n\n        let serviceCall: Observable<AutoTranslateSummaryReport>;\n        const autotranslateEnabled: boolean = this.parameters.autotranslateLanguage(to);\n        if (autotranslateEnabled) {\n            serviceCall = this.autoTranslateService.autoTranslate(from, to, languageSpecificMessagesFile);\n        } else {\n            serviceCall = of(new AutoTranslateSummaryReport(from, to));\n        }\n        return serviceCall.pipe(map((summary) => {\n            if (autotranslateEnabled) {\n                if (summary.error() || summary.failed() > 0) {\n                    this.commandOutput.error(summary.content());\n                } else {\n                    this.commandOutput.warn(summary.content());\n                }\n            }\n            return summary;\n        }));\n    }\n\n}\n"]}