{"version":3,"file":"command-output.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/common/command-output.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by martin on 17.02.2017.\n * Very simple class to control the output of a command.\n * Output can be errors, warnings, infos and debug-Outputs.\n * The output can be controlled via 2 flags, quiet and verbose.\n * If quit is enabled only error messages are shown.\n * If verbose is enabled, everything is shown.\n * If both are not enabled (the default) errors, warnings and infos are shown.\n * If not are enabled (strange), we assumed the default.\n */\n\nimport chalk from 'chalk';\nimport WritableStream = NodeJS.WritableStream;\nimport {format} from 'util';\n\nenum LogLevel {\n    'ERROR',\n    'WARN',\n    'INFO',\n    'DEBUG'\n}\n\nexport class CommandOutput {\n\n    /**\n     * verbose enables output of everything.\n     */\n    public _verbose: boolean;\n\n    /**\n     * quiet disables output of everything but errors.\n     */\n    public _quiet: boolean;\n\n    private outputStream: WritableStream;\n\n    constructor(stdout?: WritableStream) {\n        this._quiet = false;\n        this._verbose = false;\n        if (stdout) {\n            this.outputStream = stdout;\n        } else {\n            this.outputStream = process.stdout;\n        }\n    }\n\n    public setVerbose() {\n        this._verbose = true;\n    }\n\n    public setQuiet() {\n        this._quiet = true;\n    }\n\n    /**\n     * Test, wether verbose is enabled.\n     * @return wether verbose is enabled.\n     */\n    public verbose(): boolean {\n        return this._verbose;\n    }\n\n    /**\n     * Test, wether quiet is enabled.\n     * @return wether quiet is enabled.\n     */\n    public quiet(): boolean {\n        return this._quiet;\n    }\n\n    public error(msg, ...params: any[]) {\n        this.log(LogLevel.ERROR, msg, params);\n    }\n\n    public warn(msg, ...params: any[]) {\n        this.log(LogLevel.WARN, msg, params);\n    }\n\n    public info(msg, ...params: any[]) {\n        this.log(LogLevel.INFO, msg, params);\n    }\n\n    public debug(msg, ...params: any[]) {\n        this.log(LogLevel.DEBUG, msg, params);\n    }\n\n    private log(level: LogLevel, msg, params: any[]) {\n        if (!this.isOutputEnabled(level)) {\n            return;\n        }\n        let coloredMessage;\n        switch (level) {\n            case LogLevel.ERROR:\n                coloredMessage = chalk.red('ERROR: ' + msg);\n                break;\n            case LogLevel.WARN:\n                coloredMessage = chalk.magenta('WARNING: ' + msg);\n                break;\n            default:\n                coloredMessage = chalk.gray('* ' + msg);\n                break;\n        }\n        const outMsg = format(coloredMessage, ...params);\n        this.outputStream.write(outMsg + '\\n');\n    }\n\n    private isOutputEnabled(level: LogLevel): boolean {\n        let quietEnabled, verboseEnabled: boolean;\n        if (this._quiet && this._verbose) {\n            quietEnabled = false;\n            verboseEnabled = false;\n        } else {\n            quietEnabled = this._quiet;\n            verboseEnabled = this._verbose;\n        }\n        switch (level) {\n            case LogLevel.ERROR:\n                return true;    // always output errors\n            case LogLevel.WARN:\n                return (!quietEnabled);\n            case LogLevel.INFO:\n                return (verboseEnabled && !quietEnabled);\n            case LogLevel.DEBUG:\n                return verboseEnabled;\n            default:\n                return true;\n        }\n    }\n}\n"]}