{"version":3,"file":"ngx-i18nsupport-ngx-i18nsupport.js","sources":["ng://@ngx-i18nsupport/ngx-i18nsupport/lib/xliffmerge.module.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/writer-to-string.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/command-output.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-error.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/file-util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extraction-pattern.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extractor.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-parameters.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/version.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xml-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/translation-messages-file-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-result.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-summary-report.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/xliff-merge-auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n\n// not used, only there to make ng-packagr happy\n@NgModule({\n    imports: [\n    ],\n    declarations: [],\n    exports: []\n})\nexport class XliffmergeModule { }\n","/**\n * Collection of utility functions that are deprecated in nodes util.\n */\n\n/**\n * Replaces node isNullOrUndefined.\n */\nexport function isNullOrUndefined(value: any) {\n    return value === undefined || value === null;\n}\n\n/**\n * Replaces node isString.\n */\nexport function isString(value: any) {\n    return typeof value === 'string';\n}\n\n/**\n * Replaces node isBoolean.\n */\nexport function isBoolean(value: any) {\n    return typeof value === 'boolean';\n}\n\n/**\n * Replaces node isNumber.\n */\nexport function isNumber(value: any) {\n    return typeof value === 'number';\n}\n\n/**\n * Replaces node isArray.\n */\nexport function isArray(value: any) {\n    return Array.isArray(value);\n}\n","import {Writable} from 'stream';\nimport {isString} from './util';\n/**\n * Created by martin on 20.02.2017.\n * A helper class for testing.\n * Can be used as a WritableStream and writes everything (synchronously) into a string,\n * that can easily be read by the tests.\n */\n\nexport class WriterToString extends Writable {\n\n    private resultString: string;\n\n    constructor() {\n        super();\n        this.resultString = '';\n    }\n\n    public _write(chunk: any, encoding: string, callback: Function): void {\n        let chunkString;\n        if (isString(chunk)) {\n            chunkString = chunk;\n        } else if (chunk instanceof Buffer) {\n            chunkString = chunk.toString();\n        } else {\n            chunkString = Buffer.alloc(chunk).toString(encoding);\n        }\n        this.resultString = this.resultString + chunkString;\n        callback();\n    }\n\n    /**\n     * Returns a string of everything, that was written to the stream so far.\n     * @return written data\n     */\n    public writtenData(): string {\n        return this.resultString;\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n * Very simple class to control the output of a command.\n * Output can be errors, warnings, infos and debug-Outputs.\n * The output can be controlled via 2 flags, quiet and verbose.\n * If quit is enabled only error messages are shown.\n * If verbose is enabled, everything is shown.\n * If both are not enabled (the default) errors, warnings and infos are shown.\n * If not are enabled (strange), we assumed the default.\n */\n\nimport chalk from 'chalk';\nimport WritableStream = NodeJS.WritableStream;\nimport {format} from 'util';\n\nenum LogLevel {\n    'ERROR',\n    'WARN',\n    'INFO',\n    'DEBUG'\n}\n\nexport class CommandOutput {\n\n    /**\n     * verbose enables output of everything.\n     */\n    public _verbose: boolean;\n\n    /**\n     * quiet disables output of everything but errors.\n     */\n    public _quiet: boolean;\n\n    private outputStream: WritableStream;\n\n    constructor(stdout?: WritableStream) {\n        this._quiet = false;\n        this._verbose = false;\n        if (stdout) {\n            this.outputStream = stdout;\n        } else {\n            this.outputStream = process.stdout;\n        }\n    }\n\n    public setVerbose() {\n        this._verbose = true;\n    }\n\n    public setQuiet() {\n        this._quiet = true;\n    }\n\n    /**\n     * Test, wether verbose is enabled.\n     * @return wether verbose is enabled.\n     */\n    public verbose(): boolean {\n        return this._verbose;\n    }\n\n    /**\n     * Test, wether quiet is enabled.\n     * @return wether quiet is enabled.\n     */\n    public quiet(): boolean {\n        return this._quiet;\n    }\n\n    public error(msg, ...params: any[]) {\n        this.log(LogLevel.ERROR, msg, params);\n    }\n\n    public warn(msg, ...params: any[]) {\n        this.log(LogLevel.WARN, msg, params);\n    }\n\n    public info(msg, ...params: any[]) {\n        this.log(LogLevel.INFO, msg, params);\n    }\n\n    public debug(msg, ...params: any[]) {\n        this.log(LogLevel.DEBUG, msg, params);\n    }\n\n    private log(level: LogLevel, msg, params: any[]) {\n        if (!this.isOutputEnabled(level)) {\n            return;\n        }\n        let coloredMessage;\n        switch (level) {\n            case LogLevel.ERROR:\n                coloredMessage = chalk.red('ERROR: ' + msg);\n                break;\n            case LogLevel.WARN:\n                coloredMessage = chalk.magenta('WARNING: ' + msg);\n                break;\n            default:\n                coloredMessage = chalk.gray('* ' + msg);\n                break;\n        }\n        const outMsg = format(coloredMessage, ...params);\n        this.outputStream.write(outMsg + '\\n');\n    }\n\n    private isOutputEnabled(level: LogLevel): boolean {\n        let quietEnabled, verboseEnabled: boolean;\n        if (this._quiet && this._verbose) {\n            quietEnabled = false;\n            verboseEnabled = false;\n        } else {\n            quietEnabled = this._quiet;\n            verboseEnabled = this._verbose;\n        }\n        switch (level) {\n            case LogLevel.ERROR:\n                return true;    // always output errors\n            case LogLevel.WARN:\n                return (!quietEnabled);\n            case LogLevel.INFO:\n                return (verboseEnabled && !quietEnabled);\n            case LogLevel.DEBUG:\n                return verboseEnabled;\n            default:\n                return true;\n        }\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n */\n\nexport class XliffMergeError extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, XliffMergeError.prototype);\n    }\n}\n","import * as fs from 'fs';\n\n/**\n * Created by martin on 17.02.2017.\n * Some (a few) simple utils for file operations.\n * Just for convenience.\n */\n\nexport class FileUtil {\n\n    /**\n     * Check for existence.\n     * @param filename filename\n     * @return wether file exists\n     */\n    public static exists(filename: string) {\n        return fs.existsSync(filename);\n    }\n\n    /**\n     * Read a file.\n     * @param filename filename\n     * @param encoding encoding\n     * @return content of file\n     */\n    public static read(filename: string, encoding: string) {\n        return fs.readFileSync(filename, encoding);\n    }\n\n    /**\n     * Write a file with given content.\n     * @param filename filename\n     * @param newContent newContent\n     * @param encoding encoding\n     */\n    public static replaceContent(filename: string, newContent: string, encoding: string) {\n        fs.writeFileSync(filename, newContent, {encoding: encoding});\n    }\n\n    public static copy(srcFile: string, destFile: string) {\n        const BUF_LENGTH = 64 * 1024;\n        const buff = Buffer.alloc(BUF_LENGTH);\n        const fdr = fs.openSync(srcFile, 'r');\n        const fdw = fs.openSync(destFile, 'w');\n        let bytesRead = 1;\n        let pos = 0;\n        while (bytesRead > 0) {\n            bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\n            fs.writeSync(fdw, buff, 0, bytesRead);\n            pos += bytesRead;\n        }\n        fs.closeSync(fdr);\n        fs.closeSync(fdw);\n    }\n\n    /**\n     * Delete the folder and all of its content (rm -rf).\n     * @param path path\n     */\n    public static deleteFolderRecursive(path: string) {\n        let files = [];\n        if (fs.existsSync(path) ) {\n            files = fs.readdirSync(path);\n            files.forEach(function(file) {\n                const curPath = path + '/' + file;\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                    FileUtil.deleteFolderRecursive(curPath);\n                } else { // delete file\n                    fs.unlinkSync(curPath);\n                }\n            });\n            fs.rmdirSync(path);\n        }\n    }\n\n    /**\n     * Delete folders content recursively, but do not delete folder.\n     * Folder is left empty at the end.\n     * @param path path\n     */\n    public static deleteFolderContentRecursive(path: string) {\n        let files = [];\n        if (fs.existsSync(path) ) {\n            files = fs.readdirSync(path);\n            files.forEach(function(file) {\n                const curPath = path + '/' + file;\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                    FileUtil.deleteFolderRecursive(curPath);\n                } else { // delete file\n                    fs.unlinkSync(curPath);\n                }\n            });\n        }\n    }\n\n    /**\n     * Delete a file.\n     * @param path path\n     */\n    public static deleteFile(path: string) {\n        fs.unlinkSync(path);\n    }\n}\n","/**\n * Helper class to parse ngx translate extraction pattern\n * and to decide wether a given message matches the pattern.\n */\nexport class NgxTranslateExtractionPattern {\n\n    private _matchExplicitId: boolean;\n    private _descriptionPatterns: string[];\n\n    /**\n     * Construct the pattern from given description string\n     * @param extractionPatternString extractionPatternString\n     * @throws an error, if there is a syntax error\n     */\n    constructor(private extractionPatternString: string) {\n        const parts = extractionPatternString.split('|');\n        this._matchExplicitId = false;\n        this._descriptionPatterns = [];\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            if (part === '@@') {\n                if (this._matchExplicitId) {\n                    throw new Error('extraction pattern must not contain @@ twice');\n                }\n                this._matchExplicitId = true;\n            } else {\n                const errorString = this.checkValidDescriptionPattern(part);\n                if (errorString) {\n                    throw new Error(errorString);\n                }\n                this._descriptionPatterns.push(part);\n            }\n        }\n    }\n\n    /**\n     * Check, wether an explicitly set id matches the pattern.\n     * @param id id\n     * @return wether an explicitly set id matches the pattern.\n     */\n    public isExplicitIdMatched(id: string): boolean {\n        return id && this._matchExplicitId;\n    }\n\n    /**\n     * Check, wether a given description matches the pattern.\n     * @param description description\n     * @return wether a given description matches the pattern.\n     */\n    public isDescriptionMatched(description: string): boolean {\n        return this._descriptionPatterns.indexOf(description) >= 0;\n    }\n\n    private checkValidDescriptionPattern(descriptionPattern: string): string {\n        if (!descriptionPattern) {\n            return 'empty value not allowed';\n        }\n        if (/^[a-zA-Z_][a-zA-Z_-]*$/.test(descriptionPattern)) {\n            return null; // it is ok\n        } else {\n            return 'description pattern must be an identifier containing only letters, digits, _ or -';\n        }\n    }\n}\n","import {ITranslationMessagesFile, ITransUnit, NORMALIZATION_FORMAT_NGXTRANSLATE} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {FileUtil} from '../common/file-util';\nimport {isNullOrUndefined} from '../common/util';\nimport {NgxTranslateExtractionPattern} from './ngx-translate-extraction-pattern';\n/**\n * Created by roobm on 15.03.2017.\n * A tool for extracting messages in ngx-translate format.\n * Generates a json-file to be used with ngx-translate.\n */\n\n/**\n * The interface used for translations in ngx-translate.\n * A hash that contains either the translation or another hash.\n */\ninterface NgxTranslations {\n    [id: string]: NgxTranslations | string;\n}\n\n/**\n * internal,\n * a message with id (a dot-separated string).\n */\ninterface NgxMessage {\n    id: string; // dot separated name, e.g. \"myapp.service1.message1\"\n    message: string; // the message, placeholder are in {{n}} syntax, e.g. \"a test with value: {{0}}\n}\n\nexport class NgxTranslateExtractor {\n\n    public static DefaultExtractionPattern = '@@|ngx-translate';\n    private extractionPattern: NgxTranslateExtractionPattern;\n\n    /**\n     * Check, wether extractionPattern has valid syntax.\n     * @param extractionPatternString extractionPatternString\n     * @return null, if pattern is ok, string describing the error, if it is not ok.\n     */\n    public static checkPattern(extractionPatternString: string): string {\n        try {\n          if (new NgxTranslateExtractionPattern(extractionPatternString)) {\n              return null;\n          }\n        } catch (error) {\n            return error.message;\n        }\n        return null;\n    }\n\n    public static extract(messagesFile: ITranslationMessagesFile, extractionPattern: string, outputFile: string) {\n        new NgxTranslateExtractor(messagesFile, extractionPattern).extractTo(outputFile);\n    }\n\n    constructor(private messagesFile: ITranslationMessagesFile, extractionPatternString: string) {\n        this.extractionPattern = new NgxTranslateExtractionPattern(extractionPatternString);\n    }\n\n    /**\n     * Extact messages and write them to a file.\n     * @param outputFile outputFile\n     */\n    public extractTo(outputFile: string) {\n        const translations: NgxTranslations = this.toNgxTranslations(this.extract());\n        if (translations && Object.keys(translations).length > 0) {\n            FileUtil.replaceContent(outputFile, JSON.stringify(translations, null, 4), 'UTF-8');\n        } else {\n            if (FileUtil.exists(outputFile)) {\n                FileUtil.deleteFile(outputFile);\n            }\n        }\n    }\n\n    /**\n     *  Extract messages and convert them to ngx translations.\n     *  @return the translation objects.\n     */\n    private extract(): NgxMessage[] {\n        const result: NgxMessage[] = [];\n        this.messagesFile.forEachTransUnit((tu: ITransUnit) => {\n            const ngxId = this.ngxTranslateIdFromTU(tu);\n            if (ngxId) {\n                const messagetext = tu.targetContentNormalized().asDisplayString(NORMALIZATION_FORMAT_NGXTRANSLATE);\n                result.push({id: ngxId, message: messagetext});\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Check, wether this tu should be extracted for ngx-translate usage, and return its id for ngx-translate.\n     * There are 2 possibilities:\n     * 1. description is set to \"ngx-translate\" and meaning contains the id.\n     * 2. id is explicitly set to a string.\n     * @param tu tu\n     * @return an ngx id or null, if this tu should not be extracted.\n     */\n    private ngxTranslateIdFromTU(tu: ITransUnit): string {\n        if (this.isExplicitlySetId(tu.id)) {\n            if (this.extractionPattern.isExplicitIdMatched(tu.id)) {\n                return tu.id;\n            } else {\n                return null;\n            }\n        }\n        const description = tu.description();\n        if (description && this.extractionPattern.isDescriptionMatched(description)) {\n            return tu.meaning();\n        }\n    }\n\n    /**\n     * Test, wether ID was explicitly set (via i18n=\"@myid).\n     * Just heuristic, an ID is explicitly, if it does not look like a generated one.\n     * @param id id\n     * @return wether ID was explicitly set (via i18n=\"@myid).\n     */\n    private isExplicitlySetId(id: string): boolean {\n        if (isNullOrUndefined(id)) {\n            return false;\n        }\n        // generated IDs are either decimal or sha1 hex\n        const reForGeneratedId = /^[0-9a-f]{11,}$/;\n        return !reForGeneratedId.test(id);\n    }\n\n    /**\n     * Convert list of relevant TUs to ngx translations object.\n     * @param msgList msgList\n     */\n    private toNgxTranslations(msgList: NgxMessage[]): NgxTranslations {\n        const translationObject: NgxTranslations = {};\n        msgList.forEach((msg: NgxMessage) => {\n            this.putInTranslationObject(translationObject, msg);\n        });\n        return translationObject;\n    }\n\n    /**\n     * Put a new messages into the translation data object.\n     * If you add, e.g. \"{id: 'myapp.example', message: 'test'}\",\n     * the translation object will then contain an object myapp that has property example:\n     * {myapp: {\n     *   example: 'test'\n     *   }}\n     * @param translationObject translationObject\n     * @param msg msg\n     */\n    private putInTranslationObject(translationObject: NgxTranslations, msg: NgxMessage) {\n        let firstPartOfId: string;\n        let restOfId: string;\n        const indexOfDot = msg.id.indexOf('.');\n        if (indexOfDot === 0 || indexOfDot === (msg.id.length - 1)) {\n            throw new Error('bad nxg-translate id \"' + msg.id + '\"');\n        }\n        if (indexOfDot < 0) {\n            firstPartOfId = msg.id;\n            restOfId = '';\n        } else {\n            firstPartOfId = msg.id.substring(0, indexOfDot);\n            restOfId = msg.id.substring(indexOfDot + 1);\n        }\n        let object = translationObject[firstPartOfId];\n        if (isNullOrUndefined(object)) {\n            if (restOfId === '') {\n                translationObject[firstPartOfId] = msg.message;\n                return;\n            }\n            object = {};\n            translationObject[firstPartOfId] = object;\n        } else {\n            if (restOfId === '') {\n                throw new Error('duplicate id praefix \"' + msg.id + '\"');\n            }\n        }\n        this.putInTranslationObject(<NgxTranslations> object, {id: restOfId, message: msg.message});\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n * Collection of all parameters used by the tool.\n * The parameters are read form the profile or defaults are used.\n */\n\nimport * as fs from 'fs';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {Stats} from 'fs';\nimport {CommandOutput} from '../common/command-output';\nimport {format} from 'util';\nimport {isArray, isNullOrUndefined} from '../common/util';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {FileUtil} from '../common/file-util';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {dirname, isAbsolute, join, normalize} from 'path';\n\nconst PROFILE_CANDIDATES = ['package.json', '.angular-cli.json'];\n\nexport class XliffMergeParameters {\n\n    private usedProfilePath: string;\n    private _quiet: boolean;\n    private _verbose: boolean;\n    private _allowIdChange: boolean;\n    private _defaultLanguage: string;\n    private _srcDir: string;\n    private _i18nBaseFile: string;\n    private _i18nFile: string;\n    private _i18nFormat: string;\n    private _encoding: string;\n    private _genDir: string;\n    private _languages: string[];\n    private _removeUnusedIds: boolean;\n    private _supportNgxTranslate: boolean;\n    private _ngxTranslateExtractionPattern: string;\n    private _useSourceAsTarget: boolean;\n    private _targetPraefix: string;\n    private _targetSuffix: string;\n    private _beautifyOutput: boolean;\n    private _preserveOrder: boolean;\n    private _autotranslate: boolean|string[];\n    private _apikey: string;\n    private _apikeyfile: string;\n\n    public errorsFound: XliffMergeError[];\n    public warningsFound: string[];\n\n    /**\n     * Create Parameters.\n     * @param options command options\n     * @param profileContent given profile (if not, it is read from the profile path from options).\n     */\n    public static createFromOptions(options: ProgramOptions, profileContent?: IConfigFile) {\n        const parameters = new XliffMergeParameters();\n        parameters.configure(options, profileContent);\n        return parameters;\n    }\n\n    private constructor() {\n        this.errorsFound = [];\n        this.warningsFound = [];\n    }\n\n    /**\n     * Read potential profile.\n     * To be a candidate, file must exist and contain property \"xliffmergeOptions\".\n     * @param profilePath path of profile\n     * @return parsed content of file or null, if file does not exist or is not a profile candidate.\n     */\n    private static readProfileCandidate(profilePath: string): IConfigFile {\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            return null;\n        }\n        const parsedContent: IConfigFile = JSON.parse(content);\n        if (parsedContent && parsedContent.xliffmergeOptions) {\n            return parsedContent;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Initialize me from the profile content.\n     * (public only for test usage).\n     * @param options options given at runtime via command line\n     * @param profileContent if null, read it from profile.\n     */\n    private configure(options: ProgramOptions, profileContent?: IConfigFile) {\n        this.errorsFound = [];\n        this.warningsFound = [];\n        if (!profileContent) {\n            profileContent = this.readProfile(options);\n        }\n        const validProfile: boolean = (!!profileContent);\n        if (options.quiet) {\n            this._quiet = options.quiet;\n        }\n        if (options.verbose) {\n            this._verbose = options.verbose;\n        }\n        if (validProfile) {\n            this.initializeFromConfig(profileContent);\n            // if languages are given as parameters, they ovveride everything said in profile\n            if (!!options.languages && options.languages.length > 0) {\n                this._languages = options.languages;\n                if (!this._defaultLanguage) {\n                    this._defaultLanguage = this._languages[0];\n                }\n            }\n            this.checkParameters();\n        }\n    }\n\n    /**\n     * Read profile.\n     * @param options program options\n     * @return the read profile (empty, if none, null if errors)\n     */\n    private readProfile(options: ProgramOptions): IConfigFile {\n        const profilePath: string = options.profilePath;\n        if (!profilePath) {\n            for (const configfilename of PROFILE_CANDIDATES) {\n                const profile = XliffMergeParameters.readProfileCandidate(configfilename);\n                if (profile) {\n                    this.usedProfilePath = configfilename;\n                    return profile;\n                }\n            }\n            return {};\n        }\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('could not read profile \"' + profilePath + '\"'));\n            return null;\n        }\n        this.usedProfilePath = profilePath;\n        const profileContent: IConfigFile = JSON.parse(content);\n        // replace all pathes in options by absolute paths\n        const xliffmergeOptions = profileContent.xliffmergeOptions;\n        xliffmergeOptions.srcDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.srcDir);\n        xliffmergeOptions.genDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.genDir);\n        xliffmergeOptions.apikeyfile = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.apikeyfile);\n        return profileContent;\n    }\n\n    private adjustPathToProfilePath(profilePath: string, pathToAdjust: string | undefined): string | undefined {\n        if (!pathToAdjust || isAbsolute(pathToAdjust)) {\n            return pathToAdjust;\n        }\n        return join(dirname(profilePath), pathToAdjust).replace(/\\\\/g, '/');\n    }\n\n    private initializeFromConfig(profileContent: IConfigFile) {\n        if (!profileContent) {\n            return;\n        }\n        const profile = profileContent.xliffmergeOptions;\n        if (profile) {\n            if (!isNullOrUndefined(profile.quiet)) {\n                this._quiet = profile.quiet;\n            }\n            if (!isNullOrUndefined(profile.verbose)) {\n                this._verbose = profile.verbose;\n            }\n            if (!isNullOrUndefined(profile.allowIdChange)) {\n                this._allowIdChange = profile.allowIdChange;\n            }\n            if (profile.defaultLanguage) {\n                this._defaultLanguage = profile.defaultLanguage;\n            }\n            if (profile.languages) {\n                this._languages = profile.languages;\n            }\n            if (profile.srcDir) {\n                this._srcDir = profile.srcDir;\n            }\n            if (profile.angularCompilerOptions) {\n                if (profile.angularCompilerOptions.genDir) {\n                    this._genDir = profile.angularCompilerOptions.genDir;\n                }\n            }\n            if (profile.genDir) {\n                // this must be after angularCompilerOptions to be preferred\n                this._genDir = profile.genDir;\n            }\n            if (profile.i18nBaseFile) {\n                this._i18nBaseFile = profile.i18nBaseFile;\n            }\n            if (profile.i18nFile) {\n                this._i18nFile = profile.i18nFile;\n            }\n            if (profile.i18nFormat) {\n                this._i18nFormat = profile.i18nFormat;\n            }\n            if (profile.encoding) {\n                this._encoding = profile.encoding;\n            }\n            if (!isNullOrUndefined(profile.removeUnusedIds)) {\n                this._removeUnusedIds = profile.removeUnusedIds;\n            }\n            if (!isNullOrUndefined(profile.supportNgxTranslate)) {\n                this._supportNgxTranslate = profile.supportNgxTranslate;\n            }\n            if (!isNullOrUndefined(profile.ngxTranslateExtractionPattern)) {\n                this._ngxTranslateExtractionPattern = profile.ngxTranslateExtractionPattern;\n            }\n            if (!isNullOrUndefined(profile.useSourceAsTarget)) {\n                this._useSourceAsTarget = profile.useSourceAsTarget;\n            }\n            if (!isNullOrUndefined(profile.targetPraefix)) {\n                this._targetPraefix = profile.targetPraefix;\n            }\n            if (!isNullOrUndefined(profile.targetSuffix)) {\n                this._targetSuffix = profile.targetSuffix;\n            }\n            if (!isNullOrUndefined(profile.autotranslate)) {\n                this._autotranslate = profile.autotranslate;\n            }\n            if (!isNullOrUndefined(profile.beautifyOutput)) {\n                this._beautifyOutput = profile.beautifyOutput;\n            }\n            if (!isNullOrUndefined(profile.preserveOrder)) {\n                this._preserveOrder = profile.preserveOrder;\n            }\n            if (!isNullOrUndefined(profile.apikey)) {\n                this._apikey = profile.apikey;\n            }\n            if (!isNullOrUndefined(profile.apikeyfile)) {\n                this._apikeyfile = profile.apikeyfile;\n            }\n        } else {\n            this.warningsFound.push('did not find \"xliffmergeOptions\" in profile, using defaults');\n        }\n    }\n\n    /**\n     * Check all Parameters, wether they are complete and consistent.\n     * if something is wrong with the parameters, it is collected in errorsFound.\n     */\n    private checkParameters(): void {\n        this.checkLanguageSyntax(this.defaultLanguage());\n        if (this.languages().length === 0) {\n            this.errorsFound.push(new XliffMergeError('no languages specified'));\n        }\n        this.languages().forEach((lang) => {\n            this.checkLanguageSyntax(lang);\n        });\n        let stats: Stats;\n        let err: any;\n        // srcDir should exists\n        try {\n            stats = fs.statSync(this.srcDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('srcDir \"' + this.srcDir() + '\" is not a directory'));\n        }\n        // genDir should exists\n        try {\n            stats = fs.statSync(this.genDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('genDir \"' + this.genDir() + '\" is not a directory'));\n        }\n        // master file MUST exist\n        try {\n            fs.accessSync(this.i18nFile(), fs.constants.R_OK);\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('i18nFile \"' + this.i18nFile() + '\" is not readable'));\n        }\n        // i18nFormat must be xlf xlf2 or xmb\n        if (!(this.i18nFormat() === 'xlf' || this.i18nFormat() === 'xlf2' || this.i18nFormat() === 'xmb')) {\n            this.errorsFound.push(new XliffMergeError('i18nFormat \"' + this.i18nFormat() + '\" invalid, must be \"xlf\" or \"xlf2\" or \"xmb\"'));\n        }\n        // autotranslate requires api key\n        if (this.autotranslate() && !this.apikey()) {\n            this.errorsFound.push(new XliffMergeError('autotranslate requires an API key, please set one'));\n        }\n        // autotranslated languages must be in list of all languages\n        this.autotranslatedLanguages().forEach((lang) => {\n            if (this.languages().indexOf(lang) < 0) {\n                this.errorsFound.push(new XliffMergeError('autotranslate language \"' + lang + '\" is not in list of languages'));\n            }\n            if (lang === this.defaultLanguage()) {\n                this.errorsFound.push(\n                    new XliffMergeError('autotranslate language \"' + lang + '\" cannot be translated, because it is the source language'));\n            }\n        });\n        // ngx translate pattern check\n        if (this.supportNgxTranslate()) {\n            const checkResult = NgxTranslateExtractor.checkPattern(this.ngxTranslateExtractionPattern());\n            if (!isNullOrUndefined(checkResult)) {\n                this.errorsFound.push(\n                    new XliffMergeError('ngxTranslateExtractionPattern \"' + this.ngxTranslateExtractionPattern() + '\": ' + checkResult));\n            }\n        }\n        // targetPraefix and targetSuffix check\n        if (!this.useSourceAsTarget()) {\n            if (this.targetPraefix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetPraefix \"' + this.targetPraefix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n            if (this.targetSuffix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetSuffix \"' + this.targetSuffix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n        }\n     }\n\n    /**\n     * Check syntax of language.\n     * Must be compatible with XML Schema type xsd:language.\n     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\n     * @param lang language to check\n     */\n    private checkLanguageSyntax(lang: string) {\n        const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\n        if (!pattern.test(lang)) {\n            this.errorsFound.push(new XliffMergeError('language \"' + lang + '\" is not valid'));\n        }\n    }\n\n    public allowIdChange(): boolean {\n        return (isNullOrUndefined(this._allowIdChange)) ? false : this._allowIdChange;\n    }\n\n    public verbose(): boolean {\n        return (isNullOrUndefined(this._verbose)) ? false : this._verbose;\n    }\n\n    public quiet(): boolean {\n        return (isNullOrUndefined(this._quiet)) ? false : this._quiet;\n    }\n\n    /**\n     * Debug output all parameters to commandOutput.\n     */\n    public showAllParameters(commandOutput: CommandOutput): void {\n        commandOutput.debug('xliffmerge Used Parameters:');\n        commandOutput.debug('usedProfilePath:\\t\"%s\"', this.usedProfilePath);\n        commandOutput.debug('defaultLanguage:\\t\"%s\"', this.defaultLanguage());\n        commandOutput.debug('srcDir:\\t\"%s\"', this.srcDir());\n        commandOutput.debug('genDir:\\t\"%s\"', this.genDir());\n        commandOutput.debug('i18nBaseFile:\\t\"%s\"', this.i18nBaseFile());\n        commandOutput.debug('i18nFile:\\t\"%s\"', this.i18nFile());\n        commandOutput.debug('languages:\\t%s', this.languages());\n        for (const language of this.languages()) {\n            commandOutput.debug('outputFile[%s]:\\t%s', language, this.generatedI18nFile(language));\n        }\n        commandOutput.debug('removeUnusedIds:\\t%s', this.removeUnusedIds());\n        commandOutput.debug('supportNgxTranslate:\\t%s', this.supportNgxTranslate());\n        if (this.supportNgxTranslate()) {\n            commandOutput.debug('ngxTranslateExtractionPattern:\\t%s', this.ngxTranslateExtractionPattern());\n        }\n        commandOutput.debug('useSourceAsTarget:\\t%s', this.useSourceAsTarget());\n        if (this.useSourceAsTarget()) {\n            commandOutput.debug('targetPraefix:\\t\"%s\"', this.targetPraefix());\n            commandOutput.debug('targetSuffix:\\t\"%s\"', this.targetSuffix());\n        }\n        commandOutput.debug('allowIdChange:\\t%s', this.allowIdChange());\n        commandOutput.debug('beautifyOutput:\\t%s', this.beautifyOutput());\n        commandOutput.debug('preserveOrder:\\t%s', this.preserveOrder());\n        commandOutput.debug('autotranslate:\\t%s', this.autotranslate());\n        if (this.autotranslate()) {\n            commandOutput.debug('autotranslated languages:\\t%s', this.autotranslatedLanguages());\n            commandOutput.debug('apikey:\\t%s', this.apikey() ? '****' : 'NOT SET');\n            commandOutput.debug('apikeyfile:\\t%s', this.apikeyfile());\n        }\n    }\n\n    /**\n     * Default-Language, default en.\n     * @return default language\n     */\n    public defaultLanguage(): string {\n        return this._defaultLanguage ? this._defaultLanguage : 'en';\n    }\n\n    /**\n     * Liste der zu bearbeitenden Sprachen.\n     * @return languages\n     */\n    public languages(): string[] {\n        return this._languages ? this._languages : [];\n    }\n\n    /**\n     * src directory, where the master xlif is located.\n     * @return srcDir\n     */\n    public srcDir(): string {\n        return this._srcDir ? this._srcDir : '.';\n    }\n\n    /**\n     * The base file name of the xlif file for input and output.\n     * Default is messages\n     * @return base file\n     */\n    public i18nBaseFile(): string {\n        return this._i18nBaseFile ? this._i18nBaseFile : 'messages';\n    }\n\n    /**\n     * The master xlif file (the one generated by ng-xi18n).\n     * Default is <srcDir>/<i18nBaseFile>.xlf.\n     * @return master file\n     */\n    public i18nFile(): string {\n        return join(this.srcDir(),\n            (this._i18nFile ? this._i18nFile : this.i18nBaseFile() + '.' + this.suffixForGeneratedI18nFile())\n        ).replace(/\\\\/g, '/');\n    }\n\n    /**\n     * Format of the master xlif file.\n     * Default is \"xlf\", possible are \"xlf\" or \"xlf2\" or \"xmb\".\n     * @return format\n     */\n    public i18nFormat(): string {\n        return (this._i18nFormat ? this._i18nFormat : 'xlf');\n    }\n\n    /**\n     * potentially to be generated I18n-File with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedI18nFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + this.suffixForGeneratedI18nFile()).replace(/\\\\/g, '/');\n    }\n\n    private suffixForGeneratedI18nFile(): string {\n        switch (this.i18nFormat()) {\n            case 'xlf':\n                return 'xlf';\n            case 'xlf2':\n                return 'xlf';\n            case 'xmb':\n                return 'xtb';\n        }\n    }\n\n    /**\n     * potentially to be generated translate-File for ngx-translate with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + 'json').replace(/\\\\/g, '/');\n    }\n\n    /**\n     * The encoding used to write new XLIFF-files.\n     * @return encoding\n     */\n    public encoding(): string {\n        return this._encoding ? this._encoding : 'UTF-8';\n    }\n\n     /**\n      * Output-Directory, where the output is written to.\n      * Default is <srcDir>.\n     */\n    public genDir(): string {\n        return this._genDir ? this._genDir : this.srcDir();\n    }\n\n    public removeUnusedIds(): boolean {\n        return (isNullOrUndefined(this._removeUnusedIds)) ? true : this._removeUnusedIds;\n    }\n\n    public supportNgxTranslate(): boolean {\n        return (isNullOrUndefined(this._supportNgxTranslate)) ? false : this._supportNgxTranslate;\n    }\n\n    public ngxTranslateExtractionPattern(): string {\n        return (isNullOrUndefined(this._ngxTranslateExtractionPattern)) ?\n            NgxTranslateExtractor.DefaultExtractionPattern : this._ngxTranslateExtractionPattern;\n    }\n\n    /**\n     * Whether source must be used as target for new trans-units\n     * Default is true\n     */\n    public useSourceAsTarget(): boolean {\n        return (isNullOrUndefined(this._useSourceAsTarget)) ? true : this._useSourceAsTarget;\n    }\n\n    /**\n     * Praefix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetPraefix(): string {\n        return (isNullOrUndefined(this._targetPraefix)) ? '' : this._targetPraefix;\n    }\n\n    /**\n     * Suffix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetSuffix(): string {\n        return (isNullOrUndefined(this._targetSuffix)) ? '' : this._targetSuffix;\n    }\n\n    /**\n     * If set, run xml result through beautifier (pretty-data).\n     */\n    public beautifyOutput(): boolean {\n        return (isNullOrUndefined(this._beautifyOutput)) ? false : this._beautifyOutput;\n    }\n\n    /**\n     * If set, order of new trans units will be as in master.\n     * Otherwise they are added at the end.\n     */\n    public preserveOrder(): boolean {\n        return (isNullOrUndefined(this._preserveOrder)) ? true : this._preserveOrder;\n    }\n\n    /**\n     * Whether to use autotranslate for new trans-units\n     * Default is false\n     */\n    public autotranslate(): boolean {\n        if (isNullOrUndefined(this._autotranslate)) {\n            return false;\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate).length > 0;\n        }\n        return <boolean> this._autotranslate;\n    }\n\n    /**\n     * Whether to use autotranslate for a given language.\n     * @param lang language code.\n     */\n    public autotranslateLanguage(lang: string): boolean {\n        return this.autotranslatedLanguages().indexOf(lang) >= 0;\n    }\n\n    /**\n     * Return a list of languages to be autotranslated.\n     */\n    public autotranslatedLanguages(): string[] {\n        if (isNullOrUndefined(this._autotranslate) || this._autotranslate === false) {\n            return [];\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate);\n        }\n        return this.languages().slice(1); // first is source language\n    }\n\n    /**\n     * API key to be used for Google Translate\n     * @return api key\n     */\n    public apikey(): string {\n        if (!isNullOrUndefined(this._apikey)) {\n            return this._apikey;\n        } else {\n            const apikeyPath = this.apikeyfile();\n            if (this.apikeyfile()) {\n                if (fs.existsSync(apikeyPath)) {\n                    return FileUtil.read(apikeyPath, 'utf-8');\n                } else {\n                    throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));\n                }\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /**\n     * file name for API key to be used for Google Translate.\n     * Explicitly set or read from env var API_KEY_FILE.\n     * @return file of api key\n     */\n    public apikeyfile(): string {\n        if (this._apikeyfile) {\n            return this._apikeyfile;\n        } else if (process.env.API_KEY_FILE) {\n            return process.env.API_KEY_FILE;\n        } else {\n            return null;\n        }\n    }\n}\n","/**\n * Created by martin on 19.02.2017.\n */\nimport * as path from 'path';\n\nlet pkg = null;\ntry {\n    pkg = require(path.resolve(__dirname, '..', 'package.json'));\n} catch (e) {\n    try {\n        pkg = require(path.resolve(__dirname, '..', '..', 'package.json'));\n    } catch (e) {\n        pkg = null;\n    }\n}\n\nexport const VERSION = (pkg ? pkg.version : 'unknown');\n","import {FileUtil} from '../common/file-util';\n/**\n * Created by martin on 10.03.2017.\n * Helper class to read XMl with a correct encoding.\n */\n\nexport class XmlReader {\n    static DEFAULT_ENCODING = 'UTF-8';\n\n    /**\n     * Read an xml-File.\n     * @param path Path to file\n     * @param encoding optional encoding of the xml.\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\n     * @return file content and encoding found in the file.\n     */\n    public static readXmlFileContent(path: string, encoding?: string): {content: string, encoding: string} {\n        if (!encoding) {\n            encoding = XmlReader.DEFAULT_ENCODING;\n        }\n        let content: string = FileUtil.read(path, encoding);\n        const foundEncoding = XmlReader.encodingFromXml(content);\n        if (foundEncoding !== encoding) {\n            // read again with the correct encoding\n            content = FileUtil.read(path, foundEncoding);\n        }\n        return {\n            content: content,\n            encoding: foundEncoding\n        };\n    }\n\n    /**\n     * Read the encoding from the xml.\n     * xml File starts with .. encoding=\"..\"\n     * @param xmlString xmlString\n     * @return encoding\n     */\n    private static encodingFromXml(xmlString: string): string {\n        const index = xmlString.indexOf('encoding=\"');\n        if (index < 0) {\n            return this.DEFAULT_ENCODING; // default in xml if not explicitly set\n        }\n        const endIndex = xmlString.indexOf('\"', index + 10); // 10 = length of 'encoding=\"'\n        return xmlString.substring(index + 10, endIndex);\n    }\n\n}\n\n","/**\n * Created by roobm on 21.03.2017.\n */\nimport {TranslationMessagesFileFactory, ITranslationMessagesFile} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {FileUtil} from '../common/file-util';\nimport {XmlReader} from './xml-reader';\n\n/**\n * Helper class to read translation files depending on format.\n */\nexport class TranslationMessagesFileReader {\n\n    /**\n     * Read file function, result depends on format, either XliffFile or XmbFile.\n     * @param i18nFormat format\n     * @param path path\n     * @param encoding encoding\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @return XliffFile\n     */\n    public static fromFile(i18nFormat: string,\n                           path: string,\n                           encoding: string,\n                           optionalMasterFilePath?: string): ITranslationMessagesFile {\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\n        return TranslationMessagesFileFactory.fromFileContent(i18nFormat, xmlContent.content, path, xmlContent.encoding, optionalMaster);\n    }\n\n    /**\n     * Read file function, result depends on format, either XliffFile or XmbFile.\n     * @param path path\n     * @param encoding encoding\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @return XliffFile\n     */\n    public static fromUnknownFormatFile(path: string,\n                                        encoding: string,\n                                        optionalMasterFilePath?: string): ITranslationMessagesFile {\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\n        return TranslationMessagesFileFactory.fromUnknownFormatFileContent(xmlContent.content, path, xmlContent.encoding, optionalMaster);\n    }\n\n    /**\n     * Read master xmb file\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @param encoding encoding\n     * @return content and encoding of file\n     */\n    private static masterFileContent(optionalMasterFilePath: string, encoding: string)\n        : {xmlContent: string, path: string, encoding: string} {\n        if (optionalMasterFilePath) {\n            const masterXmlContent = XmlReader.readXmlFileContent(optionalMasterFilePath, encoding);\n            return {\n                xmlContent: masterXmlContent.content,\n                path: optionalMasterFilePath,\n                encoding: masterXmlContent.encoding\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Save edited file.\n     * @param messagesFile messagesFile\n     * @param beautifyOutput Flag whether to use pretty-data to format the output.\n     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.\n     * See issue #64 for details.\n     * Default is false.\n     */\n    public static save(messagesFile: ITranslationMessagesFile, beautifyOutput?: boolean) {\n        FileUtil.replaceContent(messagesFile.filename(), messagesFile.editedContent(beautifyOutput), messagesFile.encoding());\n    }\n}\n\n","import {format} from 'util';\nimport * as request from 'request';\nimport {Observable} from 'rxjs';\nimport {of, forkJoin, throwError} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * Created by roobm on 03.07.2017.\n * Low Level Service to call Google Translate.\n */\n\n/**\n * Types form google translate api.\n */\n\ninterface GetSupportedLanguagesRequest {\n    target: string; // The language to use to return localized, human readable names of supported\\nlanguages.\n}\n\ninterface LanguagesResource {\n    language: string; // code of the language\n    name: string; // human readable name (in target language)\n}\n\ninterface LanguagesListResponse {\n    languages: LanguagesResource[];\n}\n\ninterface TranslateTextRequest {\n    q: string[];  // The input texts to translate\n    target: string; // The language to use for translation of the input text\n    source: string; // The language of the source text\n    format?: string; // \"html\" (default) or \"text\"\n    model?: string; // see public documentation\n}\n\ninterface TranslationsResource {\n    detectedSourceLanguage?: string;\n    model?: string;\n    translatedText: string;\n}\n\ninterface TranslationsListResponse {\n    translations: TranslationsResource[];\n}\n\ninterface InternalRequestResponse {\n    response: request.RequestResponse;\n    body: any;\n}\n\nconst MAX_SEGMENTS = 128;\n\nexport class AutoTranslateService {\n\n    private _request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;\n    _rootUrl: string;\n    _apiKey: string;\n\n    /**\n     * Strip region code and convert to lower\n     * @param lang lang\n     * @return lang without region code and in lower case.\n     */\n    public static stripRegioncode(lang: string): string {\n        const langLower = lang.toLowerCase();\n        for (let i = 0; i < langLower.length; i++) {\n            const c = langLower.charAt(i);\n            if (c < 'a' || c > 'z') {\n                return langLower.substring(0, i);\n            }\n        }\n        return langLower;\n    }\n\n    constructor(apiKey: string) {\n        this._request = request;\n        this._apiKey = apiKey;\n        this._rootUrl = 'https://translation.googleapis.com/';\n    }\n\n    /**\n     * Change API key (just for tests).\n     * @param apikey apikey\n     */\n    public setApiKey(apikey: string) {\n        this._apiKey = apikey;\n    }\n\n    /**\n     * Translate an array of messages at once.\n     * @param messages the messages to be translated\n     * @param from source language code\n     * @param to target language code\n     * @return Observable with translated messages or error\n     */\n    public translateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        // empty array needs no translation and always works ... (#78)\n        if (messages.length === 0) {\n            return of([]);\n        }\n        if (!this._apiKey) {\n            return throwError('cannot autotranslate: no api key');\n        }\n        if (!from || !to) {\n            return throwError('cannot autotranslate: source and target language must be set');\n        }\n        from = AutoTranslateService.stripRegioncode(from);\n        to = AutoTranslateService.stripRegioncode(to);\n        const allRequests: Observable<string[]>[] = this.splitMessagesToGoogleLimit(messages).map((partialMessages: string[]) => {\n            return this.limitedTranslateMultipleStrings(partialMessages, from, to);\n        });\n        return forkJoin(allRequests).pipe(\n            map((allTranslations: string[][]) => {\n                let all = [];\n                for (let i = 0; i < allTranslations.length; i++) {\n                    all = all.concat(allTranslations[i]);\n                }\n                return all;\n        }));\n    }\n\n    private splitMessagesToGoogleLimit(messages: string[]): string[][] {\n        if (messages.length <= MAX_SEGMENTS) {\n            return [messages];\n        }\n        const result = [];\n        let currentPackage = [];\n        let packageSize = 0;\n        for (let i = 0; i < messages.length; i++) {\n            currentPackage.push(messages[i]);\n            packageSize++;\n            if (packageSize >= MAX_SEGMENTS) {\n                result.push(currentPackage);\n                currentPackage = [];\n                packageSize = 0;\n            }\n        }\n        if (currentPackage.length > 0) {\n            result.push(currentPackage);\n        }\n        return result;\n    }\n\n    /**\n     * Return translation request, but messages must be limited to google limits.\n     * Not more that 128 single messages.\n     * @param messages messages\n     * @param from from\n     * @param to to\n     * @return the translated strings\n     */\n    private limitedTranslateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        const realUrl = this._rootUrl + 'language/translate/v2' + '?key=' + this._apiKey;\n        const translateRequest: TranslateTextRequest = {\n            q: messages,\n            target: to,\n            source: from,\n        };\n        const options = {\n            url: realUrl,\n            body: translateRequest,\n            json: true,\n//            proxy: 'http://127.0.0.1:8888' To set a proxy use env var HTTPS_PROXY\n        };\n        return this.post(realUrl, options).pipe(\n            map((data) => {\n            const body: any = data.body;\n            if (!body) {\n                throw new Error('no result received');\n            }\n            if (body.error) {\n                if (body.error.code === 400) {\n                    if (body.error.message === 'Invalid Value') {\n                        throw new Error(format('Translation from \"%s\" to \"%s\" not supported', from, to));\n                    }\n                    throw new Error(format('Invalid request: %s', body.error.message));\n                } else {\n                    throw new Error(format('Error %s: %s', body.error.code, body.error.message));\n                }\n            }\n            const result = body.data;\n            return result.translations.map((translation: TranslationsResource) => {\n                return translation.translatedText;\n            });\n        }));\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     */\n    post(uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> this._call.apply(this, [].concat('post', <string> uri,\n            <request.CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method method\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     *\n     */\n    private _call(method: string, uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> Observable.create((observer) => {\n            // build params array\n            const params = [].concat(<string> uri, <request.CoreOptions> Object.assign({}, options || {}),\n                <RequestCallback>(error: any, response: request.RequestResponse, body: any) => {\n                    if (error) {\n                        return observer.error(error);\n                    }\n\n                    observer.next(<InternalRequestResponse> Object.assign({}, {\n                        response: <request.RequestResponse> response,\n                        body: <any> body\n                    }));\n                    observer.complete();\n                });\n\n            // _call request method\n            try {\n                this._request[<string> method].apply(\n                    <request.RequestAPI<request.Request,\n                    request.CoreOptions,\n                    request.RequiredUriUrl>> this._request,\n                    params);\n            } catch (error) {\n                observer.error(error);\n            }\n        });\n    }\n}\n","/**\n * Created by martin on 29.06.2017.\n */\n\nexport class AutoTranslateResult {\n\n  constructor(private _success: boolean, private _details: string) {\n\n  }\n\n  public success(): boolean {\n    return this._success;\n  }\n}\n","import {AutoTranslateResult} from './auto-translate-result';\nimport {format} from 'util';\nimport {ITransUnit} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\n\n/**\n * A report about a run of Google Translate over all untranslated unit.\n * * Created by martin on 29.06.2017.\n */\n\nexport class AutoTranslateSummaryReport {\n\n  private _error: string;\n  private _from: string;\n  private _to: string;\n  private _total: number;\n  private _ignored: number;\n  private _success: number;\n  private _failed: number;\n\n  constructor(from: string, to: string) {\n    this._from = from;\n    this._to = to;\n    this._total = 0;\n    this._ignored = 0;\n    this._success = 0;\n    this._failed = 0;\n  }\n\n  /**\n   * Set error if total call failed (e.g. \"invalid api key\" or \"no connection\" ...)\n   * @param error error\n   * @param total total\n   */\n  public setError(error: string, total: number) {\n    this._error = error;\n    this._total = total;\n    this._failed = total;\n  }\n\n  public error(): string {\n    return this._error;\n  }\n\n  public setIgnored(ignored: number) {\n    this._total += ignored;\n    this._ignored = ignored;\n  }\n\n  /**\n   * Add a single result to the summary.\n   * @param tu tu\n   * @param result result\n   */\n  public addSingleResult(tu: ITransUnit, result: AutoTranslateResult) {\n    this._total++;\n    if (result.success()) {\n      this._success++;\n    } else {\n      this._failed++;\n    }\n  }\n\n  /**\n   * Merge another summary into this one.\n   * @param anotherSummary anotherSummary\n   */\n  public merge(anotherSummary: AutoTranslateSummaryReport) {\n    if (!this._error) {\n      this._error = anotherSummary._error;\n    }\n    this._total += anotherSummary.total();\n    this._ignored += anotherSummary.ignored();\n    this._success += anotherSummary.success();\n    this._failed += anotherSummary.failed();\n  }\n\n  public total(): number {\n    return this._total;\n  }\n\n  public ignored(): number {\n    return this._ignored;\n  }\n\n  public success(): number {\n    return this._success;\n  }\n\n  public failed(): number {\n    return this._failed;\n  }\n\n  /**\n   * Human readable version of report\n   */\n  public content(): string {\n    let result;\n    if (this._error) {\n      result = format('Auto translation from \"%s\" to \"%s\" failed: \"%s\", failed units: %s', this._from, this._to, this._error, this._failed);\n    } else {\n      result = format('Auto translation from \"%s\" to \"%s\", total auto translated units: %s, ignored: %s, succesful: %s, failed: %s',\n          this._from, this._to, this._total, this._ignored, this._success, this._failed);\n    }\n    return result;\n  }\n}\n","import {isNullOrUndefined} from '../common/util';\nimport {Observable, forkJoin, of} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport * as entityDecoderLib from 'he';\nimport {\n    IICUMessage, IICUMessageTranslation, INormalizedMessage, ITranslationMessagesFile, ITransUnit,\n    STATE_NEW\n} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {AutoTranslateService} from './auto-translate-service';\nimport {AutoTranslateResult} from './auto-translate-result';\nimport {AutoTranslateSummaryReport} from './auto-translate-summary-report';\n/**\n * Created by martin on 07.07.2017.\n * Service to autotranslate Transunits via Google Translate.\n */\n\nexport class XliffMergeAutoTranslateService {\n\n    private autoTranslateService: AutoTranslateService;\n\n    constructor(apikey: string) {\n        this.autoTranslateService = new AutoTranslateService(apikey);\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    public autoTranslate(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        return forkJoin([\n            this.doAutoTranslateNonICUMessages(from, to, languageSpecificMessagesFile),\n            ...this.doAutoTranslateICUMessages(from, to, languageSpecificMessagesFile)])\n            .pipe(\n                map((summaries: AutoTranslateSummaryReport[]) => {\n                    const summary = summaries[0];\n                    for (let i = 1; i < summaries.length; i++) {\n                        summary.merge(summaries[i]);\n                    }\n                    return summary;\n        }));\n    }\n\n    /**\n     * Collect all units that are untranslated.\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return all untranslated units\n     */\n    private allUntranslatedTUs(languageSpecificMessagesFile: ITranslationMessagesFile): ITransUnit[] {\n        // collect all units, that should be auto translated\n        const allUntranslated: ITransUnit[] = [];\n        languageSpecificMessagesFile.forEachTransUnit((tu) => {\n            if (tu.targetState() === STATE_NEW) {\n                allUntranslated.push(tu);\n            }\n        });\n        return allUntranslated;\n    }\n\n    private doAutoTranslateNonICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatable = allUntranslated.filter((tu) => isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        const allMessages: string[] = allTranslatable.map((tu) => {\n            return tu.sourceContentNormalized().asDisplayString();\n        });\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                const summary = new AutoTranslateSummaryReport(from, to);\n                summary.setIgnored(allUntranslated.length - allTranslatable.length);\n                for (let i = 0; i < translations.length; i++) {\n                    const tu = allTranslatable[i];\n                    const translationText = translations[i];\n                    const result = this.autoTranslateNonICUUnit(tu, translationText);\n                    summary.addSingleResult(tu, result);\n                }\n                return summary;\n                }),\n                catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private doAutoTranslateICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport>[] {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatableICU = allUntranslated.filter((tu) => !isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        return allTranslatableICU.map((tu) => {\n            return this.doAutoTranslateICUMessage(from, to, tu);\n        });\n    }\n\n    /**\n     * Translate single ICU Messages.\n     * @param from from\n     * @param to to\n     * @param tu transunit to translate (must contain ICU Message)\n     * @return summary report\n     */\n    private doAutoTranslateICUMessage(from: string, to: string, tu: ITransUnit): Observable<AutoTranslateSummaryReport> {\n        const icuMessage: IICUMessage = tu.sourceContentNormalized().getICUMessage();\n        const categories = icuMessage.getCategories();\n        // check for nested ICUs, we do not support that\n        if (categories.find((category) => !isNullOrUndefined(category.getMessageNormalized().getICUMessage()))) {\n            const summary = new AutoTranslateSummaryReport(from, to);\n            summary.setIgnored(1);\n            return of(summary);\n        }\n        const allMessages: string[] = categories.map((category) => category.getMessageNormalized().asDisplayString());\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                    const summary = new AutoTranslateSummaryReport(from, to);\n                    const icuTranslation: IICUMessageTranslation = {};\n                    for (let i = 0; i < translations.length; i++) {\n                        icuTranslation[categories[i].getCategory()] = translations[i];\n                    }\n                    const result = this.autoTranslateICUUnit(tu, icuTranslation);\n                    summary.addSingleResult(tu, result);\n                    return summary;\n                }), catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private autoTranslateNonICUUnit(tu: ITransUnit, translatedMessage: string): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translate(translatedMessage));\n    }\n\n    private autoTranslateICUUnit(tu: ITransUnit, translation: IICUMessageTranslation): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translateICUMessage(translation));\n    }\n\n    private autoTranslateUnit(tu: ITransUnit, translatedMessage: INormalizedMessage): AutoTranslateResult {\n        const errors = translatedMessage.validate();\n        const warnings = translatedMessage.validateWarnings();\n        if (!isNullOrUndefined(errors)) {\n            return new AutoTranslateResult(false, 'errors detected, not translated');\n        } else if (!isNullOrUndefined(warnings)) {\n            return new AutoTranslateResult(false, 'warnings detected, not translated');\n        } else {\n            tu.translate(translatedMessage);\n            return new AutoTranslateResult(true, null); // success\n        }\n    }\n}\n","import {CommandOutput} from '../common/command-output';\nimport {XliffMergeParameters} from './xliff-merge-parameters';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {FileUtil} from '../common/file-util';\nimport {VERSION} from './version';\nimport {format} from 'util';\nimport {isNullOrUndefined} from '../common/util';\nimport {ITranslationMessagesFile, ITransUnit,\n    FORMAT_XMB, FORMAT_XTB,\n    NORMALIZATION_FORMAT_DEFAULT, STATE_FINAL, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\nimport {Observable, of, forkJoin} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport {XliffMergeAutoTranslateService} from '../autotranslate/xliff-merge-auto-translate-service';\nimport {AutoTranslateSummaryReport} from '../autotranslate/auto-translate-summary-report';\n\n/**\n * Created by martin on 17.02.2017.\n * XliffMerge - read xliff or xmb file and put untranslated parts in language specific xliff or xmb files.\n *\n */\n\nexport class XliffMerge {\n\n    private readonly commandOutput: CommandOutput;\n\n    private readonly options: ProgramOptions;\n\n    private parameters: XliffMergeParameters;\n\n    /**\n     * The read master xlf file.\n     */\n    private master: ITranslationMessagesFile; // XliffFile or Xliff2File or XmbFile\n\n    private autoTranslateService: XliffMergeAutoTranslateService;\n\n    static main(argv: string[]) {\n        const options = XliffMerge.parseArgs(argv);\n        if (options) {\n            new XliffMerge(new CommandOutput(process.stdout), options).run((result) => {\n                process.exit(result);\n            });\n        }\n    }\n\n    static parseArgs(argv: string[]): ProgramOptions {\n        const options: ProgramOptions = {\n            languages: []\n        };\n        for (let i = 2; i < argv.length; i++) {\n            const arg = argv[i];\n            if (arg === '--version' || arg === '-version') {\n                console.log('xliffmerge ' + VERSION);\n            } else if (arg === '--verbose' || arg === '-v') {\n                options.verbose = true;\n            } else if (arg === '--profile' || arg === '-p') {\n                i++;\n                if (i >= argv.length) {\n                    console.log('missing config file');\n                    XliffMerge.showUsage();\n                    return null;\n                } else {\n                    options.profilePath = argv[i];\n                }\n            } else if (arg === '--quiet' || arg === '-q') {\n                options.quiet = true;\n            } else if (arg === '--help' || arg === '-help' || arg === '-h') {\n                XliffMerge.showUsage();\n            } else if (arg.length > 0 && arg.charAt(0) === '-') {\n                console.log('unknown option');\n                return null;\n            } else {\n                options.languages.push(arg);\n            }\n        }\n        return options;\n    }\n\n    static showUsage() {\n        console.log('usage: xliffmerge <option>* <language>*');\n        console.log('Options');\n        console.log('\\t-p|--profile a json configuration file containing all relevant parameters.');\n        console.log('\\t\\tfor details please consult the home page https://github.com/martinroob/ngx-i18nsupport');\n        console.log('\\t-v|--verbose show some output for debugging purposes');\n        console.log('\\t-q|--quiet only show errors, nothing else');\n        console.log('\\t-version|--version show version string');\n        console.log('');\n        console.log('\\t<language> has to be a valid language short string, e,g. \"en\", \"de\", \"de-ch\"');\n    }\n\n    /**\n     * For Tests, create instance with given profile\n     * @param commandOutput commandOutput\n     * @param options options\n     * @param profileContent profileContent\n     */\n    public static createFromOptions(commandOutput: CommandOutput, options: ProgramOptions, profileContent?: IConfigFile) {\n        const instance = new XliffMerge(commandOutput, options);\n        instance.parameters = XliffMergeParameters.createFromOptions(options, profileContent);\n        return instance;\n    }\n\n    constructor(commandOutput: CommandOutput, options: ProgramOptions) {\n        this.commandOutput = commandOutput;\n        this.options = options;\n        this.parameters = null;\n    }\n\n    /**\n     * Run the command.\n     * This runs async.\n     * @param callbackFunction when command is executed, called with the return code (0 for ok), if given.\n     * @param errorFunction callbackFunction for error handling\n     */\n    public run(callbackFunction?: ((retcode: number) => any), errorFunction?: ((error: any) => any)) {\n        this.runAsync()\n            .subscribe((retcode: number) => {\n                if (!isNullOrUndefined(callbackFunction)) {\n                    callbackFunction(retcode);\n                }\n            }, (error) => {\n                if (!isNullOrUndefined(errorFunction)) {\n                    errorFunction(error);\n                }\n            });\n    }\n\n    /**\n     * Execute merge-Process.\n     * @return Async operation, on completion returns retcode 0=ok, other = error.\n     */\n    public runAsync(): Observable<number> {\n        if (this.options && this.options.quiet) {\n            this.commandOutput.setQuiet();\n        }\n        if (this.options && this.options.verbose) {\n            this.commandOutput.setVerbose();\n        }\n        if (!this.parameters) {\n            this.parameters = XliffMergeParameters.createFromOptions(this.options);\n        }\n        this.commandOutput.info('xliffmerge version %s', VERSION);\n        if (this.parameters.verbose()) {\n            this.parameters.showAllParameters(this.commandOutput);\n        }\n        if (this.parameters.errorsFound.length > 0) {\n            for (const err of this.parameters.errorsFound) {\n                this.commandOutput.error(err.message);\n            }\n            return of(-1);\n        }\n        if (this.parameters.warningsFound.length > 0) {\n            for (const warn of this.parameters.warningsFound) {\n                this.commandOutput.warn(warn);\n            }\n        }\n        this.readMaster();\n        if (this.parameters.autotranslate()) {\n            this.autoTranslateService = new XliffMergeAutoTranslateService(this.parameters.apikey());\n        }\n        const executionForAllLanguages: Observable<number>[] = [];\n        this.parameters.languages().forEach((lang: string) => {\n            executionForAllLanguages.push(this.processLanguage(lang));\n        });\n        return forkJoin(executionForAllLanguages).pipe(\n            map((retcodes: number[]) => this.totalRetcode(retcodes)));\n    }\n\n    /**\n     * Give an array of retcodes for the different languages, return the total retcode.\n     * If all are 0, it is 0, otherwise the first non zero.\n     * @param retcodes retcodes\n     * @return number\n     */\n    private totalRetcode(retcodes: number[]): number {\n        for (let i = 0; i < retcodes.length; i++) {\n            if (retcodes[i] !== 0) {\n                return retcodes[i];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Return the name of the generated file for given lang.\n     * @param lang language\n     * @return name of generated file\n     */\n    public generatedI18nFile(lang: string): string {\n        return this.parameters.generatedI18nFile(lang);\n    }\n\n    /**\n     * Return the name of the generated ngx-translation file for given lang.\n     * @param lang language\n     * @return name of translate file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return this.parameters.generatedNgxTranslateFile(lang);\n    }\n\n    /**\n     * Warnings found during the run.\n     * @return warnings\n     */\n    public warnings(): string[] {\n        return this.parameters.warningsFound;\n    }\n\n    private readMaster() {\n        try {\n            this.master = TranslationMessagesFileReader.fromFile(\n                this.parameters.i18nFormat(),\n                this.parameters.i18nFile(),\n                this.parameters.encoding());\n            this.master.warnings().forEach((warning: string) => {\n                this.commandOutput.warn(warning);\n            });\n            const count = this.master.numberOfTransUnits();\n            const missingIdCount = this.master.numberOfTransUnitsWithMissingId();\n            this.commandOutput.info('master contains %s trans-units', count);\n            if (missingIdCount > 0) {\n                this.commandOutput.warn('master contains %s trans-units, but there are %s without id', count, missingIdCount);\n            }\n            const sourceLang: string = this.master.sourceLanguage();\n            if (sourceLang && sourceLang !== this.parameters.defaultLanguage()) {\n                this.commandOutput.warn(\n                    'master says to have source-language=\"%s\", should be \"%s\" (your defaultLanguage)',\n                    sourceLang,\n                    this.parameters.defaultLanguage());\n                this.master.setSourceLanguage(this.parameters.defaultLanguage());\n                TranslationMessagesFileReader.save(this.master, this.parameters.beautifyOutput());\n                this.commandOutput.warn('changed master source-language=\"%s\" to \"%s\"', sourceLang, this.parameters.defaultLanguage());\n            }\n        } catch (err) {\n            if (err instanceof XliffMergeError) {\n                this.commandOutput.error(err.message);\n                return of(-1);\n            } else {\n                // unhandled\n                const currentFilename = this.parameters.i18nFile();\n                const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                this.commandOutput.error(filenameString + 'oops ' + err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * Process the given language.\n     * Async operation.\n     * @param lang language\n     * @return on completion 0 for ok, other for error\n     */\n    private processLanguage(lang: string): Observable<number> {\n        this.commandOutput.debug('processing language %s', lang);\n        const languageXliffFile = this.parameters.generatedI18nFile(lang);\n        const currentFilename = languageXliffFile;\n        let result: Observable<void>;\n        if (!FileUtil.exists(languageXliffFile)) {\n            result = this.createUntranslatedXliff(lang, languageXliffFile);\n        } else {\n            result = this.mergeMasterTo(lang, languageXliffFile);\n        }\n        return result\n            .pipe(map(() => {\n                if (this.parameters.supportNgxTranslate()) {\n                    const languageSpecificMessagesFile: ITranslationMessagesFile =\n                        TranslationMessagesFileReader.fromFile(\n                            this.translationFormat(this.parameters.i18nFormat()),\n                            languageXliffFile,\n                            this.parameters.encoding(),\n                            this.master.filename());\n                    NgxTranslateExtractor.extract(\n                        languageSpecificMessagesFile,\n                        this.parameters.ngxTranslateExtractionPattern(),\n                        this.parameters.generatedNgxTranslateFile(lang));\n                }\n                return 0;\n            }), catchError((err) => {\n                if (err instanceof XliffMergeError) {\n                    this.commandOutput.error(err.message);\n                    return of(-1);\n                } else {\n                    // unhandled\n                    const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                    this.commandOutput.error(filenameString + 'oops ' + err);\n                    throw err;\n                }\n            }));\n    }\n\n    /**\n     * create a new file for the language, which contains no translations, but all keys.\n     * in principle, this is just a copy of the master with target-language set.\n     * @param lang language\n     * @param languageXliffFilePath name of file\n     */\n    private createUntranslatedXliff(lang: string, languageXliffFilePath: string): Observable<void> {\n        // copy master ...\n        // and set target-language\n        // and copy source to target if necessary\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        this.master.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        this.master.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            this.master.createTranslationFileForLang(lang, languageXliffFilePath, isDefaultLang, this.parameters.useSourceAsTarget());\n        return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile).pipe(\n            map((/* summary */) => {\n            // write it to file\n            TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n            this.commandOutput.info('created new file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n            if (!isDefaultLang) {\n                this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n            }\n            return null;\n        }));\n    }\n\n    /**\n     * Map the input format to the format of the translation.\n     * Normally they are the same but for xmb the translation format is xtb.\n     * @param i18nFormat format\n     */\n    private translationFormat(i18nFormat: string): string {\n        if (i18nFormat === FORMAT_XMB) {\n            return FORMAT_XTB;\n        } else {\n            return i18nFormat;\n        }\n    }\n\n    /**\n     * Merge all\n     * @param lang language\n     * @param languageXliffFilePath filename\n     */\n    private mergeMasterTo(lang: string, languageXliffFilePath: string): Observable<void> {\n        // read lang specific file\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            TranslationMessagesFileReader.fromFile(\n                this.translationFormat(this.parameters.i18nFormat()),\n                languageXliffFilePath,\n                this.parameters.encoding());\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        let newCount = 0;\n        let correctSourceContentCount = 0;\n        let correctSourceRefCount = 0;\n        let correctDescriptionOrMeaningCount = 0;\n        let idChangedCount = 0;\n        languageSpecificMessagesFile.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        languageSpecificMessagesFile.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        let lastProcessedUnit: ITransUnit = null;\n        this.master.forEachTransUnit((masterTransUnit) => {\n            const transUnit: ITransUnit = languageSpecificMessagesFile.transUnitWithId(masterTransUnit.id);\n\n            if (!transUnit) {\n                // oops, no translation, must be a new key, so add it\n                let newUnit;\n                if (this.parameters.allowIdChange()\n                    && (newUnit = this.processChangedIdUnit(masterTransUnit, languageSpecificMessagesFile, lastProcessedUnit))) {\n                    lastProcessedUnit = newUnit;\n                    idChangedCount++;\n                } else {\n                    lastProcessedUnit = languageSpecificMessagesFile.importNewTransUnit(\n                        masterTransUnit,\n                        isDefaultLang,\n                        this.parameters.useSourceAsTarget(),\n                        (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n                    newCount++;\n                }\n            } else {\n                // check for changed source content and change it if needed\n                // (can only happen if ID is explicitely set, otherwise ID would change if source content is changed.\n                if (transUnit.supportsSetSourceContent() && !this.areSourcesNearlyEqual(masterTransUnit, transUnit)) {\n                    transUnit.setSourceContent(masterTransUnit.sourceContent());\n                    if (isDefaultLang) {\n                        // #81 changed source must be copied to target for default lang\n                        transUnit.translate(masterTransUnit.sourceContent());\n                        transUnit.setTargetState(STATE_FINAL);\n                    } else {\n                        if (transUnit.targetState() === STATE_FINAL) {\n                            // source is changed, so translation has to be checked again\n                            transUnit.setTargetState(STATE_TRANSLATED);\n                        }\n                    }\n                    correctSourceContentCount++;\n                }\n                // check for missing or changed source ref and add it if needed\n                if (transUnit.supportsSetSourceReferences()\n                    && !this.areSourceReferencesEqual(masterTransUnit.sourceReferences(), transUnit.sourceReferences())) {\n                    transUnit.setSourceReferences(masterTransUnit.sourceReferences());\n                    correctSourceRefCount++;\n                }\n                // check for changed description or meaning\n                if (transUnit.supportsSetDescriptionAndMeaning()) {\n                    let changed = false;\n                    if (transUnit.description() !== masterTransUnit.description()) {\n                        transUnit.setDescription(masterTransUnit.description());\n                        changed = true;\n                    }\n                    if (transUnit.meaning() !== masterTransUnit.meaning()) {\n                        transUnit.setMeaning(masterTransUnit.meaning());\n                        changed = true;\n                    }\n                    if (changed) {\n                        correctDescriptionOrMeaningCount++;\n                    }\n                }\n                lastProcessedUnit = transUnit;\n            }\n        });\n        if (newCount > 0) {\n            this.commandOutput.warn('merged %s trans-units from master to \"%s\"', newCount, lang);\n        }\n        if (correctSourceContentCount > 0) {\n            this.commandOutput.warn('transferred %s changed source content from master to \"%s\"', correctSourceContentCount, lang);\n        }\n        if (correctSourceRefCount > 0) {\n            this.commandOutput.warn('transferred %s source references from master to \"%s\"', correctSourceRefCount, lang);\n        }\n        if (idChangedCount > 0) {\n            this.commandOutput.warn('found %s changed id\\'s in \"%s\"', idChangedCount, lang);\n        }\n        if (correctDescriptionOrMeaningCount > 0) {\n            this.commandOutput.warn(\n                'transferred %s changed descriptions/meanings from master to \"%s\"', correctDescriptionOrMeaningCount, lang);\n        }\n\n        // remove all elements that are no longer used\n        let removeCount = 0;\n        languageSpecificMessagesFile.forEachTransUnit((transUnit: ITransUnit) => {\n            const existsInMaster = !isNullOrUndefined(this.master.transUnitWithId(transUnit.id));\n            if (!existsInMaster) {\n                if (this.parameters.removeUnusedIds()) {\n                    languageSpecificMessagesFile.removeTransUnitWithId(transUnit.id);\n                }\n                removeCount++;\n            }\n        });\n        if (removeCount > 0) {\n            if (this.parameters.removeUnusedIds()) {\n                this.commandOutput.warn('removed %s unused trans-units in \"%s\"', removeCount, lang);\n            } else {\n                this.commandOutput.warn('keeping %s unused trans-units in \"%s\", because removeUnused is disabled', removeCount, lang);\n            }\n        }\n\n        if (newCount === 0 && removeCount === 0 && correctSourceContentCount === 0\n            && correctSourceRefCount === 0 && correctDescriptionOrMeaningCount === 0) {\n            this.commandOutput.info('file for \"%s\" was up to date', lang);\n            return of(null);\n        } else {\n            return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile)\n                .pipe(map(() => {\n                    // write it to file\n                    TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n                    this.commandOutput.info('updated file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n                    if (newCount > 0 && !isDefaultLang) {\n                        this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n                    }\n                    return null;\n                }));\n        }\n    }\n\n    /**\n     * Handle the case of changed id due to small white space changes.\n     * @param masterTransUnit unit in master file\n     * @param languageSpecificMessagesFile translation file\n     * @param lastProcessedUnit Unit before the one processed here. New unit will be inserted after this one.\n     * @return processed unit, if done, null if no changed unit found\n     */\n    private processChangedIdUnit(\n        masterTransUnit: ITransUnit,\n        languageSpecificMessagesFile: ITranslationMessagesFile,\n        lastProcessedUnit: ITransUnit): ITransUnit {\n\n        let changedTransUnit: ITransUnit = null;\n        languageSpecificMessagesFile.forEachTransUnit((languageTransUnit) => {\n             if (this.areSourcesNearlyEqual(languageTransUnit, masterTransUnit)) {\n                 changedTransUnit = languageTransUnit;\n             }\n        });\n        if (!changedTransUnit) {\n            return null;\n        }\n        const mergedTransUnit = languageSpecificMessagesFile.importNewTransUnit(\n            masterTransUnit,\n            false,\n            false,\n            (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n        const translatedContent = changedTransUnit.targetContent();\n        if (translatedContent) { // issue #68 set translated only, if it is really translated\n            mergedTransUnit.translate(translatedContent);\n            mergedTransUnit.setTargetState(STATE_TRANSLATED);\n        }\n        return mergedTransUnit;\n    }\n\n    /**\n     * test wether the sources of 2 trans units are equal ignoring white spaces.\n     * @param tu1 tu1\n     * @param tu2 tu2\n     */\n    private areSourcesNearlyEqual(tu1: ITransUnit, tu2: ITransUnit): boolean {\n        if ((tu1 && !tu2) || (tu2 && !tu1)) {\n            return false;\n        }\n        const tu1Normalized = tu1.sourceContentNormalized();\n        const tu2Normalized = tu2.sourceContentNormalized();\n        if (tu1Normalized.isICUMessage()) {\n            if (tu2Normalized.isICUMessage()) {\n                const icu1Normalized = tu1Normalized.getICUMessage().asNativeString().trim();\n                const icu2Normalized = tu2Normalized.getICUMessage().asNativeString().trim();\n                return icu1Normalized === icu2Normalized;\n            } else {\n                return false;\n            }\n        }\n        if (tu1Normalized.containsICUMessageRef()) {\n            const icuref1Normalized = tu1Normalized.asNativeString().trim();\n            const icuref2Normalized = tu2Normalized.asNativeString().trim();\n            return icuref1Normalized === icuref2Normalized;\n        }\n        const s1Normalized = tu1Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        const s2Normalized = tu2Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        return s1Normalized === s2Normalized;\n    }\n\n    private areSourceReferencesEqual(\n        ref1: {sourcefile: string; linenumber: number; }[],\n        ref2: {sourcefile: string; linenumber: number; }[]): boolean {\n\n        if ((isNullOrUndefined(ref1) && !isNullOrUndefined(ref2)) || (isNullOrUndefined(ref2) && !isNullOrUndefined(ref1))) {\n            return false;\n        }\n        if (isNullOrUndefined(ref1) && isNullOrUndefined(ref2)) {\n            return true;\n        }\n        // bot refs are set now, convert to set to compare them\n        const set1: Set<string> = new Set<string>();\n        ref1.forEach((ref) => {set1.add(ref.sourcefile + ':' + ref.linenumber); });\n        const set2: Set<string> = new Set<string>();\n        ref2.forEach((ref) => {set2.add(ref.sourcefile + ':' + ref.linenumber); });\n        if (set1.size !== set2.size) {\n            return false;\n        }\n        let match = true;\n        set2.forEach((ref) => {\n            if (!set1.has(ref)) {\n                match = false;\n            }\n        });\n        return match;\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    private autoTranslate(\n        from: string,\n        to: string,\n        languageSpecificMessagesFile: ITranslationMessagesFile): Observable<AutoTranslateSummaryReport> {\n\n        let serviceCall: Observable<AutoTranslateSummaryReport>;\n        const autotranslateEnabled: boolean = this.parameters.autotranslateLanguage(to);\n        if (autotranslateEnabled) {\n            serviceCall = this.autoTranslateService.autoTranslate(from, to, languageSpecificMessagesFile);\n        } else {\n            serviceCall = of(new AutoTranslateSummaryReport(from, to));\n        }\n        return serviceCall.pipe(map((summary) => {\n            if (autotranslateEnabled) {\n                if (summary.error() || summary.failed() > 0) {\n                    this.commandOutput.error(summary.content());\n                } else {\n                    this.commandOutput.warn(summary.content());\n                }\n            }\n            return summary;\n        }));\n    }\n\n}\n"],"names":["fs.existsSync","fs.readFileSync","fs.writeFileSync","fs.openSync","fs.readSync","fs.writeSync","fs.closeSync","fs.readdirSync","fs.lstatSync","fs.unlinkSync","fs.rmdirSync","fs.statSync","fs.accessSync","fs.constants","path.resolve","entityDecoderLib.decode"],"mappings":"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"}