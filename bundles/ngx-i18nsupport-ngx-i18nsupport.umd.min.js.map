{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ngx-i18nsupport/ngx-i18nsupport/lib/xliffmerge.module.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/writer-to-string.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/command-output.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-error.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/file-util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extraction-pattern.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extractor.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-parameters.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/version.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xml-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/translation-messages-file-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-result.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-summary-report.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/xliff-merge-auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","XliffmergeModule","NgModule","args","imports","declarations","exports","isNullOrUndefined","undefined","isArray","WriterToString","_this","_super","resultString","tslib_1.__extends","_write","chunk","encoding","callback","chunkString","Buffer","toString","alloc","writtenData","Writable","ERROR","WARN","INFO","DEBUG","CommandOutput","stdout","_quiet","_verbose","outputStream","process","setVerbose","setQuiet","verbose","quiet","msg","params","_i","log","LogLevel","warn","info","debug","level","isOutputEnabled","coloredMessage","chalk","red","magenta","gray","outMsg","format","apply","write","quietEnabled","verboseEnabled","XliffMergeError","Error","FileUtil","exists","filename","fs.existsSync","read","fs.readFileSync","replaceContent","newContent","fs.writeFileSync","copy","srcFile","destFile","buff","fdr","fs.openSync","fdw","bytesRead","pos","fs.readSync","fs.writeSync","fs.closeSync","deleteFolderRecursive","path","fs.readdirSync","forEach","file","curPath","fs.lstatSync","isDirectory","fs.unlinkSync","fs.rmdirSync","deleteFolderContentRecursive","deleteFile","NgxTranslateExtractionPattern","extractionPatternString","parts","split","_matchExplicitId","_descriptionPatterns","part","errorString","checkValidDescriptionPattern","isExplicitIdMatched","id","isDescriptionMatched","description","indexOf","descriptionPattern","test","NgxTranslateExtractor","messagesFile","extractionPattern","checkPattern","message","extract","outputFile","extractTo","translations","toNgxTranslations","keys","JSON","stringify","result","forEachTransUnit","tu","ngxId","ngxTranslateIdFromTU","messagetext","targetContentNormalized","asDisplayString","NORMALIZATION_FORMAT_NGXTRANSLATE","isExplicitlySetId","meaning","msgList","translationObject","putInTranslationObject","firstPartOfId","restOfId","indexOfDot","substring","object","DefaultExtractionPattern","PROFILE_CANDIDATES","XliffMergeParameters","errorsFound","warningsFound","createFromOptions","options","profileContent","parameters","configure","readProfileCandidate","profilePath","content","err","parsedContent","parse","xliffmergeOptions","readProfile","validProfile","initializeFromConfig","languages","_languages","_defaultLanguage","checkParameters","PROFILE_CANDIDATES_1","tslib_1.__values","PROFILE_CANDIDATES_1_1","configfilename","profile","usedProfilePath","srcDir","adjustPathToProfilePath","genDir","apikeyfile","pathToAdjust","isAbsolute","join","dirname","replace","allowIdChange","_allowIdChange","defaultLanguage","_srcDir","angularCompilerOptions","_genDir","i18nBaseFile","_i18nBaseFile","i18nFile","_i18nFile","i18nFormat","_i18nFormat","_encoding","removeUnusedIds","_removeUnusedIds","supportNgxTranslate","_supportNgxTranslate","ngxTranslateExtractionPattern","_ngxTranslateExtractionPattern","useSourceAsTarget","_useSourceAsTarget","targetPraefix","_targetPraefix","targetSuffix","_targetSuffix","autotranslate","_autotranslate","beautifyOutput","_beautifyOutput","preserveOrder","_preserveOrder","apikey","_apikey","_apikeyfile","stats","checkLanguageSyntax","lang","fs.statSync","fs.accessSync","fs.constants","R_OK","autotranslatedLanguages","checkResult","showAllParameters","commandOutput","_b","_c","language","generatedI18nFile","suffixForGeneratedI18nFile","generatedNgxTranslateFile","autotranslateLanguage","slice","apikeyPath","env","API_KEY_FILE","pkg","require","path.resolve","__dirname","VERSION","version","XmlReader","readXmlFileContent","DEFAULT_ENCODING","foundEncoding","encodingFromXml","xmlString","index","endIndex","TranslationMessagesFileReader","fromFile","optionalMasterFilePath","xmlContent","optionalMaster","masterFileContent","TranslationMessagesFileFactory","fromFileContent","fromUnknownFormatFile","fromUnknownFormatFileContent","masterXmlContent","save","editedContent","AutoTranslateService","apiKey","_request","request","_apiKey","_rootUrl","stripRegioncode","langLower","toLowerCase","c","charAt","setApiKey","translateMultipleStrings","messages","from","to","of","throwError","allRequests","splitMessagesToGoogleLimit","map","partialMessages","limitedTranslateMultipleStrings","forkJoin","pipe","allTranslations","all","currentPackage","packageSize","realUrl","url","body","q","target","source","json","post","data","code","translation","translatedText","uri","_call","assign","method","Observable","observer","response","complete","AutoTranslateResult","_success","_details","success","AutoTranslateSummaryReport","_from","_to","_total","_ignored","_failed","setError","total","_error","setIgnored","ignored","addSingleResult","merge","anotherSummary","failed","XliffMergeAutoTranslateService","autoTranslateService","autoTranslate","languageSpecificMessagesFile","doAutoTranslateNonICUMessages","doAutoTranslateICUMessages","summaries","summary","allUntranslatedTUs","allUntranslated","targetState","STATE_NEW","allTranslatable","filter","sourceContentNormalized","getICUMessage","allMessages","encodedTranslation","entityDecoderLib.decode","translationText","autoTranslateNonICUUnit","catchError","failSummary","doAutoTranslateICUMessage","categories","getCategories","find","category","getMessageNormalized","icuTranslation","getCategory","autoTranslateICUUnit","translatedMessage","autoTranslateUnit","translate","translateICUMessage","errors","validate","warnings","validateWarnings","XliffMerge","main","argv","parseArgs","run","exit","arg","console","showUsage","instance","callbackFunction","errorFunction","runAsync","subscribe","retcode","_d","_e","_f","readMaster","executionForAllLanguages","processLanguage","retcodes","totalRetcode","master","warning","count","numberOfTransUnits","missingIdCount","numberOfTransUnitsWithMissingId","sourceLang","sourceLanguage","setSourceLanguage","currentFilename","filenameString","languageXliffFile","mergeMasterTo","createUntranslatedXliff","translationFormat","languageXliffFilePath","isDefaultLang","setNewTransUnitTargetPraefix","setNewTransUnitTargetSuffix","createTranslationFileForLang","FORMAT_XMB","FORMAT_XTB","newCount","correctSourceContentCount","correctSourceRefCount","correctDescriptionOrMeaningCount","idChangedCount","lastProcessedUnit","masterTransUnit","transUnit","transUnitWithId","supportsSetSourceContent","areSourcesNearlyEqual","setSourceContent","sourceContent","setTargetState","STATE_FINAL","STATE_TRANSLATED","supportsSetSourceReferences","areSourceReferencesEqual","sourceReferences","setSourceReferences","supportsSetDescriptionAndMeaning","changed","setDescription","setMeaning","newUnit","processChangedIdUnit","importNewTransUnit","removeCount","removeTransUnitWithId","changedTransUnit","languageTransUnit","mergedTransUnit","translatedContent","targetContent","tu1","tu2","tu1Normalized","tu2Normalized","isICUMessage","asNativeString","trim","containsICUMessageRef","NORMALIZATION_FORMAT_DEFAULT","ref1","ref2","set1","Set","ref","add","sourcefile","linenumber","set2","size","match","has","autotranslateEnabled"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\n\n// not used, only there to make ng-packagr happy\n@NgModule({\n    imports: [\n    ],\n    declarations: [],\n    exports: []\n})\nexport class XliffmergeModule { }\n","/**\n * Collection of utility functions that are deprecated in nodes util.\n */\n\n/**\n * Replaces node isNullOrUndefined.\n */\nexport function isNullOrUndefined(value: any) {\n    return value === undefined || value === null;\n}\n\n/**\n * Replaces node isString.\n */\nexport function isString(value: any) {\n    return typeof value === 'string';\n}\n\n/**\n * Replaces node isBoolean.\n */\nexport function isBoolean(value: any) {\n    return typeof value === 'boolean';\n}\n\n/**\n * Replaces node isNumber.\n */\nexport function isNumber(value: any) {\n    return typeof value === 'number';\n}\n\n/**\n * Replaces node isArray.\n */\nexport function isArray(value: any) {\n    return Array.isArray(value);\n}\n","import {Writable} from 'stream';\nimport {isString} from './util';\n/**\n * Created by martin on 20.02.2017.\n * A helper class for testing.\n * Can be used as a WritableStream and writes everything (synchronously) into a string,\n * that can easily be read by the tests.\n */\n\nexport class WriterToString extends Writable {\n\n    private resultString: string;\n\n    constructor() {\n        super();\n        this.resultString = '';\n    }\n\n    public _write(chunk: any, encoding: string, callback: Function): void {\n        let chunkString;\n        if (isString(chunk)) {\n            chunkString = chunk;\n        } else if (chunk instanceof Buffer) {\n            chunkString = chunk.toString();\n        } else {\n            chunkString = Buffer.alloc(chunk).toString(encoding);\n        }\n        this.resultString = this.resultString + chunkString;\n        callback();\n    }\n\n    /**\n     * Returns a string of everything, that was written to the stream so far.\n     * @return written data\n     */\n    public writtenData(): string {\n        return this.resultString;\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n * Very simple class to control the output of a command.\n * Output can be errors, warnings, infos and debug-Outputs.\n * The output can be controlled via 2 flags, quiet and verbose.\n * If quit is enabled only error messages are shown.\n * If verbose is enabled, everything is shown.\n * If both are not enabled (the default) errors, warnings and infos are shown.\n * If not are enabled (strange), we assumed the default.\n */\n\nimport chalk from 'chalk';\nimport WritableStream = NodeJS.WritableStream;\nimport {format} from 'util';\n\nenum LogLevel {\n    'ERROR',\n    'WARN',\n    'INFO',\n    'DEBUG'\n}\n\nexport class CommandOutput {\n\n    /**\n     * verbose enables output of everything.\n     */\n    public _verbose: boolean;\n\n    /**\n     * quiet disables output of everything but errors.\n     */\n    public _quiet: boolean;\n\n    private outputStream: WritableStream;\n\n    constructor(stdout?: WritableStream) {\n        this._quiet = false;\n        this._verbose = false;\n        if (stdout) {\n            this.outputStream = stdout;\n        } else {\n            this.outputStream = process.stdout;\n        }\n    }\n\n    public setVerbose() {\n        this._verbose = true;\n    }\n\n    public setQuiet() {\n        this._quiet = true;\n    }\n\n    /**\n     * Test, wether verbose is enabled.\n     * @return wether verbose is enabled.\n     */\n    public verbose(): boolean {\n        return this._verbose;\n    }\n\n    /**\n     * Test, wether quiet is enabled.\n     * @return wether quiet is enabled.\n     */\n    public quiet(): boolean {\n        return this._quiet;\n    }\n\n    public error(msg, ...params: any[]) {\n        this.log(LogLevel.ERROR, msg, params);\n    }\n\n    public warn(msg, ...params: any[]) {\n        this.log(LogLevel.WARN, msg, params);\n    }\n\n    public info(msg, ...params: any[]) {\n        this.log(LogLevel.INFO, msg, params);\n    }\n\n    public debug(msg, ...params: any[]) {\n        this.log(LogLevel.DEBUG, msg, params);\n    }\n\n    private log(level: LogLevel, msg, params: any[]) {\n        if (!this.isOutputEnabled(level)) {\n            return;\n        }\n        let coloredMessage;\n        switch (level) {\n            case LogLevel.ERROR:\n                coloredMessage = chalk.red('ERROR: ' + msg);\n                break;\n            case LogLevel.WARN:\n                coloredMessage = chalk.magenta('WARNING: ' + msg);\n                break;\n            default:\n                coloredMessage = chalk.gray('* ' + msg);\n                break;\n        }\n        const outMsg = format(coloredMessage, ...params);\n        this.outputStream.write(outMsg + '\\n');\n    }\n\n    private isOutputEnabled(level: LogLevel): boolean {\n        let quietEnabled, verboseEnabled: boolean;\n        if (this._quiet && this._verbose) {\n            quietEnabled = false;\n            verboseEnabled = false;\n        } else {\n            quietEnabled = this._quiet;\n            verboseEnabled = this._verbose;\n        }\n        switch (level) {\n            case LogLevel.ERROR:\n                return true;    // always output errors\n            case LogLevel.WARN:\n                return (!quietEnabled);\n            case LogLevel.INFO:\n                return (verboseEnabled && !quietEnabled);\n            case LogLevel.DEBUG:\n                return verboseEnabled;\n            default:\n                return true;\n        }\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n */\n\nexport class XliffMergeError extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, XliffMergeError.prototype);\n    }\n}\n","import * as fs from 'fs';\n\n/**\n * Created by martin on 17.02.2017.\n * Some (a few) simple utils for file operations.\n * Just for convenience.\n */\n\nexport class FileUtil {\n\n    /**\n     * Check for existence.\n     * @param filename filename\n     * @return wether file exists\n     */\n    public static exists(filename: string) {\n        return fs.existsSync(filename);\n    }\n\n    /**\n     * Read a file.\n     * @param filename filename\n     * @param encoding encoding\n     * @return content of file\n     */\n    public static read(filename: string, encoding: string) {\n        return fs.readFileSync(filename, encoding);\n    }\n\n    /**\n     * Write a file with given content.\n     * @param filename filename\n     * @param newContent newContent\n     * @param encoding encoding\n     */\n    public static replaceContent(filename: string, newContent: string, encoding: string) {\n        fs.writeFileSync(filename, newContent, {encoding: encoding});\n    }\n\n    public static copy(srcFile: string, destFile: string) {\n        const BUF_LENGTH = 64 * 1024;\n        const buff = Buffer.alloc(BUF_LENGTH);\n        const fdr = fs.openSync(srcFile, 'r');\n        const fdw = fs.openSync(destFile, 'w');\n        let bytesRead = 1;\n        let pos = 0;\n        while (bytesRead > 0) {\n            bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\n            fs.writeSync(fdw, buff, 0, bytesRead);\n            pos += bytesRead;\n        }\n        fs.closeSync(fdr);\n        fs.closeSync(fdw);\n    }\n\n    /**\n     * Delete the folder and all of its content (rm -rf).\n     * @param path path\n     */\n    public static deleteFolderRecursive(path: string) {\n        let files = [];\n        if (fs.existsSync(path) ) {\n            files = fs.readdirSync(path);\n            files.forEach(function(file) {\n                const curPath = path + '/' + file;\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                    FileUtil.deleteFolderRecursive(curPath);\n                } else { // delete file\n                    fs.unlinkSync(curPath);\n                }\n            });\n            fs.rmdirSync(path);\n        }\n    }\n\n    /**\n     * Delete folders content recursively, but do not delete folder.\n     * Folder is left empty at the end.\n     * @param path path\n     */\n    public static deleteFolderContentRecursive(path: string) {\n        let files = [];\n        if (fs.existsSync(path) ) {\n            files = fs.readdirSync(path);\n            files.forEach(function(file) {\n                const curPath = path + '/' + file;\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                    FileUtil.deleteFolderRecursive(curPath);\n                } else { // delete file\n                    fs.unlinkSync(curPath);\n                }\n            });\n        }\n    }\n\n    /**\n     * Delete a file.\n     * @param path path\n     */\n    public static deleteFile(path: string) {\n        fs.unlinkSync(path);\n    }\n}\n","/**\n * Helper class to parse ngx translate extraction pattern\n * and to decide wether a given message matches the pattern.\n */\nexport class NgxTranslateExtractionPattern {\n\n    private _matchExplicitId: boolean;\n    private _descriptionPatterns: string[];\n\n    /**\n     * Construct the pattern from given description string\n     * @param extractionPatternString extractionPatternString\n     * @throws an error, if there is a syntax error\n     */\n    constructor(private extractionPatternString: string) {\n        const parts = extractionPatternString.split('|');\n        this._matchExplicitId = false;\n        this._descriptionPatterns = [];\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            if (part === '@@') {\n                if (this._matchExplicitId) {\n                    throw new Error('extraction pattern must not contain @@ twice');\n                }\n                this._matchExplicitId = true;\n            } else {\n                const errorString = this.checkValidDescriptionPattern(part);\n                if (errorString) {\n                    throw new Error(errorString);\n                }\n                this._descriptionPatterns.push(part);\n            }\n        }\n    }\n\n    /**\n     * Check, wether an explicitly set id matches the pattern.\n     * @param id id\n     * @return wether an explicitly set id matches the pattern.\n     */\n    public isExplicitIdMatched(id: string): boolean {\n        return id && this._matchExplicitId;\n    }\n\n    /**\n     * Check, wether a given description matches the pattern.\n     * @param description description\n     * @return wether a given description matches the pattern.\n     */\n    public isDescriptionMatched(description: string): boolean {\n        return this._descriptionPatterns.indexOf(description) >= 0;\n    }\n\n    private checkValidDescriptionPattern(descriptionPattern: string): string {\n        if (!descriptionPattern) {\n            return 'empty value not allowed';\n        }\n        if (/^[a-zA-Z_][a-zA-Z_-]*$/.test(descriptionPattern)) {\n            return null; // it is ok\n        } else {\n            return 'description pattern must be an identifier containing only letters, digits, _ or -';\n        }\n    }\n}\n","import {ITranslationMessagesFile, ITransUnit, NORMALIZATION_FORMAT_NGXTRANSLATE} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {FileUtil} from '../common/file-util';\nimport {isNullOrUndefined} from '../common/util';\nimport {NgxTranslateExtractionPattern} from './ngx-translate-extraction-pattern';\n/**\n * Created by roobm on 15.03.2017.\n * A tool for extracting messages in ngx-translate format.\n * Generates a json-file to be used with ngx-translate.\n */\n\n/**\n * The interface used for translations in ngx-translate.\n * A hash that contains either the translation or another hash.\n */\ninterface NgxTranslations {\n    [id: string]: NgxTranslations | string;\n}\n\n/**\n * internal,\n * a message with id (a dot-separated string).\n */\ninterface NgxMessage {\n    id: string; // dot separated name, e.g. \"myapp.service1.message1\"\n    message: string; // the message, placeholder are in {{n}} syntax, e.g. \"a test with value: {{0}}\n}\n\nexport class NgxTranslateExtractor {\n\n    public static DefaultExtractionPattern = '@@|ngx-translate';\n    private extractionPattern: NgxTranslateExtractionPattern;\n\n    /**\n     * Check, wether extractionPattern has valid syntax.\n     * @param extractionPatternString extractionPatternString\n     * @return null, if pattern is ok, string describing the error, if it is not ok.\n     */\n    public static checkPattern(extractionPatternString: string): string {\n        try {\n          if (new NgxTranslateExtractionPattern(extractionPatternString)) {\n              return null;\n          }\n        } catch (error) {\n            return error.message;\n        }\n        return null;\n    }\n\n    public static extract(messagesFile: ITranslationMessagesFile, extractionPattern: string, outputFile: string) {\n        new NgxTranslateExtractor(messagesFile, extractionPattern).extractTo(outputFile);\n    }\n\n    constructor(private messagesFile: ITranslationMessagesFile, extractionPatternString: string) {\n        this.extractionPattern = new NgxTranslateExtractionPattern(extractionPatternString);\n    }\n\n    /**\n     * Extact messages and write them to a file.\n     * @param outputFile outputFile\n     */\n    public extractTo(outputFile: string) {\n        const translations: NgxTranslations = this.toNgxTranslations(this.extract());\n        if (translations && Object.keys(translations).length > 0) {\n            FileUtil.replaceContent(outputFile, JSON.stringify(translations, null, 4), 'UTF-8');\n        } else {\n            if (FileUtil.exists(outputFile)) {\n                FileUtil.deleteFile(outputFile);\n            }\n        }\n    }\n\n    /**\n     *  Extract messages and convert them to ngx translations.\n     *  @return the translation objects.\n     */\n    private extract(): NgxMessage[] {\n        const result: NgxMessage[] = [];\n        this.messagesFile.forEachTransUnit((tu: ITransUnit) => {\n            const ngxId = this.ngxTranslateIdFromTU(tu);\n            if (ngxId) {\n                const messagetext = tu.targetContentNormalized().asDisplayString(NORMALIZATION_FORMAT_NGXTRANSLATE);\n                result.push({id: ngxId, message: messagetext});\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Check, wether this tu should be extracted for ngx-translate usage, and return its id for ngx-translate.\n     * There are 2 possibilities:\n     * 1. description is set to \"ngx-translate\" and meaning contains the id.\n     * 2. id is explicitly set to a string.\n     * @param tu tu\n     * @return an ngx id or null, if this tu should not be extracted.\n     */\n    private ngxTranslateIdFromTU(tu: ITransUnit): string {\n        if (this.isExplicitlySetId(tu.id)) {\n            if (this.extractionPattern.isExplicitIdMatched(tu.id)) {\n                return tu.id;\n            } else {\n                return null;\n            }\n        }\n        const description = tu.description();\n        if (description && this.extractionPattern.isDescriptionMatched(description)) {\n            return tu.meaning();\n        }\n    }\n\n    /**\n     * Test, wether ID was explicitly set (via i18n=\"@myid).\n     * Just heuristic, an ID is explicitly, if it does not look like a generated one.\n     * @param id id\n     * @return wether ID was explicitly set (via i18n=\"@myid).\n     */\n    private isExplicitlySetId(id: string): boolean {\n        if (isNullOrUndefined(id)) {\n            return false;\n        }\n        // generated IDs are either decimal or sha1 hex\n        const reForGeneratedId = /^[0-9a-f]{11,}$/;\n        return !reForGeneratedId.test(id);\n    }\n\n    /**\n     * Convert list of relevant TUs to ngx translations object.\n     * @param msgList msgList\n     */\n    private toNgxTranslations(msgList: NgxMessage[]): NgxTranslations {\n        const translationObject: NgxTranslations = {};\n        msgList.forEach((msg: NgxMessage) => {\n            this.putInTranslationObject(translationObject, msg);\n        });\n        return translationObject;\n    }\n\n    /**\n     * Put a new messages into the translation data object.\n     * If you add, e.g. \"{id: 'myapp.example', message: 'test'}\",\n     * the translation object will then contain an object myapp that has property example:\n     * {myapp: {\n     *   example: 'test'\n     *   }}\n     * @param translationObject translationObject\n     * @param msg msg\n     */\n    private putInTranslationObject(translationObject: NgxTranslations, msg: NgxMessage) {\n        let firstPartOfId: string;\n        let restOfId: string;\n        const indexOfDot = msg.id.indexOf('.');\n        if (indexOfDot === 0 || indexOfDot === (msg.id.length - 1)) {\n            throw new Error('bad nxg-translate id \"' + msg.id + '\"');\n        }\n        if (indexOfDot < 0) {\n            firstPartOfId = msg.id;\n            restOfId = '';\n        } else {\n            firstPartOfId = msg.id.substring(0, indexOfDot);\n            restOfId = msg.id.substring(indexOfDot + 1);\n        }\n        let object = translationObject[firstPartOfId];\n        if (isNullOrUndefined(object)) {\n            if (restOfId === '') {\n                translationObject[firstPartOfId] = msg.message;\n                return;\n            }\n            object = {};\n            translationObject[firstPartOfId] = object;\n        } else {\n            if (restOfId === '') {\n                throw new Error('duplicate id praefix \"' + msg.id + '\"');\n            }\n        }\n        this.putInTranslationObject(<NgxTranslations> object, {id: restOfId, message: msg.message});\n    }\n}\n","/**\n * Created by martin on 17.02.2017.\n * Collection of all parameters used by the tool.\n * The parameters are read form the profile or defaults are used.\n */\n\nimport * as fs from 'fs';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {Stats} from 'fs';\nimport {CommandOutput} from '../common/command-output';\nimport {format} from 'util';\nimport {isArray, isNullOrUndefined} from '../common/util';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {FileUtil} from '../common/file-util';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {dirname, isAbsolute, join, normalize} from 'path';\n\nconst PROFILE_CANDIDATES = ['package.json', '.angular-cli.json'];\n\nexport class XliffMergeParameters {\n\n    private usedProfilePath: string;\n    private _quiet: boolean;\n    private _verbose: boolean;\n    private _allowIdChange: boolean;\n    private _defaultLanguage: string;\n    private _srcDir: string;\n    private _i18nBaseFile: string;\n    private _i18nFile: string;\n    private _i18nFormat: string;\n    private _encoding: string;\n    private _genDir: string;\n    private _languages: string[];\n    private _removeUnusedIds: boolean;\n    private _supportNgxTranslate: boolean;\n    private _ngxTranslateExtractionPattern: string;\n    private _useSourceAsTarget: boolean;\n    private _targetPraefix: string;\n    private _targetSuffix: string;\n    private _beautifyOutput: boolean;\n    private _preserveOrder: boolean;\n    private _autotranslate: boolean|string[];\n    private _apikey: string;\n    private _apikeyfile: string;\n\n    public errorsFound: XliffMergeError[];\n    public warningsFound: string[];\n\n    /**\n     * Create Parameters.\n     * @param options command options\n     * @param profileContent given profile (if not, it is read from the profile path from options).\n     */\n    public static createFromOptions(options: ProgramOptions, profileContent?: IConfigFile) {\n        const parameters = new XliffMergeParameters();\n        parameters.configure(options, profileContent);\n        return parameters;\n    }\n\n    private constructor() {\n        this.errorsFound = [];\n        this.warningsFound = [];\n    }\n\n    /**\n     * Read potential profile.\n     * To be a candidate, file must exist and contain property \"xliffmergeOptions\".\n     * @param profilePath path of profile\n     * @return parsed content of file or null, if file does not exist or is not a profile candidate.\n     */\n    private static readProfileCandidate(profilePath: string): IConfigFile {\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            return null;\n        }\n        const parsedContent: IConfigFile = JSON.parse(content);\n        if (parsedContent && parsedContent.xliffmergeOptions) {\n            return parsedContent;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Initialize me from the profile content.\n     * (public only for test usage).\n     * @param options options given at runtime via command line\n     * @param profileContent if null, read it from profile.\n     */\n    private configure(options: ProgramOptions, profileContent?: IConfigFile) {\n        this.errorsFound = [];\n        this.warningsFound = [];\n        if (!profileContent) {\n            profileContent = this.readProfile(options);\n        }\n        const validProfile: boolean = (!!profileContent);\n        if (options.quiet) {\n            this._quiet = options.quiet;\n        }\n        if (options.verbose) {\n            this._verbose = options.verbose;\n        }\n        if (validProfile) {\n            this.initializeFromConfig(profileContent);\n            // if languages are given as parameters, they ovveride everything said in profile\n            if (!!options.languages && options.languages.length > 0) {\n                this._languages = options.languages;\n                if (!this._defaultLanguage) {\n                    this._defaultLanguage = this._languages[0];\n                }\n            }\n            this.checkParameters();\n        }\n    }\n\n    /**\n     * Read profile.\n     * @param options program options\n     * @return the read profile (empty, if none, null if errors)\n     */\n    private readProfile(options: ProgramOptions): IConfigFile {\n        const profilePath: string = options.profilePath;\n        if (!profilePath) {\n            for (const configfilename of PROFILE_CANDIDATES) {\n                const profile = XliffMergeParameters.readProfileCandidate(configfilename);\n                if (profile) {\n                    this.usedProfilePath = configfilename;\n                    return profile;\n                }\n            }\n            return {};\n        }\n        let content: string;\n        try {\n            content = fs.readFileSync(profilePath, 'UTF-8');\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('could not read profile \"' + profilePath + '\"'));\n            return null;\n        }\n        this.usedProfilePath = profilePath;\n        const profileContent: IConfigFile = JSON.parse(content);\n        // replace all pathes in options by absolute paths\n        const xliffmergeOptions = profileContent.xliffmergeOptions;\n        xliffmergeOptions.srcDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.srcDir);\n        xliffmergeOptions.genDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.genDir);\n        xliffmergeOptions.apikeyfile = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.apikeyfile);\n        return profileContent;\n    }\n\n    private adjustPathToProfilePath(profilePath: string, pathToAdjust: string | undefined): string | undefined {\n        if (!pathToAdjust || isAbsolute(pathToAdjust)) {\n            return pathToAdjust;\n        }\n        return join(dirname(profilePath), pathToAdjust).replace(/\\\\/g, '/');\n    }\n\n    private initializeFromConfig(profileContent: IConfigFile) {\n        if (!profileContent) {\n            return;\n        }\n        const profile = profileContent.xliffmergeOptions;\n        if (profile) {\n            if (!isNullOrUndefined(profile.quiet)) {\n                this._quiet = profile.quiet;\n            }\n            if (!isNullOrUndefined(profile.verbose)) {\n                this._verbose = profile.verbose;\n            }\n            if (!isNullOrUndefined(profile.allowIdChange)) {\n                this._allowIdChange = profile.allowIdChange;\n            }\n            if (profile.defaultLanguage) {\n                this._defaultLanguage = profile.defaultLanguage;\n            }\n            if (profile.languages) {\n                this._languages = profile.languages;\n            }\n            if (profile.srcDir) {\n                this._srcDir = profile.srcDir;\n            }\n            if (profile.angularCompilerOptions) {\n                if (profile.angularCompilerOptions.genDir) {\n                    this._genDir = profile.angularCompilerOptions.genDir;\n                }\n            }\n            if (profile.genDir) {\n                // this must be after angularCompilerOptions to be preferred\n                this._genDir = profile.genDir;\n            }\n            if (profile.i18nBaseFile) {\n                this._i18nBaseFile = profile.i18nBaseFile;\n            }\n            if (profile.i18nFile) {\n                this._i18nFile = profile.i18nFile;\n            }\n            if (profile.i18nFormat) {\n                this._i18nFormat = profile.i18nFormat;\n            }\n            if (profile.encoding) {\n                this._encoding = profile.encoding;\n            }\n            if (!isNullOrUndefined(profile.removeUnusedIds)) {\n                this._removeUnusedIds = profile.removeUnusedIds;\n            }\n            if (!isNullOrUndefined(profile.supportNgxTranslate)) {\n                this._supportNgxTranslate = profile.supportNgxTranslate;\n            }\n            if (!isNullOrUndefined(profile.ngxTranslateExtractionPattern)) {\n                this._ngxTranslateExtractionPattern = profile.ngxTranslateExtractionPattern;\n            }\n            if (!isNullOrUndefined(profile.useSourceAsTarget)) {\n                this._useSourceAsTarget = profile.useSourceAsTarget;\n            }\n            if (!isNullOrUndefined(profile.targetPraefix)) {\n                this._targetPraefix = profile.targetPraefix;\n            }\n            if (!isNullOrUndefined(profile.targetSuffix)) {\n                this._targetSuffix = profile.targetSuffix;\n            }\n            if (!isNullOrUndefined(profile.autotranslate)) {\n                this._autotranslate = profile.autotranslate;\n            }\n            if (!isNullOrUndefined(profile.beautifyOutput)) {\n                this._beautifyOutput = profile.beautifyOutput;\n            }\n            if (!isNullOrUndefined(profile.preserveOrder)) {\n                this._preserveOrder = profile.preserveOrder;\n            }\n            if (!isNullOrUndefined(profile.apikey)) {\n                this._apikey = profile.apikey;\n            }\n            if (!isNullOrUndefined(profile.apikeyfile)) {\n                this._apikeyfile = profile.apikeyfile;\n            }\n        } else {\n            this.warningsFound.push('did not find \"xliffmergeOptions\" in profile, using defaults');\n        }\n    }\n\n    /**\n     * Check all Parameters, wether they are complete and consistent.\n     * if something is wrong with the parameters, it is collected in errorsFound.\n     */\n    private checkParameters(): void {\n        this.checkLanguageSyntax(this.defaultLanguage());\n        if (this.languages().length === 0) {\n            this.errorsFound.push(new XliffMergeError('no languages specified'));\n        }\n        this.languages().forEach((lang) => {\n            this.checkLanguageSyntax(lang);\n        });\n        let stats: Stats;\n        let err: any;\n        // srcDir should exists\n        try {\n            stats = fs.statSync(this.srcDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('srcDir \"' + this.srcDir() + '\" is not a directory'));\n        }\n        // genDir should exists\n        try {\n            stats = fs.statSync(this.genDir());\n        } catch (e) {\n            err = e;\n        }\n        if (!!err || !stats.isDirectory()) {\n            this.errorsFound.push(new XliffMergeError('genDir \"' + this.genDir() + '\" is not a directory'));\n        }\n        // master file MUST exist\n        try {\n            fs.accessSync(this.i18nFile(), fs.constants.R_OK);\n        } catch (err) {\n            this.errorsFound.push(new XliffMergeError('i18nFile \"' + this.i18nFile() + '\" is not readable'));\n        }\n        // i18nFormat must be xlf xlf2 or xmb\n        if (!(this.i18nFormat() === 'xlf' || this.i18nFormat() === 'xlf2' || this.i18nFormat() === 'xmb')) {\n            this.errorsFound.push(new XliffMergeError('i18nFormat \"' + this.i18nFormat() + '\" invalid, must be \"xlf\" or \"xlf2\" or \"xmb\"'));\n        }\n        // autotranslate requires api key\n        if (this.autotranslate() && !this.apikey()) {\n            this.errorsFound.push(new XliffMergeError('autotranslate requires an API key, please set one'));\n        }\n        // autotranslated languages must be in list of all languages\n        this.autotranslatedLanguages().forEach((lang) => {\n            if (this.languages().indexOf(lang) < 0) {\n                this.errorsFound.push(new XliffMergeError('autotranslate language \"' + lang + '\" is not in list of languages'));\n            }\n            if (lang === this.defaultLanguage()) {\n                this.errorsFound.push(\n                    new XliffMergeError('autotranslate language \"' + lang + '\" cannot be translated, because it is the source language'));\n            }\n        });\n        // ngx translate pattern check\n        if (this.supportNgxTranslate()) {\n            const checkResult = NgxTranslateExtractor.checkPattern(this.ngxTranslateExtractionPattern());\n            if (!isNullOrUndefined(checkResult)) {\n                this.errorsFound.push(\n                    new XliffMergeError('ngxTranslateExtractionPattern \"' + this.ngxTranslateExtractionPattern() + '\": ' + checkResult));\n            }\n        }\n        // targetPraefix and targetSuffix check\n        if (!this.useSourceAsTarget()) {\n            if (this.targetPraefix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetPraefix \"' + this.targetPraefix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n            if (this.targetSuffix().length > 0) {\n                this.warningsFound.push(\n                    'configured targetSuffix \"' + this.targetSuffix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\n            }\n        }\n     }\n\n    /**\n     * Check syntax of language.\n     * Must be compatible with XML Schema type xsd:language.\n     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\n     * @param lang language to check\n     */\n    private checkLanguageSyntax(lang: string) {\n        const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\n        if (!pattern.test(lang)) {\n            this.errorsFound.push(new XliffMergeError('language \"' + lang + '\" is not valid'));\n        }\n    }\n\n    public allowIdChange(): boolean {\n        return (isNullOrUndefined(this._allowIdChange)) ? false : this._allowIdChange;\n    }\n\n    public verbose(): boolean {\n        return (isNullOrUndefined(this._verbose)) ? false : this._verbose;\n    }\n\n    public quiet(): boolean {\n        return (isNullOrUndefined(this._quiet)) ? false : this._quiet;\n    }\n\n    /**\n     * Debug output all parameters to commandOutput.\n     */\n    public showAllParameters(commandOutput: CommandOutput): void {\n        commandOutput.debug('xliffmerge Used Parameters:');\n        commandOutput.debug('usedProfilePath:\\t\"%s\"', this.usedProfilePath);\n        commandOutput.debug('defaultLanguage:\\t\"%s\"', this.defaultLanguage());\n        commandOutput.debug('srcDir:\\t\"%s\"', this.srcDir());\n        commandOutput.debug('genDir:\\t\"%s\"', this.genDir());\n        commandOutput.debug('i18nBaseFile:\\t\"%s\"', this.i18nBaseFile());\n        commandOutput.debug('i18nFile:\\t\"%s\"', this.i18nFile());\n        commandOutput.debug('languages:\\t%s', this.languages());\n        for (const language of this.languages()) {\n            commandOutput.debug('outputFile[%s]:\\t%s', language, this.generatedI18nFile(language));\n        }\n        commandOutput.debug('removeUnusedIds:\\t%s', this.removeUnusedIds());\n        commandOutput.debug('supportNgxTranslate:\\t%s', this.supportNgxTranslate());\n        if (this.supportNgxTranslate()) {\n            commandOutput.debug('ngxTranslateExtractionPattern:\\t%s', this.ngxTranslateExtractionPattern());\n        }\n        commandOutput.debug('useSourceAsTarget:\\t%s', this.useSourceAsTarget());\n        if (this.useSourceAsTarget()) {\n            commandOutput.debug('targetPraefix:\\t\"%s\"', this.targetPraefix());\n            commandOutput.debug('targetSuffix:\\t\"%s\"', this.targetSuffix());\n        }\n        commandOutput.debug('allowIdChange:\\t%s', this.allowIdChange());\n        commandOutput.debug('beautifyOutput:\\t%s', this.beautifyOutput());\n        commandOutput.debug('preserveOrder:\\t%s', this.preserveOrder());\n        commandOutput.debug('autotranslate:\\t%s', this.autotranslate());\n        if (this.autotranslate()) {\n            commandOutput.debug('autotranslated languages:\\t%s', this.autotranslatedLanguages());\n            commandOutput.debug('apikey:\\t%s', this.apikey() ? '****' : 'NOT SET');\n            commandOutput.debug('apikeyfile:\\t%s', this.apikeyfile());\n        }\n    }\n\n    /**\n     * Default-Language, default en.\n     * @return default language\n     */\n    public defaultLanguage(): string {\n        return this._defaultLanguage ? this._defaultLanguage : 'en';\n    }\n\n    /**\n     * Liste der zu bearbeitenden Sprachen.\n     * @return languages\n     */\n    public languages(): string[] {\n        return this._languages ? this._languages : [];\n    }\n\n    /**\n     * src directory, where the master xlif is located.\n     * @return srcDir\n     */\n    public srcDir(): string {\n        return this._srcDir ? this._srcDir : '.';\n    }\n\n    /**\n     * The base file name of the xlif file for input and output.\n     * Default is messages\n     * @return base file\n     */\n    public i18nBaseFile(): string {\n        return this._i18nBaseFile ? this._i18nBaseFile : 'messages';\n    }\n\n    /**\n     * The master xlif file (the one generated by ng-xi18n).\n     * Default is <srcDir>/<i18nBaseFile>.xlf.\n     * @return master file\n     */\n    public i18nFile(): string {\n        return join(this.srcDir(),\n            (this._i18nFile ? this._i18nFile : this.i18nBaseFile() + '.' + this.suffixForGeneratedI18nFile())\n        ).replace(/\\\\/g, '/');\n    }\n\n    /**\n     * Format of the master xlif file.\n     * Default is \"xlf\", possible are \"xlf\" or \"xlf2\" or \"xmb\".\n     * @return format\n     */\n    public i18nFormat(): string {\n        return (this._i18nFormat ? this._i18nFormat : 'xlf');\n    }\n\n    /**\n     * potentially to be generated I18n-File with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedI18nFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + this.suffixForGeneratedI18nFile()).replace(/\\\\/g, '/');\n    }\n\n    private suffixForGeneratedI18nFile(): string {\n        switch (this.i18nFormat()) {\n            case 'xlf':\n                return 'xlf';\n            case 'xlf2':\n                return 'xlf';\n            case 'xmb':\n                return 'xtb';\n        }\n    }\n\n    /**\n     * potentially to be generated translate-File for ngx-translate with the translations for one language.\n     * @param lang language shortcut\n     * @return Path of file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + 'json').replace(/\\\\/g, '/');\n    }\n\n    /**\n     * The encoding used to write new XLIFF-files.\n     * @return encoding\n     */\n    public encoding(): string {\n        return this._encoding ? this._encoding : 'UTF-8';\n    }\n\n     /**\n      * Output-Directory, where the output is written to.\n      * Default is <srcDir>.\n     */\n    public genDir(): string {\n        return this._genDir ? this._genDir : this.srcDir();\n    }\n\n    public removeUnusedIds(): boolean {\n        return (isNullOrUndefined(this._removeUnusedIds)) ? true : this._removeUnusedIds;\n    }\n\n    public supportNgxTranslate(): boolean {\n        return (isNullOrUndefined(this._supportNgxTranslate)) ? false : this._supportNgxTranslate;\n    }\n\n    public ngxTranslateExtractionPattern(): string {\n        return (isNullOrUndefined(this._ngxTranslateExtractionPattern)) ?\n            NgxTranslateExtractor.DefaultExtractionPattern : this._ngxTranslateExtractionPattern;\n    }\n\n    /**\n     * Whether source must be used as target for new trans-units\n     * Default is true\n     */\n    public useSourceAsTarget(): boolean {\n        return (isNullOrUndefined(this._useSourceAsTarget)) ? true : this._useSourceAsTarget;\n    }\n\n    /**\n     * Praefix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetPraefix(): string {\n        return (isNullOrUndefined(this._targetPraefix)) ? '' : this._targetPraefix;\n    }\n\n    /**\n     * Suffix used for target when copying new trans-units\n     * Default is \"\"\n     */\n    public targetSuffix(): string {\n        return (isNullOrUndefined(this._targetSuffix)) ? '' : this._targetSuffix;\n    }\n\n    /**\n     * If set, run xml result through beautifier (pretty-data).\n     */\n    public beautifyOutput(): boolean {\n        return (isNullOrUndefined(this._beautifyOutput)) ? false : this._beautifyOutput;\n    }\n\n    /**\n     * If set, order of new trans units will be as in master.\n     * Otherwise they are added at the end.\n     */\n    public preserveOrder(): boolean {\n        return (isNullOrUndefined(this._preserveOrder)) ? true : this._preserveOrder;\n    }\n\n    /**\n     * Whether to use autotranslate for new trans-units\n     * Default is false\n     */\n    public autotranslate(): boolean {\n        if (isNullOrUndefined(this._autotranslate)) {\n            return false;\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate).length > 0;\n        }\n        return <boolean> this._autotranslate;\n    }\n\n    /**\n     * Whether to use autotranslate for a given language.\n     * @param lang language code.\n     */\n    public autotranslateLanguage(lang: string): boolean {\n        return this.autotranslatedLanguages().indexOf(lang) >= 0;\n    }\n\n    /**\n     * Return a list of languages to be autotranslated.\n     */\n    public autotranslatedLanguages(): string[] {\n        if (isNullOrUndefined(this._autotranslate) || this._autotranslate === false) {\n            return [];\n        }\n        if (isArray(this._autotranslate)) {\n            return (<string[]>this._autotranslate);\n        }\n        return this.languages().slice(1); // first is source language\n    }\n\n    /**\n     * API key to be used for Google Translate\n     * @return api key\n     */\n    public apikey(): string {\n        if (!isNullOrUndefined(this._apikey)) {\n            return this._apikey;\n        } else {\n            const apikeyPath = this.apikeyfile();\n            if (this.apikeyfile()) {\n                if (fs.existsSync(apikeyPath)) {\n                    return FileUtil.read(apikeyPath, 'utf-8');\n                } else {\n                    throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));\n                }\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /**\n     * file name for API key to be used for Google Translate.\n     * Explicitly set or read from env var API_KEY_FILE.\n     * @return file of api key\n     */\n    public apikeyfile(): string {\n        if (this._apikeyfile) {\n            return this._apikeyfile;\n        } else if (process.env.API_KEY_FILE) {\n            return process.env.API_KEY_FILE;\n        } else {\n            return null;\n        }\n    }\n}\n","/**\n * Created by martin on 19.02.2017.\n */\nimport * as path from 'path';\n\nlet pkg = null;\ntry {\n    pkg = require(path.resolve(__dirname, '..', 'package.json'));\n} catch (e) {\n    try {\n        pkg = require(path.resolve(__dirname, '..', '..', 'package.json'));\n    } catch (e) {\n        pkg = null;\n    }\n}\n\nexport const VERSION = (pkg ? pkg.version : 'unknown');\n","import {FileUtil} from '../common/file-util';\n/**\n * Created by martin on 10.03.2017.\n * Helper class to read XMl with a correct encoding.\n */\n\nexport class XmlReader {\n    static DEFAULT_ENCODING = 'UTF-8';\n\n    /**\n     * Read an xml-File.\n     * @param path Path to file\n     * @param encoding optional encoding of the xml.\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\n     * @return file content and encoding found in the file.\n     */\n    public static readXmlFileContent(path: string, encoding?: string): {content: string, encoding: string} {\n        if (!encoding) {\n            encoding = XmlReader.DEFAULT_ENCODING;\n        }\n        let content: string = FileUtil.read(path, encoding);\n        const foundEncoding = XmlReader.encodingFromXml(content);\n        if (foundEncoding !== encoding) {\n            // read again with the correct encoding\n            content = FileUtil.read(path, foundEncoding);\n        }\n        return {\n            content: content,\n            encoding: foundEncoding\n        };\n    }\n\n    /**\n     * Read the encoding from the xml.\n     * xml File starts with .. encoding=\"..\"\n     * @param xmlString xmlString\n     * @return encoding\n     */\n    private static encodingFromXml(xmlString: string): string {\n        const index = xmlString.indexOf('encoding=\"');\n        if (index < 0) {\n            return this.DEFAULT_ENCODING; // default in xml if not explicitly set\n        }\n        const endIndex = xmlString.indexOf('\"', index + 10); // 10 = length of 'encoding=\"'\n        return xmlString.substring(index + 10, endIndex);\n    }\n\n}\n\n","/**\n * Created by roobm on 21.03.2017.\n */\nimport {TranslationMessagesFileFactory, ITranslationMessagesFile} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {FileUtil} from '../common/file-util';\nimport {XmlReader} from './xml-reader';\n\n/**\n * Helper class to read translation files depending on format.\n */\nexport class TranslationMessagesFileReader {\n\n    /**\n     * Read file function, result depends on format, either XliffFile or XmbFile.\n     * @param i18nFormat format\n     * @param path path\n     * @param encoding encoding\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @return XliffFile\n     */\n    public static fromFile(i18nFormat: string,\n                           path: string,\n                           encoding: string,\n                           optionalMasterFilePath?: string): ITranslationMessagesFile {\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\n        return TranslationMessagesFileFactory.fromFileContent(i18nFormat, xmlContent.content, path, xmlContent.encoding, optionalMaster);\n    }\n\n    /**\n     * Read file function, result depends on format, either XliffFile or XmbFile.\n     * @param path path\n     * @param encoding encoding\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @return XliffFile\n     */\n    public static fromUnknownFormatFile(path: string,\n                                        encoding: string,\n                                        optionalMasterFilePath?: string): ITranslationMessagesFile {\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\n        return TranslationMessagesFileFactory.fromUnknownFormatFileContent(xmlContent.content, path, xmlContent.encoding, optionalMaster);\n    }\n\n    /**\n     * Read master xmb file\n     * @param optionalMasterFilePath optionalMasterFilePath\n     * @param encoding encoding\n     * @return content and encoding of file\n     */\n    private static masterFileContent(optionalMasterFilePath: string, encoding: string)\n        : {xmlContent: string, path: string, encoding: string} {\n        if (optionalMasterFilePath) {\n            const masterXmlContent = XmlReader.readXmlFileContent(optionalMasterFilePath, encoding);\n            return {\n                xmlContent: masterXmlContent.content,\n                path: optionalMasterFilePath,\n                encoding: masterXmlContent.encoding\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Save edited file.\n     * @param messagesFile messagesFile\n     * @param beautifyOutput Flag whether to use pretty-data to format the output.\n     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.\n     * See issue #64 for details.\n     * Default is false.\n     */\n    public static save(messagesFile: ITranslationMessagesFile, beautifyOutput?: boolean) {\n        FileUtil.replaceContent(messagesFile.filename(), messagesFile.editedContent(beautifyOutput), messagesFile.encoding());\n    }\n}\n\n","import {format} from 'util';\nimport * as request from 'request';\nimport {Observable} from 'rxjs';\nimport {of, forkJoin, throwError} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * Created by roobm on 03.07.2017.\n * Low Level Service to call Google Translate.\n */\n\n/**\n * Types form google translate api.\n */\n\ninterface GetSupportedLanguagesRequest {\n    target: string; // The language to use to return localized, human readable names of supported\\nlanguages.\n}\n\ninterface LanguagesResource {\n    language: string; // code of the language\n    name: string; // human readable name (in target language)\n}\n\ninterface LanguagesListResponse {\n    languages: LanguagesResource[];\n}\n\ninterface TranslateTextRequest {\n    q: string[];  // The input texts to translate\n    target: string; // The language to use for translation of the input text\n    source: string; // The language of the source text\n    format?: string; // \"html\" (default) or \"text\"\n    model?: string; // see public documentation\n}\n\ninterface TranslationsResource {\n    detectedSourceLanguage?: string;\n    model?: string;\n    translatedText: string;\n}\n\ninterface TranslationsListResponse {\n    translations: TranslationsResource[];\n}\n\ninterface InternalRequestResponse {\n    response: request.RequestResponse;\n    body: any;\n}\n\nconst MAX_SEGMENTS = 128;\n\nexport class AutoTranslateService {\n\n    private _request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;\n    _rootUrl: string;\n    _apiKey: string;\n\n    /**\n     * Strip region code and convert to lower\n     * @param lang lang\n     * @return lang without region code and in lower case.\n     */\n    public static stripRegioncode(lang: string): string {\n        const langLower = lang.toLowerCase();\n        for (let i = 0; i < langLower.length; i++) {\n            const c = langLower.charAt(i);\n            if (c < 'a' || c > 'z') {\n                return langLower.substring(0, i);\n            }\n        }\n        return langLower;\n    }\n\n    constructor(apiKey: string) {\n        this._request = request;\n        this._apiKey = apiKey;\n        this._rootUrl = 'https://translation.googleapis.com/';\n    }\n\n    /**\n     * Change API key (just for tests).\n     * @param apikey apikey\n     */\n    public setApiKey(apikey: string) {\n        this._apiKey = apikey;\n    }\n\n    /**\n     * Translate an array of messages at once.\n     * @param messages the messages to be translated\n     * @param from source language code\n     * @param to target language code\n     * @return Observable with translated messages or error\n     */\n    public translateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        // empty array needs no translation and always works ... (#78)\n        if (messages.length === 0) {\n            return of([]);\n        }\n        if (!this._apiKey) {\n            return throwError('cannot autotranslate: no api key');\n        }\n        if (!from || !to) {\n            return throwError('cannot autotranslate: source and target language must be set');\n        }\n        from = AutoTranslateService.stripRegioncode(from);\n        to = AutoTranslateService.stripRegioncode(to);\n        const allRequests: Observable<string[]>[] = this.splitMessagesToGoogleLimit(messages).map((partialMessages: string[]) => {\n            return this.limitedTranslateMultipleStrings(partialMessages, from, to);\n        });\n        return forkJoin(allRequests).pipe(\n            map((allTranslations: string[][]) => {\n                let all = [];\n                for (let i = 0; i < allTranslations.length; i++) {\n                    all = all.concat(allTranslations[i]);\n                }\n                return all;\n        }));\n    }\n\n    private splitMessagesToGoogleLimit(messages: string[]): string[][] {\n        if (messages.length <= MAX_SEGMENTS) {\n            return [messages];\n        }\n        const result = [];\n        let currentPackage = [];\n        let packageSize = 0;\n        for (let i = 0; i < messages.length; i++) {\n            currentPackage.push(messages[i]);\n            packageSize++;\n            if (packageSize >= MAX_SEGMENTS) {\n                result.push(currentPackage);\n                currentPackage = [];\n                packageSize = 0;\n            }\n        }\n        if (currentPackage.length > 0) {\n            result.push(currentPackage);\n        }\n        return result;\n    }\n\n    /**\n     * Return translation request, but messages must be limited to google limits.\n     * Not more that 128 single messages.\n     * @param messages messages\n     * @param from from\n     * @param to to\n     * @return the translated strings\n     */\n    private limitedTranslateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\n        const realUrl = this._rootUrl + 'language/translate/v2' + '?key=' + this._apiKey;\n        const translateRequest: TranslateTextRequest = {\n            q: messages,\n            target: to,\n            source: from,\n        };\n        const options = {\n            url: realUrl,\n            body: translateRequest,\n            json: true,\n//            proxy: 'http://127.0.0.1:8888' To set a proxy use env var HTTPS_PROXY\n        };\n        return this.post(realUrl, options).pipe(\n            map((data) => {\n            const body: any = data.body;\n            if (!body) {\n                throw new Error('no result received');\n            }\n            if (body.error) {\n                if (body.error.code === 400) {\n                    if (body.error.message === 'Invalid Value') {\n                        throw new Error(format('Translation from \"%s\" to \"%s\" not supported', from, to));\n                    }\n                    throw new Error(format('Invalid request: %s', body.error.message));\n                } else {\n                    throw new Error(format('Error %s: %s', body.error.code, body.error.message));\n                }\n            }\n            const result = body.data;\n            return result.translations.map((translation: TranslationsResource) => {\n                return translation.translatedText;\n            });\n        }));\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     */\n    post(uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> this._call.apply(this, [].concat('post', <string> uri,\n            <request.CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method method\n     * @param uri uri\n     * @param options options\n     *\n     * @return response\n     *\n     */\n    private _call(method: string, uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\n        return <Observable<InternalRequestResponse>> Observable.create((observer) => {\n            // build params array\n            const params = [].concat(<string> uri, <request.CoreOptions> Object.assign({}, options || {}),\n                <RequestCallback>(error: any, response: request.RequestResponse, body: any) => {\n                    if (error) {\n                        return observer.error(error);\n                    }\n\n                    observer.next(<InternalRequestResponse> Object.assign({}, {\n                        response: <request.RequestResponse> response,\n                        body: <any> body\n                    }));\n                    observer.complete();\n                });\n\n            // _call request method\n            try {\n                this._request[<string> method].apply(\n                    <request.RequestAPI<request.Request,\n                    request.CoreOptions,\n                    request.RequiredUriUrl>> this._request,\n                    params);\n            } catch (error) {\n                observer.error(error);\n            }\n        });\n    }\n}\n","/**\n * Created by martin on 29.06.2017.\n */\n\nexport class AutoTranslateResult {\n\n  constructor(private _success: boolean, private _details: string) {\n\n  }\n\n  public success(): boolean {\n    return this._success;\n  }\n}\n","import {AutoTranslateResult} from './auto-translate-result';\nimport {format} from 'util';\nimport {ITransUnit} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\n\n/**\n * A report about a run of Google Translate over all untranslated unit.\n * * Created by martin on 29.06.2017.\n */\n\nexport class AutoTranslateSummaryReport {\n\n  private _error: string;\n  private _from: string;\n  private _to: string;\n  private _total: number;\n  private _ignored: number;\n  private _success: number;\n  private _failed: number;\n\n  constructor(from: string, to: string) {\n    this._from = from;\n    this._to = to;\n    this._total = 0;\n    this._ignored = 0;\n    this._success = 0;\n    this._failed = 0;\n  }\n\n  /**\n   * Set error if total call failed (e.g. \"invalid api key\" or \"no connection\" ...)\n   * @param error error\n   * @param total total\n   */\n  public setError(error: string, total: number) {\n    this._error = error;\n    this._total = total;\n    this._failed = total;\n  }\n\n  public error(): string {\n    return this._error;\n  }\n\n  public setIgnored(ignored: number) {\n    this._total += ignored;\n    this._ignored = ignored;\n  }\n\n  /**\n   * Add a single result to the summary.\n   * @param tu tu\n   * @param result result\n   */\n  public addSingleResult(tu: ITransUnit, result: AutoTranslateResult) {\n    this._total++;\n    if (result.success()) {\n      this._success++;\n    } else {\n      this._failed++;\n    }\n  }\n\n  /**\n   * Merge another summary into this one.\n   * @param anotherSummary anotherSummary\n   */\n  public merge(anotherSummary: AutoTranslateSummaryReport) {\n    if (!this._error) {\n      this._error = anotherSummary._error;\n    }\n    this._total += anotherSummary.total();\n    this._ignored += anotherSummary.ignored();\n    this._success += anotherSummary.success();\n    this._failed += anotherSummary.failed();\n  }\n\n  public total(): number {\n    return this._total;\n  }\n\n  public ignored(): number {\n    return this._ignored;\n  }\n\n  public success(): number {\n    return this._success;\n  }\n\n  public failed(): number {\n    return this._failed;\n  }\n\n  /**\n   * Human readable version of report\n   */\n  public content(): string {\n    let result;\n    if (this._error) {\n      result = format('Auto translation from \"%s\" to \"%s\" failed: \"%s\", failed units: %s', this._from, this._to, this._error, this._failed);\n    } else {\n      result = format('Auto translation from \"%s\" to \"%s\", total auto translated units: %s, ignored: %s, succesful: %s, failed: %s',\n          this._from, this._to, this._total, this._ignored, this._success, this._failed);\n    }\n    return result;\n  }\n}\n","import {isNullOrUndefined} from '../common/util';\nimport {Observable, forkJoin, of} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport * as entityDecoderLib from 'he';\nimport {\n    IICUMessage, IICUMessageTranslation, INormalizedMessage, ITranslationMessagesFile, ITransUnit,\n    STATE_NEW\n} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {AutoTranslateService} from './auto-translate-service';\nimport {AutoTranslateResult} from './auto-translate-result';\nimport {AutoTranslateSummaryReport} from './auto-translate-summary-report';\n/**\n * Created by martin on 07.07.2017.\n * Service to autotranslate Transunits via Google Translate.\n */\n\nexport class XliffMergeAutoTranslateService {\n\n    private autoTranslateService: AutoTranslateService;\n\n    constructor(apikey: string) {\n        this.autoTranslateService = new AutoTranslateService(apikey);\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    public autoTranslate(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        return forkJoin([\n            this.doAutoTranslateNonICUMessages(from, to, languageSpecificMessagesFile),\n            ...this.doAutoTranslateICUMessages(from, to, languageSpecificMessagesFile)])\n            .pipe(\n                map((summaries: AutoTranslateSummaryReport[]) => {\n                    const summary = summaries[0];\n                    for (let i = 1; i < summaries.length; i++) {\n                        summary.merge(summaries[i]);\n                    }\n                    return summary;\n        }));\n    }\n\n    /**\n     * Collect all units that are untranslated.\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return all untranslated units\n     */\n    private allUntranslatedTUs(languageSpecificMessagesFile: ITranslationMessagesFile): ITransUnit[] {\n        // collect all units, that should be auto translated\n        const allUntranslated: ITransUnit[] = [];\n        languageSpecificMessagesFile.forEachTransUnit((tu) => {\n            if (tu.targetState() === STATE_NEW) {\n                allUntranslated.push(tu);\n            }\n        });\n        return allUntranslated;\n    }\n\n    private doAutoTranslateNonICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport> {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatable = allUntranslated.filter((tu) => isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        const allMessages: string[] = allTranslatable.map((tu) => {\n            return tu.sourceContentNormalized().asDisplayString();\n        });\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                const summary = new AutoTranslateSummaryReport(from, to);\n                summary.setIgnored(allUntranslated.length - allTranslatable.length);\n                for (let i = 0; i < translations.length; i++) {\n                    const tu = allTranslatable[i];\n                    const translationText = translations[i];\n                    const result = this.autoTranslateNonICUUnit(tu, translationText);\n                    summary.addSingleResult(tu, result);\n                }\n                return summary;\n                }),\n                catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private doAutoTranslateICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\n        : Observable<AutoTranslateSummaryReport>[] {\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\n        const allTranslatableICU = allUntranslated.filter((tu) => !isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\n        return allTranslatableICU.map((tu) => {\n            return this.doAutoTranslateICUMessage(from, to, tu);\n        });\n    }\n\n    /**\n     * Translate single ICU Messages.\n     * @param from from\n     * @param to to\n     * @param tu transunit to translate (must contain ICU Message)\n     * @return summary report\n     */\n    private doAutoTranslateICUMessage(from: string, to: string, tu: ITransUnit): Observable<AutoTranslateSummaryReport> {\n        const icuMessage: IICUMessage = tu.sourceContentNormalized().getICUMessage();\n        const categories = icuMessage.getCategories();\n        // check for nested ICUs, we do not support that\n        if (categories.find((category) => !isNullOrUndefined(category.getMessageNormalized().getICUMessage()))) {\n            const summary = new AutoTranslateSummaryReport(from, to);\n            summary.setIgnored(1);\n            return of(summary);\n        }\n        const allMessages: string[] = categories.map((category) => category.getMessageNormalized().asDisplayString());\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\n            .pipe(\n                // #94 google translate might return &#.. entity refs, that must be decoded\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\n                map((translations: string[]) => {\n                    const summary = new AutoTranslateSummaryReport(from, to);\n                    const icuTranslation: IICUMessageTranslation = {};\n                    for (let i = 0; i < translations.length; i++) {\n                        icuTranslation[categories[i].getCategory()] = translations[i];\n                    }\n                    const result = this.autoTranslateICUUnit(tu, icuTranslation);\n                    summary.addSingleResult(tu, result);\n                    return summary;\n                }), catchError((err) => {\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\n                    failSummary.setError(err.message, allMessages.length);\n                    return of(failSummary);\n            }));\n    }\n\n    private autoTranslateNonICUUnit(tu: ITransUnit, translatedMessage: string): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translate(translatedMessage));\n    }\n\n    private autoTranslateICUUnit(tu: ITransUnit, translation: IICUMessageTranslation): AutoTranslateResult {\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translateICUMessage(translation));\n    }\n\n    private autoTranslateUnit(tu: ITransUnit, translatedMessage: INormalizedMessage): AutoTranslateResult {\n        const errors = translatedMessage.validate();\n        const warnings = translatedMessage.validateWarnings();\n        if (!isNullOrUndefined(errors)) {\n            return new AutoTranslateResult(false, 'errors detected, not translated');\n        } else if (!isNullOrUndefined(warnings)) {\n            return new AutoTranslateResult(false, 'warnings detected, not translated');\n        } else {\n            tu.translate(translatedMessage);\n            return new AutoTranslateResult(true, null); // success\n        }\n    }\n}\n","import {CommandOutput} from '../common/command-output';\nimport {XliffMergeParameters} from './xliff-merge-parameters';\nimport {XliffMergeError} from './xliff-merge-error';\nimport {FileUtil} from '../common/file-util';\nimport {VERSION} from './version';\nimport {format} from 'util';\nimport {isNullOrUndefined} from '../common/util';\nimport {ITranslationMessagesFile, ITransUnit,\n    FORMAT_XMB, FORMAT_XTB,\n    NORMALIZATION_FORMAT_DEFAULT, STATE_FINAL, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\nimport {Observable, of, forkJoin} from 'rxjs';\nimport {map, catchError} from 'rxjs/operators';\nimport {XliffMergeAutoTranslateService} from '../autotranslate/xliff-merge-auto-translate-service';\nimport {AutoTranslateSummaryReport} from '../autotranslate/auto-translate-summary-report';\n\n/**\n * Created by martin on 17.02.2017.\n * XliffMerge - read xliff or xmb file and put untranslated parts in language specific xliff or xmb files.\n *\n */\n\nexport class XliffMerge {\n\n    private readonly commandOutput: CommandOutput;\n\n    private readonly options: ProgramOptions;\n\n    private parameters: XliffMergeParameters;\n\n    /**\n     * The read master xlf file.\n     */\n    private master: ITranslationMessagesFile; // XliffFile or Xliff2File or XmbFile\n\n    private autoTranslateService: XliffMergeAutoTranslateService;\n\n    static main(argv: string[]) {\n        const options = XliffMerge.parseArgs(argv);\n        if (options) {\n            new XliffMerge(new CommandOutput(process.stdout), options).run((result) => {\n                process.exit(result);\n            });\n        }\n    }\n\n    static parseArgs(argv: string[]): ProgramOptions {\n        const options: ProgramOptions = {\n            languages: []\n        };\n        for (let i = 2; i < argv.length; i++) {\n            const arg = argv[i];\n            if (arg === '--version' || arg === '-version') {\n                console.log('xliffmerge ' + VERSION);\n            } else if (arg === '--verbose' || arg === '-v') {\n                options.verbose = true;\n            } else if (arg === '--profile' || arg === '-p') {\n                i++;\n                if (i >= argv.length) {\n                    console.log('missing config file');\n                    XliffMerge.showUsage();\n                    return null;\n                } else {\n                    options.profilePath = argv[i];\n                }\n            } else if (arg === '--quiet' || arg === '-q') {\n                options.quiet = true;\n            } else if (arg === '--help' || arg === '-help' || arg === '-h') {\n                XliffMerge.showUsage();\n            } else if (arg.length > 0 && arg.charAt(0) === '-') {\n                console.log('unknown option');\n                return null;\n            } else {\n                options.languages.push(arg);\n            }\n        }\n        return options;\n    }\n\n    static showUsage() {\n        console.log('usage: xliffmerge <option>* <language>*');\n        console.log('Options');\n        console.log('\\t-p|--profile a json configuration file containing all relevant parameters.');\n        console.log('\\t\\tfor details please consult the home page https://github.com/martinroob/ngx-i18nsupport');\n        console.log('\\t-v|--verbose show some output for debugging purposes');\n        console.log('\\t-q|--quiet only show errors, nothing else');\n        console.log('\\t-version|--version show version string');\n        console.log('');\n        console.log('\\t<language> has to be a valid language short string, e,g. \"en\", \"de\", \"de-ch\"');\n    }\n\n    /**\n     * For Tests, create instance with given profile\n     * @param commandOutput commandOutput\n     * @param options options\n     * @param profileContent profileContent\n     */\n    public static createFromOptions(commandOutput: CommandOutput, options: ProgramOptions, profileContent?: IConfigFile) {\n        const instance = new XliffMerge(commandOutput, options);\n        instance.parameters = XliffMergeParameters.createFromOptions(options, profileContent);\n        return instance;\n    }\n\n    constructor(commandOutput: CommandOutput, options: ProgramOptions) {\n        this.commandOutput = commandOutput;\n        this.options = options;\n        this.parameters = null;\n    }\n\n    /**\n     * Run the command.\n     * This runs async.\n     * @param callbackFunction when command is executed, called with the return code (0 for ok), if given.\n     * @param errorFunction callbackFunction for error handling\n     */\n    public run(callbackFunction?: ((retcode: number) => any), errorFunction?: ((error: any) => any)) {\n        this.runAsync()\n            .subscribe((retcode: number) => {\n                if (!isNullOrUndefined(callbackFunction)) {\n                    callbackFunction(retcode);\n                }\n            }, (error) => {\n                if (!isNullOrUndefined(errorFunction)) {\n                    errorFunction(error);\n                }\n            });\n    }\n\n    /**\n     * Execute merge-Process.\n     * @return Async operation, on completion returns retcode 0=ok, other = error.\n     */\n    public runAsync(): Observable<number> {\n        if (this.options && this.options.quiet) {\n            this.commandOutput.setQuiet();\n        }\n        if (this.options && this.options.verbose) {\n            this.commandOutput.setVerbose();\n        }\n        if (!this.parameters) {\n            this.parameters = XliffMergeParameters.createFromOptions(this.options);\n        }\n        this.commandOutput.info('xliffmerge version %s', VERSION);\n        if (this.parameters.verbose()) {\n            this.parameters.showAllParameters(this.commandOutput);\n        }\n        if (this.parameters.errorsFound.length > 0) {\n            for (const err of this.parameters.errorsFound) {\n                this.commandOutput.error(err.message);\n            }\n            return of(-1);\n        }\n        if (this.parameters.warningsFound.length > 0) {\n            for (const warn of this.parameters.warningsFound) {\n                this.commandOutput.warn(warn);\n            }\n        }\n        this.readMaster();\n        if (this.parameters.autotranslate()) {\n            this.autoTranslateService = new XliffMergeAutoTranslateService(this.parameters.apikey());\n        }\n        const executionForAllLanguages: Observable<number>[] = [];\n        this.parameters.languages().forEach((lang: string) => {\n            executionForAllLanguages.push(this.processLanguage(lang));\n        });\n        return forkJoin(executionForAllLanguages).pipe(\n            map((retcodes: number[]) => this.totalRetcode(retcodes)));\n    }\n\n    /**\n     * Give an array of retcodes for the different languages, return the total retcode.\n     * If all are 0, it is 0, otherwise the first non zero.\n     * @param retcodes retcodes\n     * @return number\n     */\n    private totalRetcode(retcodes: number[]): number {\n        for (let i = 0; i < retcodes.length; i++) {\n            if (retcodes[i] !== 0) {\n                return retcodes[i];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Return the name of the generated file for given lang.\n     * @param lang language\n     * @return name of generated file\n     */\n    public generatedI18nFile(lang: string): string {\n        return this.parameters.generatedI18nFile(lang);\n    }\n\n    /**\n     * Return the name of the generated ngx-translation file for given lang.\n     * @param lang language\n     * @return name of translate file\n     */\n    public generatedNgxTranslateFile(lang: string): string {\n        return this.parameters.generatedNgxTranslateFile(lang);\n    }\n\n    /**\n     * Warnings found during the run.\n     * @return warnings\n     */\n    public warnings(): string[] {\n        return this.parameters.warningsFound;\n    }\n\n    private readMaster() {\n        try {\n            this.master = TranslationMessagesFileReader.fromFile(\n                this.parameters.i18nFormat(),\n                this.parameters.i18nFile(),\n                this.parameters.encoding());\n            this.master.warnings().forEach((warning: string) => {\n                this.commandOutput.warn(warning);\n            });\n            const count = this.master.numberOfTransUnits();\n            const missingIdCount = this.master.numberOfTransUnitsWithMissingId();\n            this.commandOutput.info('master contains %s trans-units', count);\n            if (missingIdCount > 0) {\n                this.commandOutput.warn('master contains %s trans-units, but there are %s without id', count, missingIdCount);\n            }\n            const sourceLang: string = this.master.sourceLanguage();\n            if (sourceLang && sourceLang !== this.parameters.defaultLanguage()) {\n                this.commandOutput.warn(\n                    'master says to have source-language=\"%s\", should be \"%s\" (your defaultLanguage)',\n                    sourceLang,\n                    this.parameters.defaultLanguage());\n                this.master.setSourceLanguage(this.parameters.defaultLanguage());\n                TranslationMessagesFileReader.save(this.master, this.parameters.beautifyOutput());\n                this.commandOutput.warn('changed master source-language=\"%s\" to \"%s\"', sourceLang, this.parameters.defaultLanguage());\n            }\n        } catch (err) {\n            if (err instanceof XliffMergeError) {\n                this.commandOutput.error(err.message);\n                return of(-1);\n            } else {\n                // unhandled\n                const currentFilename = this.parameters.i18nFile();\n                const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                this.commandOutput.error(filenameString + 'oops ' + err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * Process the given language.\n     * Async operation.\n     * @param lang language\n     * @return on completion 0 for ok, other for error\n     */\n    private processLanguage(lang: string): Observable<number> {\n        this.commandOutput.debug('processing language %s', lang);\n        const languageXliffFile = this.parameters.generatedI18nFile(lang);\n        const currentFilename = languageXliffFile;\n        let result: Observable<void>;\n        if (!FileUtil.exists(languageXliffFile)) {\n            result = this.createUntranslatedXliff(lang, languageXliffFile);\n        } else {\n            result = this.mergeMasterTo(lang, languageXliffFile);\n        }\n        return result\n            .pipe(map(() => {\n                if (this.parameters.supportNgxTranslate()) {\n                    const languageSpecificMessagesFile: ITranslationMessagesFile =\n                        TranslationMessagesFileReader.fromFile(\n                            this.translationFormat(this.parameters.i18nFormat()),\n                            languageXliffFile,\n                            this.parameters.encoding(),\n                            this.master.filename());\n                    NgxTranslateExtractor.extract(\n                        languageSpecificMessagesFile,\n                        this.parameters.ngxTranslateExtractionPattern(),\n                        this.parameters.generatedNgxTranslateFile(lang));\n                }\n                return 0;\n            }), catchError((err) => {\n                if (err instanceof XliffMergeError) {\n                    this.commandOutput.error(err.message);\n                    return of(-1);\n                } else {\n                    // unhandled\n                    const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\n                    this.commandOutput.error(filenameString + 'oops ' + err);\n                    throw err;\n                }\n            }));\n    }\n\n    /**\n     * create a new file for the language, which contains no translations, but all keys.\n     * in principle, this is just a copy of the master with target-language set.\n     * @param lang language\n     * @param languageXliffFilePath name of file\n     */\n    private createUntranslatedXliff(lang: string, languageXliffFilePath: string): Observable<void> {\n        // copy master ...\n        // and set target-language\n        // and copy source to target if necessary\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        this.master.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        this.master.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            this.master.createTranslationFileForLang(lang, languageXliffFilePath, isDefaultLang, this.parameters.useSourceAsTarget());\n        return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile).pipe(\n            map((/* summary */) => {\n            // write it to file\n            TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n            this.commandOutput.info('created new file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n            if (!isDefaultLang) {\n                this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n            }\n            return null;\n        }));\n    }\n\n    /**\n     * Map the input format to the format of the translation.\n     * Normally they are the same but for xmb the translation format is xtb.\n     * @param i18nFormat format\n     */\n    private translationFormat(i18nFormat: string): string {\n        if (i18nFormat === FORMAT_XMB) {\n            return FORMAT_XTB;\n        } else {\n            return i18nFormat;\n        }\n    }\n\n    /**\n     * Merge all\n     * @param lang language\n     * @param languageXliffFilePath filename\n     */\n    private mergeMasterTo(lang: string, languageXliffFilePath: string): Observable<void> {\n        // read lang specific file\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\n            TranslationMessagesFileReader.fromFile(\n                this.translationFormat(this.parameters.i18nFormat()),\n                languageXliffFilePath,\n                this.parameters.encoding());\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\n        let newCount = 0;\n        let correctSourceContentCount = 0;\n        let correctSourceRefCount = 0;\n        let correctDescriptionOrMeaningCount = 0;\n        let idChangedCount = 0;\n        languageSpecificMessagesFile.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\n        languageSpecificMessagesFile.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\n        let lastProcessedUnit: ITransUnit = null;\n        this.master.forEachTransUnit((masterTransUnit) => {\n            const transUnit: ITransUnit = languageSpecificMessagesFile.transUnitWithId(masterTransUnit.id);\n\n            if (!transUnit) {\n                // oops, no translation, must be a new key, so add it\n                let newUnit;\n                if (this.parameters.allowIdChange()\n                    && (newUnit = this.processChangedIdUnit(masterTransUnit, languageSpecificMessagesFile, lastProcessedUnit))) {\n                    lastProcessedUnit = newUnit;\n                    idChangedCount++;\n                } else {\n                    lastProcessedUnit = languageSpecificMessagesFile.importNewTransUnit(\n                        masterTransUnit,\n                        isDefaultLang,\n                        this.parameters.useSourceAsTarget(),\n                        (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n                    newCount++;\n                }\n            } else {\n                // check for changed source content and change it if needed\n                // (can only happen if ID is explicitely set, otherwise ID would change if source content is changed.\n                if (transUnit.supportsSetSourceContent() && !this.areSourcesNearlyEqual(masterTransUnit, transUnit)) {\n                    transUnit.setSourceContent(masterTransUnit.sourceContent());\n                    if (isDefaultLang) {\n                        // #81 changed source must be copied to target for default lang\n                        transUnit.translate(masterTransUnit.sourceContent());\n                        transUnit.setTargetState(STATE_FINAL);\n                    } else {\n                        if (transUnit.targetState() === STATE_FINAL) {\n                            // source is changed, so translation has to be checked again\n                            transUnit.setTargetState(STATE_TRANSLATED);\n                        }\n                    }\n                    correctSourceContentCount++;\n                }\n                // check for missing or changed source ref and add it if needed\n                if (transUnit.supportsSetSourceReferences()\n                    && !this.areSourceReferencesEqual(masterTransUnit.sourceReferences(), transUnit.sourceReferences())) {\n                    transUnit.setSourceReferences(masterTransUnit.sourceReferences());\n                    correctSourceRefCount++;\n                }\n                // check for changed description or meaning\n                if (transUnit.supportsSetDescriptionAndMeaning()) {\n                    let changed = false;\n                    if (transUnit.description() !== masterTransUnit.description()) {\n                        transUnit.setDescription(masterTransUnit.description());\n                        changed = true;\n                    }\n                    if (transUnit.meaning() !== masterTransUnit.meaning()) {\n                        transUnit.setMeaning(masterTransUnit.meaning());\n                        changed = true;\n                    }\n                    if (changed) {\n                        correctDescriptionOrMeaningCount++;\n                    }\n                }\n                lastProcessedUnit = transUnit;\n            }\n        });\n        if (newCount > 0) {\n            this.commandOutput.warn('merged %s trans-units from master to \"%s\"', newCount, lang);\n        }\n        if (correctSourceContentCount > 0) {\n            this.commandOutput.warn('transferred %s changed source content from master to \"%s\"', correctSourceContentCount, lang);\n        }\n        if (correctSourceRefCount > 0) {\n            this.commandOutput.warn('transferred %s source references from master to \"%s\"', correctSourceRefCount, lang);\n        }\n        if (idChangedCount > 0) {\n            this.commandOutput.warn('found %s changed id\\'s in \"%s\"', idChangedCount, lang);\n        }\n        if (correctDescriptionOrMeaningCount > 0) {\n            this.commandOutput.warn(\n                'transferred %s changed descriptions/meanings from master to \"%s\"', correctDescriptionOrMeaningCount, lang);\n        }\n\n        // remove all elements that are no longer used\n        let removeCount = 0;\n        languageSpecificMessagesFile.forEachTransUnit((transUnit: ITransUnit) => {\n            const existsInMaster = !isNullOrUndefined(this.master.transUnitWithId(transUnit.id));\n            if (!existsInMaster) {\n                if (this.parameters.removeUnusedIds()) {\n                    languageSpecificMessagesFile.removeTransUnitWithId(transUnit.id);\n                }\n                removeCount++;\n            }\n        });\n        if (removeCount > 0) {\n            if (this.parameters.removeUnusedIds()) {\n                this.commandOutput.warn('removed %s unused trans-units in \"%s\"', removeCount, lang);\n            } else {\n                this.commandOutput.warn('keeping %s unused trans-units in \"%s\", because removeUnused is disabled', removeCount, lang);\n            }\n        }\n\n        if (newCount === 0 && removeCount === 0 && correctSourceContentCount === 0\n            && correctSourceRefCount === 0 && correctDescriptionOrMeaningCount === 0) {\n            this.commandOutput.info('file for \"%s\" was up to date', lang);\n            return of(null);\n        } else {\n            return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile)\n                .pipe(map(() => {\n                    // write it to file\n                    TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\n                    this.commandOutput.info('updated file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\n                    if (newCount > 0 && !isDefaultLang) {\n                        this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\n                    }\n                    return null;\n                }));\n        }\n    }\n\n    /**\n     * Handle the case of changed id due to small white space changes.\n     * @param masterTransUnit unit in master file\n     * @param languageSpecificMessagesFile translation file\n     * @param lastProcessedUnit Unit before the one processed here. New unit will be inserted after this one.\n     * @return processed unit, if done, null if no changed unit found\n     */\n    private processChangedIdUnit(\n        masterTransUnit: ITransUnit,\n        languageSpecificMessagesFile: ITranslationMessagesFile,\n        lastProcessedUnit: ITransUnit): ITransUnit {\n\n        let changedTransUnit: ITransUnit = null;\n        languageSpecificMessagesFile.forEachTransUnit((languageTransUnit) => {\n             if (this.areSourcesNearlyEqual(languageTransUnit, masterTransUnit)) {\n                 changedTransUnit = languageTransUnit;\n             }\n        });\n        if (!changedTransUnit) {\n            return null;\n        }\n        const mergedTransUnit = languageSpecificMessagesFile.importNewTransUnit(\n            masterTransUnit,\n            false,\n            false,\n            (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\n        const translatedContent = changedTransUnit.targetContent();\n        if (translatedContent) { // issue #68 set translated only, if it is really translated\n            mergedTransUnit.translate(translatedContent);\n            mergedTransUnit.setTargetState(STATE_TRANSLATED);\n        }\n        return mergedTransUnit;\n    }\n\n    /**\n     * test wether the sources of 2 trans units are equal ignoring white spaces.\n     * @param tu1 tu1\n     * @param tu2 tu2\n     */\n    private areSourcesNearlyEqual(tu1: ITransUnit, tu2: ITransUnit): boolean {\n        if ((tu1 && !tu2) || (tu2 && !tu1)) {\n            return false;\n        }\n        const tu1Normalized = tu1.sourceContentNormalized();\n        const tu2Normalized = tu2.sourceContentNormalized();\n        if (tu1Normalized.isICUMessage()) {\n            if (tu2Normalized.isICUMessage()) {\n                const icu1Normalized = tu1Normalized.getICUMessage().asNativeString().trim();\n                const icu2Normalized = tu2Normalized.getICUMessage().asNativeString().trim();\n                return icu1Normalized === icu2Normalized;\n            } else {\n                return false;\n            }\n        }\n        if (tu1Normalized.containsICUMessageRef()) {\n            const icuref1Normalized = tu1Normalized.asNativeString().trim();\n            const icuref2Normalized = tu2Normalized.asNativeString().trim();\n            return icuref1Normalized === icuref2Normalized;\n        }\n        const s1Normalized = tu1Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        const s2Normalized = tu2Normalized.asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\n        return s1Normalized === s2Normalized;\n    }\n\n    private areSourceReferencesEqual(\n        ref1: {sourcefile: string; linenumber: number; }[],\n        ref2: {sourcefile: string; linenumber: number; }[]): boolean {\n\n        if ((isNullOrUndefined(ref1) && !isNullOrUndefined(ref2)) || (isNullOrUndefined(ref2) && !isNullOrUndefined(ref1))) {\n            return false;\n        }\n        if (isNullOrUndefined(ref1) && isNullOrUndefined(ref2)) {\n            return true;\n        }\n        // bot refs are set now, convert to set to compare them\n        const set1: Set<string> = new Set<string>();\n        ref1.forEach((ref) => {set1.add(ref.sourcefile + ':' + ref.linenumber); });\n        const set2: Set<string> = new Set<string>();\n        ref2.forEach((ref) => {set2.add(ref.sourcefile + ':' + ref.linenumber); });\n        if (set1.size !== set2.size) {\n            return false;\n        }\n        let match = true;\n        set2.forEach((ref) => {\n            if (!set1.has(ref)) {\n                match = false;\n            }\n        });\n        return match;\n    }\n\n    /**\n     * Auto translate file via Google Translate.\n     * Will translate all new units in file.\n     * @param from from\n     * @param to to\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\n     * @return a promise with the execution result as a summary report.\n     */\n    private autoTranslate(\n        from: string,\n        to: string,\n        languageSpecificMessagesFile: ITranslationMessagesFile): Observable<AutoTranslateSummaryReport> {\n\n        let serviceCall: Observable<AutoTranslateSummaryReport>;\n        const autotranslateEnabled: boolean = this.parameters.autotranslateLanguage(to);\n        if (autotranslateEnabled) {\n            serviceCall = this.autoTranslateService.autoTranslate(from, to, languageSpecificMessagesFile);\n        } else {\n            serviceCall = of(new AutoTranslateSummaryReport(from, to));\n        }\n        return serviceCall.pipe(map((summary) => {\n            if (autotranslateEnabled) {\n                if (summary.error() || summary.failed() > 0) {\n                    this.commandOutput.error(summary.content());\n                } else {\n                    this.commandOutput.warn(summary.content());\n                }\n            }\n            return summary;\n        }));\n    }\n\n}\n"]}